using iTextSharp.text;
using iTextSharp.text.pdf;
using iTextSharp.tool.xml;
using System;
using System.Collections.Generic;
using System.Configuration;
using System.Data;
using System.Data.SqlClient;
using System.IO;
using System.Linq;
using System.Net.Mail;
using System.Net.Mime;
using System.Security.Cryptography;
using System.Text;
using System.Web;
using System.Web.UI;
using System.Web.UI.WebControls;
using System.Xml.Linq;

public partial class Admin_DeliveryChallan : System.Web.UI.Page
{
    SqlConnection con = new SqlConnection(ConfigurationManager.ConnectionStrings["connectionString"].ConnectionString);
    DataTable Dt_Component = new DataTable();
    string id;
    string ID;
    string chkupdate;
    DataTable Dt_Mail = new DataTable();
    DataTable Dt_Itemsdetails = new DataTable();
    protected void Page_Load(object sender, EventArgs e)
    {
        if (!IsPostBack)
        {
            ViewState["RowNo"] = 0;
            Dt_Mail.Columns.AddRange(new DataColumn[2] { new DataColumn("mailid"), new DataColumn("mailtext") });
            ViewState["MULTMail"] = Dt_Mail;

            ViewState["RowNo"] = 0;
            //Dt_Component.Columns.AddRange(new DataColumn[11] { new DataColumn("id"), new DataColumn("Description"), new DataColumn("HSN/SAC"), new DataColumn("Tax"), new DataColumn("Quantity"), new DataColumn("Unit"), new DataColumn("Total"), new DataColumn("Rate"), new DataColumn("Discount"), new DataColumn("Total Amount"), new DataColumn("Print Description") });
            //Dt_Component.Columns.AddRange(new DataColumn[11] { new DataColumn("id"), new DataColumn("MateName"), new DataColumn("Description"), new DataColumn("printdescription"), new DataColumn("HSN/SAC"), new DataColumn("Tax"), new DataColumn("Quantity"), new DataColumn("Unit"), new DataColumn("Rate"), new DataColumn("Discount"), new DataColumn("Total Amount") });
            Dt_Component.Columns.AddRange(new DataColumn[12] { new DataColumn("id"), new DataColumn("JobNo"), new DataColumn("MateName"), new DataColumn("Description"), new DataColumn("printdescription"), new DataColumn("HSN/SAC"), new DataColumn("Tax"), new DataColumn("Quantity"), new DataColumn("Unit"), new DataColumn("Rate"), new DataColumn("Discount"), new DataColumn("Total Amount") });
            ViewState["QuotationComp"] = Dt_Component;
            AutogenerateChallan();
            AutogeneratedDocTag();

            if (Request.QueryString["ChallanNo"] != null)
            {
                id = Decrypt(Request.QueryString["ChallanNo"].ToString());
                btnSubmit.Text = "Update";
                LoadData(id);
                //DataTable dt1 = new DataTable();
                //SqlDataAdapter sad1 = new SqlDataAdapter("select ContactPerName, * from tblCustomerContactPerson where CustName='" + txtcustomerName.Text + "'", con);
                //sad1.Fill(dt1);
                //ddlkintperson.DataTextField = "ContactPerName";

                //ddlkintperson.DataSource = dt1;
                //ddlkintperson.DataBind();
                GetJobNO();
               // Getinvoiceno();
            }
            if (Request.QueryString["Id"] != null)
            {
                ID = Decrypt(Request.QueryString["Id"].ToString());
                ReportLoaddate();
                btnCancel.Text = "Close";
                Readonlydatareport();
            }
        }
    }
    protected void Readonlydatareport()
    {
        mailcheck.Visible = false;
        txtstatecode.ReadOnly = true;
        txtchallanNo.ReadOnly = true;
        txtchallanDate.ReadOnly = true;
        txtpodate.ReadOnly = true;
        txtigst.ReadOnly = true;
        txtorderDate.ReadOnly = true;
        txtorderDate.ReadOnly = true;
        txtorderNo.ReadOnly = true;
        Txtdoctag.ReadOnly = true;
        txtLRNo.ReadOnly = true;
        txtcrdays.ReadOnly = true;
        txtdelivery.ReadOnly = true;
        txtcustomerName.ReadOnly = true;
        txtMobileNo.ReadOnly = true;
        txtAddress.ReadOnly = true;
        txtGstNo.ReadOnly = true;

        txtnarration.ReadOnly = true;
        txtpono.ReadOnly = true;
        //txtEmail.ReadOnly = true;
        txt_cgst9.ReadOnly = true;
        txt_sgst9.ReadOnly = true;
        txt_grandTotal.ReadOnly = true;

        txt_term_1.ReadOnly = true;
        txt_condition_1.ReadOnly = true;
        txt_term_2.ReadOnly = true;
        txt_condition_2.ReadOnly = true;
        txt_term_3.ReadOnly = true;
        txt_condition_3.ReadOnly = true;
        txt_term_4.ReadOnly = true;
        txt_condition_4.ReadOnly = true;
        //  ddlkintperson.Enabled = false;

        dgvProductDtl.Columns[11].Visible = false;
        headerreport.InnerText = " Delivery Challan Report";
        componantdetails.Visible = false;
        btnSubmit.Visible = false;
        Grd_MAIL.Columns[2].Visible = false;
        maildiv.Visible = false;
        //txtjobNo.ReadOnly = true;
       // txtstatus.ReadOnly = true;

    }
    protected void ReportLoaddate()
    {
        DataTable dt = new DataTable();
        SqlDataAdapter sad = new SqlDataAdapter("select * from tblChallanHdr where Id='" + ID + "'", con);
        sad.Fill(dt);
        if (dt.Rows.Count > 0)
        {
            txtchallanNo.Text = dt.Rows[0]["ChallanNo"].ToString();
            DateTime ffff1 = Convert.ToDateTime(dt.Rows[0]["ChallanDate"].ToString());
            txtchallanDate.Text = ffff1.ToString("yyyy-MM-dd");
            DateTime ffff2 = Convert.ToDateTime(dt.Rows[0]["PODate"].ToString());
            txtpodate.Text = ffff2.ToString("yyyy-MM-dd");
            DateTime ffff3 = Convert.ToDateTime(dt.Rows[0]["OrderDate"].ToString());
            txtorderDate.Text = ffff3.ToString("yyyy-MM-dd");
            DateTime ffff4 = Convert.ToDateTime(dt.Rows[0]["LRdate"].ToString());
            txtLRdate.Text = ffff3.ToString("yyyy-MM-dd");
            txtorderNo.Text = dt.Rows[0]["OrderNo"].ToString();
            Txtdoctag.Text = dt.Rows[0]["DocTag"].ToString();
            txtLRNo.Text = dt.Rows[0]["LRNo"].ToString();
            txtcrdays.Text = dt.Rows[0]["Cr_Days"].ToString();
            txtjobNo.Text = dt.Rows[0]["JobNo"].ToString();
            txtstatus.Text = dt.Rows[0]["status"].ToString();
            txtdelivery.Text = dt.Rows[0]["Delivery"].ToString();
            txtcustomerName.Text = dt.Rows[0]["CustomerName"].ToString();
            txtMobileNo.Text = dt.Rows[0]["MobileNo"].ToString();
            txtAddress.Text = dt.Rows[0]["Address"].ToString();
            txtGstNo.Text = dt.Rows[0]["GstNo"].ToString();
            txtstatecode.Text = dt.Rows[0]["statecode"].ToString();
            ddlkintperson.SelectedItem.Text = dt.Rows[0]["KindAtt"].ToString();

            txtnarration.Text = dt.Rows[0]["Narration"].ToString();
            txtpono.Text = dt.Rows[0]["PONo"].ToString();
            // txtEmail.Text = dt.Rows[0]["Email"].ToString();
            txt_cgst9.Text = dt.Rows[0]["Cgst"].ToString();
            txt_sgst9.Text = dt.Rows[0]["Sgst"].ToString();
            txtigst.Text = dt.Rows[0]["Igst"].ToString();
            txt_grandTotal.Text = dt.Rows[0]["GrandTotal"].ToString();
            lbl_total_amt_Value.Text = dt.Rows[0]["TotalInWord"].ToString();
            string str = dt.Rows[0]["Term_condition1"].ToString();
            string str1 = dt.Rows[0]["TermCondition2"].ToString();
            string str2 = dt.Rows[0]["TermCondition3"].ToString();
            string str3 = dt.Rows[0]["TermCondition4"].ToString();
            string[] arrstr = str.ToString().Split('-');
            string[] arrstr1 = str1.ToString().Split('-');
            string[] arrstr2 = str2.ToString().Split('-');
            string[] arrstr3 = str3.ToString().Split('-');

            if (arrstr.Length > 0)
            {
                txt_term_1.Text = arrstr[0].ToString();
                txt_condition_1.Text = arrstr[1].ToString();
            }

            if (arrstr1.Length > 0)
            {
                txt_term_2.Text = arrstr1[0].ToString();
                txt_condition_2.Text = arrstr1[1].ToString();
            }

            if (arrstr2.Length > 0)
            {
                txt_term_3.Text = arrstr2[0].ToString();
                txt_condition_3.Text = arrstr2[1].ToString();
            }
            if (arrstr3.Length > 0)
            {
                txt_term_4.Text = arrstr3[0].ToString();
                txt_condition_4.Text = arrstr3[1].ToString();
            }

        }
        ChallanDetails();
        SqlDataAdapter Sda = new SqlDataAdapter("SELECT * FROM tblCHallanMail WHERE challanNo='" + txtchallanNo.Text + "'", con);
        DataTable Sdt = new DataTable();
        Sda.Fill(Sdt);

        //int count = 1;
        //if (Sdt.Rows.Count > 0)
        //{
        //    if (Dt_Mail.Columns.Count < 1)
        //    {
        //        ShowMAILRecord();
        //    }

        //    for (int i = 0; i < Sdt.Rows.Count; i++)
        //    {
        //        Dt_Mail.Rows.Add(count, Sdt.Rows[i]["EmailID"].ToString());
        //        count = count + 1;
        //    }
        //}
        Grd_MAIL.DataSource = Sdt;
        Grd_MAIL.DataBind();

    }
    protected void LoadData(string id)
    {
        DataTable dt = new DataTable();
        SqlDataAdapter sad = new SqlDataAdapter("select * from tblChallanHdr where ChallanNo='" + id + "'", con);
        sad.Fill(dt);
        if (dt.Rows.Count > 0)
        {
            txtchallanNo.Text = dt.Rows[0]["ChallanNo"].ToString();
            DateTime ffff1 = Convert.ToDateTime(dt.Rows[0]["ChallanDate"].ToString());
            txtchallanDate.Text = ffff1.ToString("yyyy-MM-dd");
            DateTime ffff2 = Convert.ToDateTime(dt.Rows[0]["PODate"].ToString());
            txtpodate.Text = ffff2.ToString("yyyy-MM-dd");
            DateTime ffff3 = Convert.ToDateTime(dt.Rows[0]["OrderDate"].ToString());
            txtorderDate.Text = ffff3.ToString("yyyy-MM-dd");
            DateTime ffff4 = Convert.ToDateTime(dt.Rows[0]["LRdate"].ToString());
            txtLRdate.Text = ffff3.ToString("yyyy-MM-dd");
            txtorderNo.Text = dt.Rows[0]["OrderNo"].ToString();
            Txtdoctag.Text = dt.Rows[0]["DocTag"].ToString();
            txtLRNo.Text = dt.Rows[0]["LRNo"].ToString();
            txtcrdays.Text = dt.Rows[0]["Cr_Days"].ToString();
            txtstatecode.Text = dt.Rows[0]["statecode"].ToString();
            txtRefrence.Text = dt.Rows[0]["Refrence"].ToString();

            txtdelivery.Text = dt.Rows[0]["Delivery"].ToString();
            txtcustomerName.Text = dt.Rows[0]["CustomerName"].ToString();
            txtMobileNo.Text = dt.Rows[0]["MobileNo"].ToString();
            txtAddress.Text = dt.Rows[0]["Address"].ToString();
            txtGstNo.Text = dt.Rows[0]["GstNo"].ToString();
            txtjobNo.Text = dt.Rows[0]["JobNo"].ToString();
            txtstatus.Text = dt.Rows[0]["status"].ToString();

            ddlkintperson.SelectedValue = dt.Rows[0]["KindAtt"].ToString();

            txtnarration.Text = dt.Rows[0]["Narration"].ToString();
            txtpono.Text = dt.Rows[0]["PONo"].ToString();
            //txtEmail.Text = dt.Rows[0]["Email"].ToString();
            txt_cgst9.Text = dt.Rows[0]["Cgst"].ToString();
            txt_sgst9.Text = dt.Rows[0]["Sgst"].ToString();
            txtigst.Text = dt.Rows[0]["Igst"].ToString();
            txt_grandTotal.Text = dt.Rows[0]["GrandTotal"].ToString();
            lbl_total_amt_Value.Text = dt.Rows[0]["TotalInWord"].ToString();
            string str = dt.Rows[0]["Term_condition1"].ToString();
            string str1 = dt.Rows[0]["TermCondition2"].ToString();
            string str2 = dt.Rows[0]["TermCondition3"].ToString();
            string str3 = dt.Rows[0]["TermCondition4"].ToString();
            string[] arrstr = str.ToString().Split('-');
            string[] arrstr1 = str1.ToString().Split('-');
            string[] arrstr2 = str2.ToString().Split('-');
            string[] arrstr3 = str3.ToString().Split('-');

            if (arrstr.Length > 0)
            {
                txt_term_1.Text = arrstr[0].ToString();
                txt_condition_1.Text = arrstr[1].ToString();
            }

            if (arrstr1.Length > 0)
            {
                txt_term_2.Text = arrstr1[0].ToString();
                txt_condition_2.Text = arrstr1[1].ToString();
            }

            if (arrstr2.Length > 0)
            {
                txt_term_3.Text = arrstr2[0].ToString();
                txt_condition_3.Text = arrstr2[1].ToString();
            }
            if (arrstr3.Length > 0)
            {
                txt_term_4.Text = arrstr3[0].ToString();
                txt_condition_4.Text = arrstr3[1].ToString();
            }

        }
        ChallanDetails();

        //SqlDataAdapter Sda = new SqlDataAdapter("SELECT * FROM tblCHallanMail WHERE challanNo='" + txtchallanNo.Text + "'", con);
        //DataTable Sdt = new DataTable();
        //Sda.Fill(Sdt);
        //Grd_MAIL.DataSource = Sdt;
        //Grd_MAIL.DataBind();

    }
    protected void ChallanDetails()
    {
        try
        {

            SqlDataAdapter Da = new SqlDataAdapter("SELECT * FROM tblChallanDtls WHERE ChallanNo='" + txtchallanNo.Text + "'", con);
            DataTable DTCOMP = new DataTable();
            Da.Fill(DTCOMP);



            int count = 1;
            if (DTCOMP.Rows.Count > 0)
            {
                if (Dt_Component.Columns.Count < 1)
                {
                    Show_Grid();
                }

                for (int i = 0; i < DTCOMP.Rows.Count; i++)
                {
                    //Dt_Component.Rows.Add(count, DTCOMP.Rows[i]["MateName"].ToString(), DTCOMP.Rows[i]["Description"].ToString(), DTCOMP.Rows[i]["printdescription"].ToString(), DTCOMP.Rows[i]["HSN_code"].ToString(), DTCOMP.Rows[i]["Tax"].ToString(), DTCOMP.Rows[i]["Qty"].ToString(), DTCOMP.Rows[i]["Units"].ToString(), DTCOMP.Rows[i]["Rate"].ToString(), DTCOMP.Rows[i]["Discount"].ToString(), DTCOMP.Rows[i]["Ftotal"].ToString());
                    Dt_Component.Rows.Add(count, DTCOMP.Rows[i]["JobNo"].ToString(), DTCOMP.Rows[i]["MateName"].ToString(), DTCOMP.Rows[i]["Description"].ToString(), DTCOMP.Rows[i]["printdescription"].ToString(), DTCOMP.Rows[i]["HSN_code"].ToString(), DTCOMP.Rows[i]["Tax"].ToString(), DTCOMP.Rows[i]["Qty"].ToString(), DTCOMP.Rows[i]["Units"].ToString(), DTCOMP.Rows[i]["Rate"].ToString(), DTCOMP.Rows[i]["Discount"].ToString(), DTCOMP.Rows[i]["Ftotal"].ToString());
                    count = count + 1;
                }
            }
            dgvProductDtl1.EmptyDataText = "No Data Found";
            dgvProductDtl1.DataSource = Dt_Component;
            dgvProductDtl1.DataBind();


        }
        catch (Exception)
        {

            throw;
        }
    }
    public string Decrypt(string cipherText)
    {
        string EncryptionKey = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ";
        cipherText = cipherText.Replace(" ", "+");
        byte[] cipherBytes = Convert.FromBase64String(cipherText);
        using (Aes encryptor = Aes.Create())
        {
            Rfc2898DeriveBytes pdb = new Rfc2898DeriveBytes(EncryptionKey, new byte[] {
            0x49, 0x76, 0x61, 0x6e, 0x20, 0x4d, 0x65, 0x64, 0x76, 0x65, 0x64, 0x65, 0x76
        });
            encryptor.Key = pdb.GetBytes(32);
            encryptor.IV = pdb.GetBytes(16);
            using (MemoryStream ms = new MemoryStream())
            {
                using (CryptoStream cs = new CryptoStream(ms, encryptor.CreateDecryptor(), CryptoStreamMode.Write))
                {
                    cs.Write(cipherBytes, 0, cipherBytes.Length);
                    cs.Close();
                }
                cipherText = Encoding.Unicode.GetString(ms.ToArray());
            }
        }
        return cipherText;
    }
    protected void AutogenerateChallan()
    {
        try
        {
            DateTime date = DateTime.Now;
            string date1 = date.ToString("yy");
            SqlDataAdapter ad = new SqlDataAdapter("SELECT max([Id]) as maxid FROM [tblChallanHdr]", con);
            DataTable dt = new DataTable();
            ad.Fill(dt);
            if (dt.Rows.Count > 0)
            {
                int maxid = dt.Rows[0]["maxid"].ToString() == "" ? 0 : Convert.ToInt32(dt.Rows[0]["maxid"].ToString());
                txtchallanNo.Text = "CLN-" + date1 + "-" + (maxid + 1).ToString();
            }
            else
            {
                txtchallanNo.Text = string.Empty;
            }
        }
        catch (Exception)
        {

            throw;
        }

    }
    protected void AutogeneratedDocTag()
    {
        try
        {
            DateTime date = DateTime.Now;
            string date1 = date.ToString("yy");
            SqlDataAdapter ad = new SqlDataAdapter("SELECT max([Id]) as maxid FROM [tblChallanHdr]", con);
            DataTable dt = new DataTable();
            ad.Fill(dt);
            if (dt.Rows.Count > 0)
            {
                int maxid = dt.Rows[0]["maxid"].ToString() == "" ? 0 : Convert.ToInt32(dt.Rows[0]["maxid"].ToString());
                Txtdoctag.Text = "Doc-" + date1 + "-" + (maxid + 1).ToString();
            }
            else
            {
                Txtdoctag.Text = string.Empty;
            }
        }
        catch (Exception)
        {

            throw;
        }

    }

    [System.Web.Script.Services.ScriptMethod()]
    [System.Web.Services.WebMethod]
    public static List<string> GetCustomerList(string prefixText, int count)
    {
        return AutoFillCustomerlist(prefixText);
    }

    public static List<string> AutoFillCustomerlist(string prefixText)
    {
        using (SqlConnection con = new SqlConnection())
        {
            con.ConnectionString = ConfigurationManager.ConnectionStrings["connectionString"].ConnectionString;

            using (SqlCommand com = new SqlCommand())
            {
              //  com.CommandText = "select DISTINCT CustomerName from tblTestingProduct where " + "CustomerName like @Search + '%' AND isdeleted='0' AND isCompleted='1'";
                com.CommandText = "select DISTINCT CustomerName from [tblCustomer] where " + "CustomerName like @Search + '%' AND isdeleted='0' ";

                com.Parameters.AddWithValue("@Search", prefixText);
                com.Connection = con;
                con.Open();
                List<string> CustomerName = new List<string>();
                using (SqlDataReader sdr = com.ExecuteReader())
                {
                    while (sdr.Read())
                    {
                        CustomerName.Add(sdr["CustomerName"].ToString());
                    }
                }
                con.Close();
                return CustomerName;
            }

        }
    }

    [System.Web.Script.Services.ScriptMethod()]
    [System.Web.Services.WebMethod]
    public static List<string> GetjobList(string prefixText, int count)
    {
        return AutoFilljoblist(prefixText);
    }

    public static List<string> AutoFilljoblist(string prefixText)
    {
        using (SqlConnection con = new SqlConnection())
        {
            con.ConnectionString = ConfigurationManager.ConnectionStrings["connectionString"].ConnectionString;

            using (SqlCommand com = new SqlCommand())
            {
                com.CommandText = "select DISTINCT JobNo from tblTestingProduct where " + "JobNo like @Search + '%' AND isdeleted='0' AND isCompleted='1'";

                com.Parameters.AddWithValue("@Search", prefixText);
                com.Connection = con;
                con.Open();
                List<string> JobNo = new List<string>();
                using (SqlDataReader sdr = com.ExecuteReader())
                {
                    while (sdr.Read())
                    {
                        JobNo.Add(sdr["JobNo"].ToString());
                    }
                }
                con.Close();
                return JobNo;
            }

        }
    }

    //protected void txtcustomerName_TextChanged(object sender, EventArgs e)
    //{
    //    DataTable dt = new DataTable();
    //    SqlDataAdapter sad = new SqlDataAdapter("select * from tblCustomer where CustomerName='" + txtcustomerName.Text + "'", con);
    //    sad.Fill(dt);
    //    if (dt.Rows.Count > 0)
    //    {
    //        txtAddress.Text = dt.Rows[0]["AddresLine1"].ToString();
    //        //txtAddress.Text = dt.Rows[0]["AddresLine2"].ToString();
    //        //txtAddress.Text = dt.Rows[0]["AddresLine3"].ToString();
    //        //txtEmail.Text = dt.Rows[0]["Email"].ToString();
    //        txtGstNo.Text = dt.Rows[0]["GSTNo"].ToString();
    //        txtMobileNo.Text = dt.Rows[0]["MobNo"].ToString();


    //    }
    //    DataTable dt1 = new DataTable();
    //    SqlDataAdapter sad1 = new SqlDataAdapter("select * from tblCustomerContactPerson where CustName='" + txtcustomerName.Text + "'", con);
    //    sad1.Fill(dt1);
    //    ddlkintperson.DataTextField = "ContactPerName";

    //    ddlkintperson.DataSource = dt1;
    //    ddlkintperson.DataBind();

    //}
    [System.Web.Script.Services.ScriptMethod()]
    [System.Web.Services.WebMethod]
    public static List<string> GetDescriptionList(string prefixText, int count)
    {
        return AutoFilldescrlist(prefixText);
    }

    public static List<string> AutoFilldescrlist(string prefixText)
    {

        using (SqlConnection con = new SqlConnection())
        {
            con.ConnectionString = ConfigurationManager.ConnectionStrings["connectionString"].ConnectionString;

            using (SqlCommand com = new SqlCommand())
            {
                com.CommandText = "select DISTINCT CompName from tblComponent where " + "CompName like @Search + '%' AND isdeleted='0'";

                com.Parameters.AddWithValue("@Search", prefixText);
                com.Connection = con;
                con.Open();
                List<string> CompName = new List<string>();
                using (SqlDataReader sdr = com.ExecuteReader())
                {
                    while (sdr.Read())
                    {
                        CompName.Add(sdr["CompName"].ToString());
                    }
                }
                con.Close();
                return CompName;
            }
        }
    }

    protected void txt_discription_Tbl_TextChanged(object sender, EventArgs e)
    {
        SqlDataAdapter Da = new SqlDataAdapter("SELECT * FROM tblComponent WHERE CompName='" + txt_discription_Tbl.Text + "'", con);
        DataTable Dt = new DataTable();
        Da.Fill(Dt);
        if (Dt.Rows.Count > 0)
        {
            //txt_Total_Tbl.Text = "0";
            txt_total_amount_Tbl.Text = "0";
            txt_discount_Tbl.Text = "0";

            txt_hsn_Tbl.Text = Dt.Rows[0]["HSN"].ToString();
            txt_rate_Tbl.Text = Dt.Rows[0]["Rate"].ToString();
            txt_unit_Tbl.Text = Dt.Rows[0]["Units"].ToString();
            txt_tax_Tbl.Text = Dt.Rows[0]["Tax"].ToString();
        }
        txtprintdesc.Text = txt_discription_Tbl.Text;

    }

    private void Table_Calculation()
    {
        decimal Qty;
        if (string.IsNullOrEmpty(txt_quntity_Tbl.Text))
        {
            Qty = 0;
        }
        else
        {
            var totalamt = Convert.ToDecimal(txt_quntity_Tbl.Text.Trim()) * Convert.ToDecimal(txt_rate_Tbl.Text.Trim());
            //txt_Total_Tbl.Text = totalamt.ToString();
            txt_total_amount_Tbl.Text = totalamt.ToString();

        }
        decimal TaxAmt;
        if (string.IsNullOrEmpty(txt_tax_Tbl.Text))
        {
            TaxAmt = 0;
        }
        else
        {

            decimal val1 = Convert.ToDecimal(txt_total_amount_Tbl.Text);
            decimal val2 = Convert.ToDecimal(txt_tax_Tbl.Text);

            TaxAmt = (val1 * val2 / 100);
        }

        //var TotalWithTax = Convert.ToDecimal(txt_total_amount_Tbl.Text) + (TaxAmt);
        var TotalWithTax = Convert.ToDecimal(txt_total_amount_Tbl.Text);
        txt_total_amount_Tbl.Text = TotalWithTax.ToString();

        decimal DiscountAmt;
        if (string.IsNullOrEmpty(txt_discount_Tbl.Text))
        {
            DiscountAmt = 0;
        }
        else
        {
            decimal val1 = Convert.ToDecimal(TotalWithTax);
            decimal val2 = Convert.ToDecimal(txt_discount_Tbl.Text);

            DiscountAmt = (val1 * val2 / 100);
        }
        var GrossAmt = Convert.ToDecimal(TotalWithTax) - (DiscountAmt);
        txt_total_amount_Tbl.Text = GrossAmt.ToString("##.00");

    }
    protected void txt_quntity_Tbl_TextChanged(object sender, EventArgs e)
    {
        Table_Calculation();
    }

    protected void txt_rate_Tbl_TextChanged(object sender, EventArgs e)
    {
        if (txt_quntity_Tbl.Text == "")
        {
            //ScriptManager.RegisterStartupScript(this, this.GetType(), "Alert", "alert('Please fill Quntity !!!');", true);
            txt_tax_Tbl.Text = "0";
            txt_discount_Tbl.Text = "0";
        }
        else
        {
            Table_Calculation();
        }
    }

    protected void txt_tax_Tbl_TextChanged(object sender, EventArgs e)
    {
        Table_Calculation();
    }

    protected void txt_discount_Tbl_TextChanged(object sender, EventArgs e)
    {
        Table_Calculation();
    }

    protected void btn_add_more_Tbl_Click(object sender, EventArgs e)
    {
        if (txt_discription_Tbl.Text == "" || txt_hsn_Tbl.Text == "" || txt_rate_Tbl.Text == "" || txt_quntity_Tbl.Text == "")
        {
            ScriptManager.RegisterStartupScript(this, this.GetType(), "Alert", "alert('Please fill Component Information  !!!');", true);
            //txt_quntity.Focus();
        }
        else
        {
            //dgvProductDtl1.Visible = false;
            //Show_Grid();
            Show_Grid1();

            decimal grnd_TOTAL;
            if (string.IsNullOrEmpty(txt_Subtotal.Text))
            {
                grnd_TOTAL = 0;

            }
            else
            {
                decimal val1 = Convert.ToDecimal(txt_Subtotal.Text);
                decimal val2 = Convert.ToDecimal(txt_cgst9.Text);
                decimal val3 = Convert.ToDecimal(txt_sgst9.Text);
                decimal val4 = Convert.ToDecimal(txtigst.Text);

                //grnd_TOTAL = (val1);

                txt_grandTotal.Text = Convert.ToString(val1 + val2 + val3 + val4);
            }
            //txt_grandTotal.Text = grnd_TOTAL.ToString("##.00");


            string isNegative = "";

            try
            {
                string number = txt_grandTotal.Text;

                number = Convert.ToDouble(number).ToString();

                if (number.Contains("-"))
                {
                    isNegative = "Minus ";
                    number = number.Substring(1, number.Length - 1);

                }
                else
                {
                    lbl_total_amt_Value.Text = isNegative + ConvertToWords(number);

                }
            }
            catch (Exception)
            {

                //throw;
            }
        }
        //decimal totaltax = 0;
        //foreach (GridViewRow g1 in dgvProductDtl.Rows)
        //{
        //    string lbltotaltax = (g1.FindControl("lbl_Tax") as Label).Text;
        //    totaltax += Convert.ToDecimal(lbltotaltax);
        //}
        //txt_cgst9.Text = (totaltax / 2).ToString();
        //txt_sgst9.Text = (totaltax / 2).ToString();


        // Coment Code on 07-08-23 
        //decimal totaltax = 0;
        //decimal Total11177 = 0, Qty = 0, rate111111 = 0, totalrateqty = 0;
        //foreach (GridViewRow g1 in dgvProductDtl.Rows)
        //{
        //    string lbltotaltax = (g1.FindControl("lbl_Tax") as Label).Text;
        //    string lblrate = (g1.FindControl("lbl_Rate") as Label).Text;
        //    string lblqty = (g1.FindControl("lbl_quntity_grd") as Label).Text;
        //    totaltax = Convert.ToDecimal(lbltotaltax);

        //    rate111111 = Convert.ToDecimal(lblrate);
        //    Qty = Convert.ToDecimal(lblqty);
        //    Total11177 = ((Qty * rate111111) * totaltax) / 100;
        //    totalrateqty += Total11177;
        //}
        //if (txtstatecode.Text == "27 MAHARASHTRA")
        //{
        //    txt_cgst9.Text = Convert.ToDecimal(totalrateqty / ).ToString("##.00");
        //    txt_sgst9.Text = Convert.ToDecimal(totalrateqty / 2).ToString("##.00");
        //    txtigst.Text = Convert.ToDecimal(00).ToString("##.00");
        //}
        //else
        //{
        //    txt_cgst9.Text = Convert.ToDecimal(00).ToString("##.00");
        //    txt_sgst9.Text = Convert.ToDecimal(00).ToString("##.00");
        //    txtigst.Text = Convert.ToDecimal(totalrateqty).ToString("##.00");
        //}
    }


    private void Show_Grid()
    {
        ViewState["RowNo"] = (int)ViewState["RowNo"] + 1;
        //DataTable Dt = new DataTable();
        DataTable Dt = (DataTable)ViewState["QuotationComp"];
        Dt.Rows.Add(ViewState["RowNo"], txt_discription_Tbl.Text.Trim(), txt_hsn_Tbl.Text, txt_tax_Tbl.Text,
            txt_quntity_Tbl.Text, txt_unit_Tbl.Text, txt_rate_Tbl.Text, txt_discount_Tbl.Text, txt_total_amount_Tbl.Text, txtprintdesc.Text);
        ViewState["QuotationComp"] = Dt;

        txt_discription_Tbl.Text = string.Empty;
        txt_hsn_Tbl.Text = string.Empty;
        txt_tax_Tbl.Text = string.Empty;
        txt_quntity_Tbl.Text = string.Empty;
        txt_unit_Tbl.Text = string.Empty;
        //txt_Total_Tbl.Text = string.Empty;
        txt_rate_Tbl.Text = string.Empty;
        txt_discount_Tbl.Text = string.Empty;
        txt_total_amount_Tbl.Text = string.Empty;
        txtprintdesc.Text = string.Empty;

        dgvProductDtl.DataSource = (DataTable)ViewState["QuotationComp"];
        dgvProductDtl.DataBind();
    }
    private static String ConvertToWords(String numb)
    {
        String val = "", wholeNo = numb, points = "", andStr = "", pointStr = "";
        String endStr = "Only";
        try
        {
            int decimalPlace = numb.IndexOf(".");
            if (decimalPlace > 0)
            {
                wholeNo = numb.Substring(0, decimalPlace);
                points = numb.Substring(decimalPlace + 1);
                if (Convert.ToInt32(points) > 0)
                {
                    andStr = "and";// just to separate whole numbers from points/cents  
                    endStr = "Paisa " + endStr;//Cents  
                    pointStr = ConvertDecimals(points);
                }
            }
            val = String.Format("{0} {1}{2} {3}", ConvertWholeNumber(wholeNo).Trim(), andStr, pointStr, endStr);
        }
        catch { }
        return val;
    }

    private static String ConvertDecimals(String number)
    {
        String cd = "", digit = "", engOne = "";
        for (int i = 0; i < number.Length; i++)
        {
            digit = number[i].ToString();
            if (digit.Equals("0"))
            {
                engOne = "Zero";
            }
            else
            {
                engOne = ones(digit);
            }
            cd += " " + engOne;
        }
        return cd;
    }
    private static String ones(String Number)
    {
        int _Number = Convert.ToInt32(Number);
        String name = "";
        switch (_Number)
        {

            case 1:
                name = "One";
                break;
            case 2:
                name = "Two";
                break;
            case 3:
                name = "Three";
                break;
            case 4:
                name = "Four";
                break;
            case 5:
                name = "Five";
                break;
            case 6:
                name = "Six";
                break;
            case 7:
                name = "Seven";
                break;
            case 8:
                name = "Eight";
                break;
            case 9:
                name = "Nine";
                break;
        }
        return name;
    }
    private static String tens(String Number)
    {
        int _Number = Convert.ToInt32(Number);
        String name = null;
        switch (_Number)
        {
            case 10:
                name = "Ten";
                break;
            case 11:
                name = "Eleven";
                break;
            case 12:
                name = "Twelve";
                break;
            case 13:
                name = "Thirteen";
                break;
            case 14:
                name = "Fourteen";
                break;
            case 15:
                name = "Fifteen";
                break;
            case 16:
                name = "Sixteen";
                break;
            case 17:
                name = "Seventeen";
                break;
            case 18:
                name = "Eighteen";
                break;
            case 19:
                name = "Nineteen";
                break;
            case 20:
                name = "Twenty";
                break;
            case 30:
                name = "Thirty";
                break;
            case 40:
                name = "Fourty";
                break;
            case 50:
                name = "Fifty";
                break;
            case 60:
                name = "Sixty";
                break;
            case 70:
                name = "Seventy";
                break;
            case 80:
                name = "Eighty";
                break;
            case 90:
                name = "Ninety";
                break;
            default:
                if (_Number > 0)
                {
                    name = tens(Number.Substring(0, 1) + "0") + " " + ones(Number.Substring(1));
                }
                break;
        }
        return name;
    }
    private static String ConvertWholeNumber(String Number)
    {
        string word = "";
        try
        {
            bool beginsZero = false;//tests for 0XX  
            bool isDone = false;//test if already translated  
            double dblAmt = (Convert.ToDouble(Number));
            //if ((dblAmt > 0) && number.StartsWith("0"))  
            if (dblAmt > 0)
            {//test for zero or digit zero in a nuemric  
                beginsZero = Number.StartsWith("0");

                int numDigits = Number.Length;
                int pos = 0;//store digit grouping  
                String place = "";//digit grouping name:hundres,thousand,etc...  
                switch (numDigits)
                {
                    case 1://ones' range  

                        word = ones(Number);
                        isDone = true;
                        break;
                    case 2://tens' range  
                        word = tens(Number);
                        isDone = true;
                        break;
                    case 3://hundreds' range  
                        pos = (numDigits % 3) + 1;
                        place = " Hundred ";
                        break;
                    case 4://thousands' range  
                    case 5:
                    case 6:
                        pos = (numDigits % 4) + 1;
                        place = " Thousand ";
                        break;
                    case 7://millions' range  
                    case 8:
                        pos = (numDigits % 6) + 1;
                        place = " Lac ";
                        break;
                    case 9:
                        pos = (numDigits % 8) + 1;
                        place = " Million ";
                        break;
                    case 10://Billions's range  
                    case 11:
                    case 12:

                        pos = (numDigits % 10) + 1;
                        place = " Billion ";
                        break;
                    //add extra case options for anything above Billion...  
                    default:
                        isDone = true;
                        break;
                }
                if (!isDone)
                {//if transalation is not done, continue...(Recursion comes in now!!)  
                    if (Number.Substring(0, pos) != "0" && Number.Substring(pos) != "0")
                    {
                        try
                        {
                            word = ConvertWholeNumber(Number.Substring(0, pos)) + place + ConvertWholeNumber(Number.Substring(pos));
                        }
                        catch { }
                    }
                    else
                    {
                        word = ConvertWholeNumber(Number.Substring(0, pos)) + ConvertWholeNumber(Number.Substring(pos));
                    }

                    //check for trailing zeros  
                    //if (beginsZero) word = " and " + word.Trim();  
                }
                //ignore digit grouping names  
                if (word.Trim().Equals(place.Trim())) word = "";
            }
        }
        catch { }
        return word.Trim();
    }

    protected void dgvProductDtl_RowEditing(object sender, GridViewEditEventArgs e)
    {
        dgvProductDtl.EditIndex = e.NewEditIndex;
        dgvProductDtl.DataSource = (DataTable)ViewState["QuotationComp"];
        dgvProductDtl.DataBind();
        ScriptManager.RegisterStartupScript(this, this.GetType(), "Success", "scrollToElement();", true);
    }

    protected void gv_update_Click(object sender, EventArgs e)
    {
        GridViewRow row = (sender as LinkButton).NamingContainer as GridViewRow;

        string Tax = ((TextBox)row.FindControl("txtTax")).Text;
        string Quntity = ((TextBox)row.FindControl("txtQuantity")).Text;
        string Rate = ((TextBox)row.FindControl("txtRate")).Text;
        string Discount = ((TextBox)row.FindControl("txt_Discount")).Text;
        string TotalAmount = ((Label)row.FindControl("lblTotalPrice")).Text;

        DataTable Dt = ViewState["QuotationComp"] as DataTable;

        Dt.Rows[row.RowIndex]["Tax"] = Tax;
        Dt.Rows[row.RowIndex]["Quantity"] = Quntity;
        Dt.Rows[row.RowIndex]["Rate"] = Rate;
        Dt.Rows[row.RowIndex]["Discount"] = Discount;
        Dt.Rows[row.RowIndex]["Total Amount"] = TotalAmount;

        Dt.AcceptChanges();

        ViewState["QuotationComp"] = Dt;
        dgvProductDtl.EditIndex = -1;

        dgvProductDtl.DataSource = (DataTable)ViewState["QuotationComp"];
        dgvProductDtl.DataBind();


        decimal grd_total;
        if (!string.IsNullOrEmpty(txt_total_amount_Tbl.Text))
        {
            grd_total = 0;
        }
        else
        {
            //decimal val1 = Convert.ToDecimal(txt_Subtotal.Text);
            //decimal val2 = Convert.ToDecimal(txt_cgst9.Text);
            //decimal val3 = Convert.ToDecimal(txt_sgst9.Text);

            /* decimal val5 = Convert.ToDecimal(txt_round_off.Text)*/
            ;

            decimal val1 = Convert.ToDecimal(txt_Subtotal.Text);
            decimal val2 = Convert.ToDecimal(txt_cgst9.Text);
            decimal val3 = Convert.ToDecimal(txt_sgst9.Text);

            txt_grandTotal.Text = Convert.ToString(val1 + val2 + val3);




            //grd_total = (val1);

            //var grd = grd_total - val5;
        }
        //txt_grandTotal.Text = grnd_TOTAL.ToString();


        decimal totaltax = 0;
        decimal Total11177 = 0, Qty = 0, rate111111 = 0, totalrateqty = 0;
        foreach (GridViewRow g1 in dgvProductDtl.Rows)
        {
            string lbltotaltax = (g1.FindControl("lbl_Tax") as Label).Text;
            string lblrate = (g1.FindControl("lbl_Rate") as Label).Text;
            string lblqty = (g1.FindControl("lbl_quntity_grd") as Label).Text;
            totaltax = Convert.ToDecimal(lbltotaltax);

            rate111111 = Convert.ToDecimal(lblrate);
            Qty = Convert.ToDecimal(lblqty);
            Total11177 = ((Qty * rate111111) * totaltax) / 100;
            totalrateqty += Total11177;
        }
        if (txtstatecode.Text == "27 MAHARASHTRA")
        {
            txt_cgst9.Text = Convert.ToDecimal(totalrateqty / 2).ToString("##.00");
            txt_sgst9.Text = Convert.ToDecimal(totalrateqty / 2).ToString("##.00");
            txtigst.Text = Convert.ToDecimal(00).ToString("##.00");
        }
        else
        {
            txt_cgst9.Text = Convert.ToDecimal(00).ToString("##.00");
            txt_sgst9.Text = Convert.ToDecimal(00).ToString("##.00");
            txtigst.Text = Convert.ToDecimal(totalrateqty).ToString("##.00");
        }
        ScriptManager.RegisterStartupScript(this, this.GetType(), "Success", "scrollToElement();", true);
    }
    protected void txtQuantity_TextChanged(object sender, EventArgs e)
    {
        GridViewRow row = (sender as TextBox).NamingContainer as GridViewRow;
        Calculations(row);
    }
    public void Calculations(GridViewRow row)
    {
        TextBox Rate = (TextBox)row.FindControl("txtRate");
        TextBox Qty = (TextBox)row.FindControl("txtQuantity");
        Label Total = (Label)row.FindControl("txtTotal");
        TextBox Tax_per = (TextBox)row.FindControl("txtTax");
        TextBox Disc_Per = (TextBox)row.FindControl("txt_Discount");
        Label GrossTotal = (Label)row.FindControl("lblTotalPrice");
        var total = Convert.ToDecimal(Rate.Text) * Convert.ToDecimal(Qty.Text);
        //Total.Text = string.Format("{0:0.00}", total);


        decimal tax_amt;
        if (string.IsNullOrEmpty(Tax_per.Text))
        {
            tax_amt = 0;
        }
        else
        {
            tax_amt = Convert.ToDecimal(total.ToString()) * Convert.ToDecimal(Tax_per.Text) / 100;
        }

        //var totalWithTax = Convert.ToDecimal(total.ToString()) + Convert.ToDecimal(tax_amt.ToString());
        var totalWithTax = Convert.ToDecimal(total.ToString());
        decimal disc_amt;
        if (string.IsNullOrEmpty(Disc_Per.Text))
        {
            disc_amt = 0;
        }
        else
        {
            disc_amt = Convert.ToDecimal(totalWithTax.ToString()) * Convert.ToDecimal(Disc_Per.Text) / 100;
        }

        var Grossamt = Convert.ToDecimal(totalWithTax.ToString()) - Convert.ToDecimal(disc_amt.ToString());
        GrossTotal.Text = string.Format("{0:0.00}", Grossamt);

        ScriptManager.RegisterStartupScript(this, this.GetType(), "Success", "scrollToElement();", true);


    }
    protected void txtTax_TextChanged(object sender, EventArgs e)
    {
        GridViewRow row = (sender as TextBox).NamingContainer as GridViewRow;
        Calculations(row);
        decimal totaltax = 0;
        //foreach (GridViewRow g1 in dgvProductDtl.Rows)
        //{
        //    string lbltotaltax = (g1.FindControl("lbl_Tax") as Label).Text;
        //    totaltax += Convert.ToDecimal(lbltotaltax);
        //}
        //txt_cgst9.Text = (totaltax / 2).ToString();
        //txt_sgst9.Text = (totaltax / 2).ToString();
    }
    protected void txt_Discount_TextChanged(object sender, EventArgs e)
    {
        GridViewRow row = (sender as TextBox).NamingContainer as GridViewRow;
        Calculations(row);
    }
    decimal Total;
    protected void dgvProductDtl_RowDataBound(object sender, GridViewRowEventArgs e)
    {
        if (e.Row.RowType == DataControlRowType.DataRow)
        {
            //cast the current row to a datarowview
            DataRowView row = e.Row.DataItem as DataRowView;

            Total += Convert.ToDecimal(DataBinder.Eval(e.Row.DataItem, "Total Amount"));
            txt_Subtotal.Text = Total.ToString("##.00");
        }


        decimal totaltax = 0;
        foreach (GridViewRow g1 in dgvProductDtl.Rows)
        {
            // string lbltotaltax = (g1.FindControl("txtTax") as Label).Text;
            // totaltax += Convert.ToDecimal(lbltotaltax);
        }
        txt_cgst9.Text = (totaltax / 2).ToString();
        txt_sgst9.Text = (totaltax / 2).ToString();

        //txt_cgst9.Text = (totaltax \ 2);

        decimal Cgst_Total_Amt;
        if (string.IsNullOrEmpty(txt_Subtotal.Text))
        {
            Cgst_Total_Amt = 0;

        }
        else
        {
            decimal val1 = Convert.ToDecimal(txt_Subtotal.Text);

            Cgst_Total_Amt = (val1 * 9 / 100);
        }
        txt_cgst9.Text = Cgst_Total_Amt.ToString("##.00");

        decimal Sgst_Toatl_Amt;
        if (string.IsNullOrEmpty(txt_Subtotal.Text))
        {
            Sgst_Toatl_Amt = 0;

        }
        else
        {
            decimal val1 = Convert.ToDecimal(txt_Subtotal.Text);

            Sgst_Toatl_Amt = (val1 * 9 / 100);
        }
        txt_sgst9.Text = Sgst_Toatl_Amt.ToString("##.00");

        decimal grnd_TOTAL;
        if (string.IsNullOrEmpty(txt_Subtotal.Text))
        {
            grnd_TOTAL = 0;
        }
        else
        {
            decimal val1 = Convert.ToDecimal(txt_Subtotal.Text);
            decimal val2 = Convert.ToDecimal(txt_cgst9.Text);
            decimal val3 = Convert.ToDecimal(txt_sgst9.Text);

            grnd_TOTAL = (val1 + val2 + val3);
        }
        txt_grandTotal.Text = grnd_TOTAL.ToString("##.00");

        string isNegative = "";

        try
        {
            string number = txt_grandTotal.Text;

            number = Convert.ToDouble(number).ToString();

            if (number.Contains("-"))
            {
                isNegative = "Minus ";
                number = number.Substring(1, number.Length - 1);

            }
            else
            {
                lbl_total_amt_Value.Text = isNegative + ConvertToWords(number);

            }
        }
        catch (Exception)
        {

            //throw;
        }

    }
    protected void btnSubmit_Click(object sender, EventArgs e)
    {
        if (btnSubmit.Text == "Submit")
        {
            if (ChkSendQuotation.Checked == true)
            {
                SaveRecord();
                Send_Mail();
                //foreach (GridViewRow g1 in Grd_MAIL.Rows)
                //{
                //    string MAIL = (g1.FindControl("lblmultMail") as Label).Text;
                //    bool chkmail = (g1.FindControl("chkmail") as CheckBox).Checked;

                //    if (chkmail == false)
                //    {
                //       // ScriptManager.RegisterStartupScript(this, GetType(), "showalert", "alert('Select Atleast One Mail_ID');", true);
                //        //ClientScript.RegisterStartupScript(this.GetType(), "alert", "HideLabe('Select Atleast One Mail_ID');", true);
                //    }
                //    else
                //    {

                //        string ChallanNo = ToString();
                //        Send_Mail();
                //    }
                //}
                //Checmail();
                //SaveRecord();
                //string ChallanNo = ToString();
                //Send_Mail();
            }
            else
            {
                SaveRecord();
            }
        }

        if (btnSubmit.Text == "Update")
        {
            if (ChkSendQuotation.Checked == true)
            {
                SaveRecord();
                Send_Mail();
                //foreach (GridViewRow g1 in Grd_MAIL.Rows)
                //{
                //    string MAIL = (g1.FindControl("lblmultMail") as Label).Text;
                //    bool chkmail = (g1.FindControl("chkmail") as CheckBox).Checked;

                //    if (chkmail == false)
                //    {
                //      //  ScriptManager.RegisterStartupScript(this, GetType(), "showalert", "alert('Select Atleast One Mail_ID');", true);
                //        //ClientScript.RegisterStartupScript(this.GetType(), "alert", "HideLabe('Select Atleast One Mail_ID');", true);
                //    }
                //    else
                //    {
                        
                //        string ChallanNo = ToString();
                //        Send_Mail();
                //    }
                //}
                //Checmail();
                //SaveRecord();
                //string ChallanNo = ToString();
                //Send_Mail();
            }
            else
            {
                SaveRecord();
            }
        }
    }

    protected void SaveRecord()
    {
        string createdby = Session["adminname"].ToString();
        try
        {
            if (btnSubmit.Text == "Submit")
            {
                DateTime Date = DateTime.Now;
                SqlCommand cmd = new SqlCommand("SP_ChallanHdr", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@ChallanNo", txtchallanNo.Text);
                cmd.Parameters.AddWithValue("@ChallanDate", txtchallanDate.Text);
                cmd.Parameters.AddWithValue("@DocTag", Txtdoctag.Text);
                cmd.Parameters.AddWithValue("@Cr_Days", txtcrdays.Text);
                cmd.Parameters.AddWithValue("@OrderNo", txtorderNo.Text);
                cmd.Parameters.AddWithValue("@LRNo", txtLRNo.Text);
                cmd.Parameters.AddWithValue("@PONo", txtpono.Text);
                cmd.Parameters.AddWithValue("@PODate", txtpodate.Text);
                cmd.Parameters.AddWithValue("@OrderDate", txtorderDate.Text);
                cmd.Parameters.AddWithValue("@LRdate", txtLRdate.Text);
                cmd.Parameters.AddWithValue("@status", txtstatus.Text);
                cmd.Parameters.AddWithValue("@Type", ddltype.SelectedItem.Text);
                cmd.Parameters.AddWithValue("@CustomerName", txtcustomerName.Text);
                cmd.Parameters.AddWithValue("@Address", txtAddress.Text);
                cmd.Parameters.AddWithValue("@Refrence", txtRefrence.Text);
                cmd.Parameters.AddWithValue("@MobileNo", txtMobileNo.Text);
               // cmd.Parameters.AddWithValue("@KindAtt", ddlkintperson.Text);

                if (ddlkintperson.Text == "")
                {
                    cmd.Parameters.AddWithValue("@KindAtt", "NA");
                }
                else
                {
                    cmd.Parameters.AddWithValue("@KindAtt", ddlkintperson.Text);
                }

                cmd.Parameters.AddWithValue("@Narration", txtnarration.Text);
                cmd.Parameters.AddWithValue("@GstNo", txtGstNo.Text);
                cmd.Parameters.AddWithValue("@statecode", txtstatecode.Text);
                //cmd.Parameters.AddWithValue("@Email", txtEmail.Text);
                cmd.Parameters.AddWithValue("@Delivery", txtdelivery.Text);
                cmd.Parameters.AddWithValue("@Cgst", txt_cgst9.Text);
                cmd.Parameters.AddWithValue("@Sgst", txt_sgst9.Text);
                cmd.Parameters.AddWithValue("@Igst", txtigst.Text);
                cmd.Parameters.AddWithValue("@TotalInWord", lbl_total_amt_Value.Text);
                cmd.Parameters.AddWithValue("@GrandTotal", txt_grandTotal.Text);
                cmd.Parameters.AddWithValue("@isdeleted", '0');
                cmd.Parameters.AddWithValue("@CreatedBy", createdby);
                cmd.Parameters.AddWithValue("@Createddate", Date);
                //cmd.Parameters.AddWithValue("@JobNo", txtjobNo.Text);
                //cmd.Parameters.AddWithValue("@JobNo", txt_InvoiceNo.Text); /*Beacuse of change Job No as a InvoiceNo*/
              //  cmd.Parameters.AddWithValue("@InvoiceDate", txtinvoicedate.Text);
                cmd.Parameters.AddWithValue("@Term_condition1", txt_term_1.Text + "-" + txt_condition_1.Text);
                cmd.Parameters.AddWithValue("@TermCondition2", txt_term_2.Text + "-" + txt_condition_2.Text);
                cmd.Parameters.AddWithValue("@TermCondition3", txt_term_3.Text + "-" + txt_condition_3.Text);
                cmd.Parameters.AddWithValue("@TermCondition4", txt_term_4.Text + "-" + txt_condition_4.Text);
                cmd.Parameters.AddWithValue("@Action", "Insert");
                con.Open();
                cmd.ExecuteNonQuery();
                con.Close();

                foreach (GridViewRow grd1 in dgvProductDtl1.Rows)
                {
                    string JobNO = (grd1.FindControl("lblJob") as Label).Text;
                    string Product = (grd1.FindControl("lblproduct") as Label).Text;
                    string Description_grd = (grd1.FindControl("lbl_Description") as Label).Text;
                    string HSN_grd = (grd1.FindControl("lblHSN_SAC") as Label).Text;
                    string Rate_grd = (grd1.FindControl("lbl_Rate") as Label).Text;
                    string total_grd = "0";
                    string Qty_grd = (grd1.FindControl("lbl_quntity_grd") as Label).Text;
                    string unit_grd = (grd1.FindControl("lblUnit") as Label).Text;
                    string TaxPer_grd = (grd1.FindControl("lbl_Tax") as Label).Text;
                    string DiscPer_grd = (grd1.FindControl("lbl_Discount") as Label).Text;
                    string Total_grd = (grd1.FindControl("lblTotalPrice") as Label).Text;
                    //string printdescription = (grd1.FindControl("lblprintDescription") as Label).Text;
                    string printdescription = (grd1.FindControl("Lblprintdescription_grd") as Label).Text;

                    SqlCommand cmd1 = new SqlCommand("SP_ChallanDtls", con);
                    cmd1.CommandType = CommandType.StoredProcedure;
                    cmd1.Parameters.AddWithValue("@ChallanNo", txtchallanNo.Text);
                    cmd1.Parameters.AddWithValue("@Description", Description_grd);
                    cmd1.Parameters.AddWithValue("@HSN_code", HSN_grd);
                    cmd1.Parameters.AddWithValue("@Qty", Qty_grd);

                    cmd1.Parameters.AddWithValue("@Rate", Rate_grd);
                    cmd1.Parameters.AddWithValue("@Units", unit_grd);
                    cmd1.Parameters.AddWithValue("@Total", total_grd);
                    cmd1.Parameters.AddWithValue("@Tax", TaxPer_grd);
                    cmd1.Parameters.AddWithValue("@Discount", DiscPer_grd);
                    cmd1.Parameters.AddWithValue("@Ftotal", Total_grd);
                    cmd1.Parameters.AddWithValue("@PrintDescription", printdescription);
                    cmd1.Parameters.AddWithValue("@Product", Product);
                   // cmd1.Parameters.AddWithValue("@Invoiceno", txt_InvoiceNo.Text);
                    cmd1.Parameters.AddWithValue("@JobNo", JobNO);
                   // cmd1.Parameters.AddWithValue("@Invoicedate", txtinvoicedate.Text);
                    cmd1.Parameters.AddWithValue("@Action", "Insert");
                    con.Open();
                    cmd1.ExecuteNonQuery();
                    con.Close();
                }

                foreach (GridViewRow g1 in Grd_MAIL.Rows)
                {
                    string MAIL = (g1.FindControl("lblmultMail") as Label).Text;
                    bool chkmail = (g1.FindControl("chkmail") as CheckBox).Checked;
                    con.Open();
                    SqlCommand cmdtable = new SqlCommand("insert into tblCHallanMail(challanNo,Email,chkmail) values(@challanNo,@Email,@chkmail)", con);
                    cmdtable.Parameters.AddWithValue("@challanNo", txtchallanNo.Text);
                    cmdtable.Parameters.AddWithValue("@Email", MAIL);
                    cmdtable.Parameters.AddWithValue("@chkmail", chkmail);
                    //cmdtable.Parameters.AddWithValue("@CreatedBy", createdby);
                    //cmdtable.Parameters.AddWithValue("@CreatedOn", Date);
                    cmdtable.ExecuteNonQuery();
                    con.Close();
                }
                ClientScript.RegisterStartupScript(this.GetType(), "alert", "HideLabe('Data Saved Sucessfully');", true);
                // Response.Redirect("DeliveryChallanList.aspx");
            }
            else if (btnSubmit.Text == "Update")
            {
                DateTime Date = DateTime.Now;
                SqlCommand cmd = new SqlCommand("SP_ChallanHdr", con);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.AddWithValue("@ChallanNo", txtchallanNo.Text);
                cmd.Parameters.AddWithValue("@ChallanDate", txtchallanDate.Text);
                cmd.Parameters.AddWithValue("@DocTag", Txtdoctag.Text);
                cmd.Parameters.AddWithValue("@Cr_Days", txtcrdays.Text);
                cmd.Parameters.AddWithValue("@OrderNo", txtorderNo.Text);
                cmd.Parameters.AddWithValue("@LRNo", txtLRNo.Text);
                cmd.Parameters.AddWithValue("@PONo", txtpono.Text);
                cmd.Parameters.AddWithValue("@PODate", txtpodate.Text);
                cmd.Parameters.AddWithValue("@OrderDate", txtorderDate.Text);
                cmd.Parameters.AddWithValue("@LRdate", txtLRdate.Text);
                cmd.Parameters.AddWithValue("@isdeleted", '0');
                cmd.Parameters.AddWithValue("@CustomerName", txtcustomerName.Text);
                cmd.Parameters.AddWithValue("@Address", txtAddress.Text);
                cmd.Parameters.AddWithValue("@MobileNo", txtMobileNo.Text);
                cmd.Parameters.AddWithValue("@KindAtt", ddlkintperson.SelectedItem.Text);
                cmd.Parameters.AddWithValue("@Narration", txtnarration.Text);
                cmd.Parameters.AddWithValue("@GstNo", txtGstNo.Text);
                cmd.Parameters.AddWithValue("@statecode", txtstatecode.Text);
                cmd.Parameters.AddWithValue("@Refrence", txtRefrence.Text);
                cmd.Parameters.AddWithValue("@JobNo", txtjobNo.Text);
                cmd.Parameters.AddWithValue("@status", txtstatus.Text);
                cmd.Parameters.AddWithValue("@Type", ddltype.SelectedItem.Text);
                cmd.Parameters.AddWithValue("@Delivery", txtdelivery.Text);
                cmd.Parameters.AddWithValue("@Cgst", txt_cgst9.Text);
                cmd.Parameters.AddWithValue("@Sgst", txt_sgst9.Text);
                cmd.Parameters.AddWithValue("@Igst", txtigst.Text);
                cmd.Parameters.AddWithValue("@TotalInWord", lbl_total_amt_Value.Text);
                cmd.Parameters.AddWithValue("@GrandTotal", txt_grandTotal.Text);
                //cmd.Parameters.AddWithValue("@InvoiceDate", txtinvoicedate.Text);
                cmd.Parameters.AddWithValue("@UpdateBy", createdby);
                cmd.Parameters.AddWithValue("@UpdateDate", Date);

                cmd.Parameters.AddWithValue("@Term_condition1", txt_term_1.Text + "-" + txt_condition_1.Text);
                cmd.Parameters.AddWithValue("@TermCondition2", txt_term_2.Text + "-" + txt_condition_2.Text);
                cmd.Parameters.AddWithValue("@TermCondition3", txt_term_3.Text + "-" + txt_condition_3.Text);
                cmd.Parameters.AddWithValue("@TermCondition4", txt_term_4.Text + "-" + txt_condition_4.Text);
                cmd.Parameters.AddWithValue("@Action", "Update");
                con.Open();
                cmd.ExecuteNonQuery();
                con.Close();

                DataTable Dt = new DataTable();
                SqlDataAdapter sad = new SqlDataAdapter(" select * from tblChallanDtls where ChallanNo='" + txtchallanNo.Text + "'", con);
                sad.Fill(Dt);
                if (Dt.Rows.Count == dgvProductDtl1.Rows.Count)
                {
                    foreach (GridViewRow grd1 in dgvProductDtl1.Rows)
                    {
                        string JobNO = (grd1.FindControl("lblJob") as Label).Text;
                        string Product = (grd1.FindControl("lblproduct") as Label).Text;
                        string Description_grd = (grd1.FindControl("lbl_Description") as Label).Text;
                        string HSN_grd = (grd1.FindControl("lblHSN_SAC") as Label).Text;
                        string Rate_grd = (grd1.FindControl("lbl_Rate") as Label).Text;
                        string total_grd = "0";
                        //string total_grd = (grd1.FindControl("txtTotal") as Label).Text;
                        string Qty_grd = (grd1.FindControl("lbl_quntity_grd") as Label).Text;
                        string unit_grd = (grd1.FindControl("lblUnit") as Label).Text;
                        string TaxPer_grd = (grd1.FindControl("lbl_Tax") as Label).Text;
                        string DiscPer_grd = (grd1.FindControl("lbl_Discount") as Label).Text;
                        string Total_grd = (grd1.FindControl("lblTotalPrice") as Label).Text;
                        //string printdescription = (grd1.FindControl("lblprintDescription") as Label).Text;
                        string printdescription = (grd1.FindControl("Lblprintdescription_grd") as Label).Text;

                        SqlCommand cmd1 = new SqlCommand("SP_ChallanDtls", con);
                        cmd1.CommandType = CommandType.StoredProcedure;
                        cmd1.Parameters.AddWithValue("@ChallanNo", txtchallanNo.Text);
                        cmd1.Parameters.AddWithValue("@Description", Description_grd);
                        cmd1.Parameters.AddWithValue("@HSN_code", HSN_grd);
                        cmd1.Parameters.AddWithValue("@Qty", Qty_grd);

                        cmd1.Parameters.AddWithValue("@Rate", Rate_grd);
                        cmd1.Parameters.AddWithValue("@Units", unit_grd);
                        cmd1.Parameters.AddWithValue("@Total", total_grd);
                        cmd1.Parameters.AddWithValue("@Tax", TaxPer_grd);
                        cmd1.Parameters.AddWithValue("@Discount", DiscPer_grd);
                        cmd1.Parameters.AddWithValue("@Ftotal", Total_grd);
                        cmd1.Parameters.AddWithValue("@PrintDescription", printdescription);
                        cmd1.Parameters.AddWithValue("@Product", Product);
                        cmd1.Parameters.AddWithValue("@Action", "Update");
                        con.Open();
                        cmd1.ExecuteNonQuery();
                        con.Close();
                    }
                }
                else
                {
                    SqlCommand cmddelete = new SqlCommand("DELETE FROM tblChallanDtls WHERE ChallanNo=@ChallanNo", con);
                    cmddelete.Parameters.AddWithValue("@ChallanNo", txtchallanNo.Text);
                    con.Open();
                    cmddelete.ExecuteNonQuery();
                    con.Close();

                    foreach (GridViewRow grd1 in dgvProductDtl1.Rows)
                    {
                        string JobNO = (grd1.FindControl("lblJob") as Label).Text;
                        string Product = (grd1.FindControl("lblproduct") as Label).Text;
                        string Description_grd = (grd1.FindControl("lbl_Description") as Label).Text;
                        string HSN_grd = (grd1.FindControl("lblHSN_SAC") as Label).Text;
                        string Rate_grd = (grd1.FindControl("lbl_Rate") as Label).Text;
                        //string total_grd = (grd1.FindControl("txtTotal") as Label).Text;
                        string total_grd = "0";
                        string Qty_grd = (grd1.FindControl("lbl_quntity_grd") as Label).Text;
                        string unit_grd = (grd1.FindControl("lblUnit") as Label).Text;
                        string TaxPer_grd = (grd1.FindControl("lbl_Tax") as Label).Text;
                        string DiscPer_grd = (grd1.FindControl("lbl_Discount") as Label).Text;
                        string Total_grd = (grd1.FindControl("lblTotalPrice") as Label).Text;
                        //string printdescription = (grd1.FindControl("lblprintDescription") as Label).Text;
                        string printdescription = (grd1.FindControl("Lblprintdescription_grd") as Label).Text;


                        SqlCommand cmd1 = new SqlCommand("SP_ChallanDtls", con);
                        cmd1.CommandType = CommandType.StoredProcedure;
                        cmd1.Parameters.AddWithValue("@ChallanNo", txtchallanNo.Text);
                        cmd1.Parameters.AddWithValue("@Description", Description_grd);
                        cmd1.Parameters.AddWithValue("@HSN_code", HSN_grd);
                        cmd1.Parameters.AddWithValue("@Qty", Qty_grd);
                        cmd1.Parameters.AddWithValue("@Rate", Rate_grd);
                        cmd1.Parameters.AddWithValue("@Units", unit_grd);
                        cmd1.Parameters.AddWithValue("@Total", total_grd);
                        cmd1.Parameters.AddWithValue("@Tax", TaxPer_grd);
                        cmd1.Parameters.AddWithValue("@Discount", DiscPer_grd);
                        cmd1.Parameters.AddWithValue("@Ftotal", Total_grd);
                        cmd1.Parameters.AddWithValue("@PrintDescription", printdescription);
                        cmd1.Parameters.AddWithValue("@Product", Product);
                       // cmd1.Parameters.AddWithValue("@InvoiceNo", txt_InvoiceNo.Text);
                        cmd1.Parameters.AddWithValue("@JobNo", JobNO);
                        cmd1.Parameters.AddWithValue("@Action", "Insert");

                        con.Open();
                        cmd1.ExecuteNonQuery();
                        con.Close();
                    }
                }

                SqlDataAdapter Sda = new SqlDataAdapter("SELECT * FROM tblCHallanMail WHERE challanNo='" + txtchallanNo.Text + "'", con);
                DataTable DTMAIL = new DataTable();
                Sda.Fill(DTMAIL);
                //if (DTMAIL.Rows.Count == Grd_MAIL.Rows.Count)
                //{
                foreach (GridViewRow g1 in Grd_MAIL.Rows)
                {
                    string MAIL = (g1.FindControl("lblmultMail") as Label).Text;
                    bool chkmail = (g1.FindControl("chkmail") as CheckBox).Checked;
                    con.Open();
                    SqlCommand cmdtable = new SqlCommand("UPDATE tblCHallanMail SET Email=@Email,chkmail=@chkmail WHERE challanNo=@challanNo AND Email=@Email", con);
                    cmdtable.Parameters.AddWithValue("@challanNo", txtchallanNo.Text);
                    cmdtable.Parameters.AddWithValue("@Email", MAIL);
                    cmdtable.Parameters.AddWithValue("@chkmail", chkmail);
                    //cmdtable.Parameters.AddWithValue("@UpdatedBy", createdby);
                    //cmdtable.Parameters.AddWithValue("@UpdatedOn", Date);
                    cmdtable.ExecuteNonQuery();
                    con.Close();
                }

                //}
                //else
                //{
                //    SqlCommand cmddelete = new SqlCommand("DELETE FROM tblCHallanMail WHERE challanNo=@challanNo", con);
                //    cmddelete.Parameters.AddWithValue("@challanNo", txtchallanNo.Text);
                //    con.Open();
                //    cmddelete.ExecuteNonQuery();
                //    con.Close();
                //    foreach (GridViewRow g1 in Grd_MAIL.Rows)
                //    {
                //        string MAIL = (g1.FindControl("lblmultMail") as Label).Text;

                //        con.Open();
                //        SqlCommand cmdtable = new SqlCommand("insert into tblCHallanMail(challanNo,EmailID) values(@challanNo,@EmailID)", con);
                //        cmdtable.Parameters.AddWithValue("@challanNo", txtchallanNo.Text);
                //        cmdtable.Parameters.AddWithValue("@EmailID", MAIL);
                //        //cmdtable.Parameters.AddWithValue("@CreatedBy", createdby);
                //        //cmdtable.Parameters.AddWithValue("@CreatedOn", Date);
                //        cmdtable.ExecuteNonQuery();
                //        con.Close();
                //    }
                //}
                ClientScript.RegisterStartupScript(this.GetType(), "alert", "HideLabe('Data Updated Sucessfully');", true);
                //Response.Redirect("DeliveryChallanList.aspx");
            }
        }
        catch (Exception ex)
        {

            throw ex;
        }
    }
    protected void btnCancel_Click(object sender, EventArgs e)
    {
        if (Request.QueryString["Id"] != null)
        {
            Response.Redirect("DeliveryChallanReport.aspx");
        }
        else
        {
            Response.Redirect("DeliveryChallanList.aspx");
        }

    }

    protected void gv_cancel_Click(object sender, EventArgs e)
    {
        GridViewRow row = (sender as LinkButton).NamingContainer as GridViewRow;

        string Tax = ((TextBox)row.FindControl("txtTax")).Text;
        string Quntity = ((TextBox)row.FindControl("txtQuantity")).Text;
        string Rate = ((TextBox)row.FindControl("txtRate")).Text;
        string Discount = ((TextBox)row.FindControl("txt_Discount")).Text;
        string TotalAmount = ((Label)row.FindControl("lblTotalPrice")).Text;

        DataTable Dt = ViewState["QuotationComp"] as DataTable;
        dgvProductDtl.EditIndex = -1;
        //Show_Grid();
        //gvPurchaseRecord.DataBind();
        ViewState["QuotationComp"] = Dt;
        dgvProductDtl.EditIndex = -1;

        dgvProductDtl.DataSource = (DataTable)ViewState["QuotationComp"];
        dgvProductDtl.DataBind();
        ScriptManager.RegisterStartupScript(this, this.GetType(), "Success", "scrollToElement();", true);
    }

    protected void Send_Mail()
    {
        string strMessage = "Hello " + txtcustomerName.Text.Trim() + "<br/>" +


                        "Greetings From " + "<strong>ENDEAVOUR AUTOMATION<strong>" + "<br/>" +
                        "We sent you an Delivery Challan Invoice." + txtchallanNo.Text.Trim() + "/" + txtchallanDate.Text.Trim() + ".pdf" + "<br/>" +

                         "We Look Foward to Conducting Future Business with you." + "<br/>" +

                        "Kind Regards," + "<br/>" +
                        "<strong>ENDEAVOUR AUTOMATION<strong>";
        string pdfname = "DChallan - " + txtchallanNo.Text.Trim() + "/" + txtchallanDate.Text.Trim() + ".pdf";

        MailMessage message = new MailMessage();
        //MailMessage msgendeaour = new MailMessage();
        //MailMessage msgenaccount = new MailMessage();
        //msgendeaour.To.Add("erp@weblinkservices.net");
        //msgenaccount.To.Add("erp@weblinkservices.net");
        foreach (GridViewRow g1 in Grd_MAIL.Rows)
        {
            string MAIL = (g1.FindControl("lblmultMail") as Label).Text;
            bool chkmail = (g1.FindControl("chkmail") as CheckBox).Checked;
            if (chkmail == true)
            {
                message.To.Add(MAIL);// Email-ID of Receiver  
            }
        }
        // message.To.Add(TXtMailtbl.Text);// Email-ID of Receiver  
        message.Subject = "Delivery Challan Invoice";// Subject of Email  
        message.Body = strMessage;
        //msgendeaour.Subject = "Delivery Challan Invoice";// Subject of Email  
        //msgendeaour.Body = strMessage;
        //msgenaccount.Subject = "Delivery Challan Invoice";// Subject of Email  
        //msgenaccount.Body = strMessage;
        //message.From = new System.Net.Mail.MailAddress("info@endeavours.in");// Email-ID of Sender  
        message.From = new MailAddress("enquiry@weblinkservices.net", "info@endeavours.in");
        //message.From = new System.Net.Mail.MailAddress("enquiry@weblinkservices.net");// Email-ID of Sender  
        message.IsBodyHtml = true;
        //msgendeaour.From = new System.Net.Mail.MailAddress("enquiry@weblinkservices.net");// Email-ID of Sender  
        //msgendeaour.IsBodyHtml = true;
        //msgenaccount.From = new System.Net.Mail.MailAddress("enquiry@weblinkservices.net");// Email-ID of Sender  
        //msgenaccount.IsBodyHtml = true;

        MemoryStream file = new MemoryStream(PDF("This is pdf file text", Server.MapPath("~/Files/")).ToArray());

        file.Seek(0, SeekOrigin.Begin);
        Attachment data = new Attachment(file, pdfname, "application/pdf");
        ContentDisposition disposition = data.ContentDisposition;
        disposition.CreationDate = System.DateTime.Now;
        disposition.ModificationDate = System.DateTime.Now;
        disposition.DispositionType = DispositionTypeNames.Attachment;
        message.Attachments.Add(data);//Attach the file  
                                      //msgendeaour.Attachments.Add(data);//Attach the file
                                      //msgenaccount.Attachments.Add(data);//Attach the file

        //message.Body = txtmessagebody.Text;
        SmtpClient SmtpMail = new SmtpClient();
        SmtpMail.Host = "smtpout.secureserver.net"; // Name or IP-Address of Host used for SMTP transactions  
        SmtpMail.Port = 587; // Port for sending the mail  
        SmtpMail.Credentials = new System.Net.NetworkCredential("enquiry@weblinkservices.net", "wlspl@123"); // Username/password of network, if apply  
        SmtpMail.DeliveryMethod = SmtpDeliveryMethod.Network;
        SmtpMail.EnableSsl = false;

        SmtpMail.ServicePoint.MaxIdleTime = 0;
        SmtpMail.ServicePoint.SetTcpKeepAlive(true, 2000, 2000);
        message.BodyEncoding = Encoding.Default;
        message.Priority = MailPriority.High;
        SmtpMail.Send(message);
        ScriptManager.RegisterStartupScript(this, this.GetType(), "Alert", "alert('Mail Send Successfully !!');", true);
        Response.Write("Email has been sent");

    }
   private MemoryStream PDF(string ChallanNo, string message)
    {
        MemoryStream pdf = new MemoryStream();

        //foreach (GridViewRow g1 in Grd_MAIL.Rows)
        //{

        //    string MAIL = (g1.FindControl("lblmultMail") as Label).Text;
        //    bool chkmail = (g1.FindControl("chkmail") as CheckBox).Checked;
        //    if (chkmail == true)
        //    {

                //string MAIL = (g1.FindControl("lblmultMail") as Label).Text;
                //string MAIL = TXtMailtbl.Text;
                //SqlDataAdapter Da = new SqlDataAdapter("SELECT * FROM [vw_challanMailPdf] WHERE ChallanNo='" + txtchallanNo.Text + "' AND Email='" + MAIL + "'  ", con);
                SqlDataAdapter Da = new SqlDataAdapter("select * from vw_DeliveryChallan where ChallanNo='" + txtchallanNo.Text + "'", con);


                DataTable Dt = new DataTable();
                Da.Fill(Dt);

                StringWriter sw = new StringWriter();
                StringReader sr = new StringReader(sw.ToString());



                Document doc = new Document(PageSize.A4, 10f, 10f, 55f, 0f);
                PdfWriter pdfWriter = PdfWriter.GetInstance(doc, pdf);

                PdfWriter writer = PdfWriter.GetInstance(doc, new FileStream(Server.MapPath("~/Files/") + "DeliveryInvoice.pdf", FileMode.Create));
                //PdfWriter writer = PdfWriter.GetInstance(doc, Response.OutputStream);
                XMLWorkerHelper.GetInstance().ParseXHtml(writer, doc, sr);

                doc.Open();
                //byte[] file;
                //file = System.IO.File.ReadAllBytes(message);
                //iTextSharp.text.Image jpg = iTextSharp.text.Image.GetInstance(file);
                //jpg.ScaleToFit(550F, 200F);
                //doc.Add(jpg);

                string imageURL = Server.MapPath("~") + "/image/AA.png";

                iTextSharp.text.Image png = iTextSharp.text.Image.GetInstance(imageURL);

                //Resize image depend upon your need

                png.ScaleToFit(70, 100);

                //For Image Position
                png.SetAbsolutePosition(40, 745);
                //var document = new Document();

                //Give space before image
                //png.ScaleToFit(document.PageSize.Width - (document.RightMargin * 100), 50);
                png.SpacingBefore = 50f;

                //Give some space after the image

                png.SpacingAfter = 1f;

                png.Alignment = Element.ALIGN_LEFT;

                //paragraphimage.Add(png);
                //doc.Add(paragraphimage);
                doc.Add(png);


                PdfContentByte cb = pdfWriter.DirectContent;
                cb.Rectangle(17f, 735f, 560f, 60f);
                cb.Stroke();
                // Header 
                cb.BeginText();
                cb.SetFontAndSize(BaseFont.CreateFont(@"C:\Windows\Fonts\Calibrib.ttf", "Identity-H", BaseFont.EMBEDDED), 20);
                cb.ShowTextAligned(PdfContentByte.ALIGN_LEFT, "ENDEAVOUR AUTOMATION", 185, 773, 0);
                cb.SetFontAndSize(BaseFont.CreateFont(@"C:\Windows\Fonts\Calibrib.ttf", "Identity-H", BaseFont.EMBEDDED), 11);
                cb.ShowTextAligned(PdfContentByte.ALIGN_LEFT, "Survey No. 27, Nilambkar Nagar, Near Raghunandan Karyalay,", 155, 755, 0);
                cb.SetFontAndSize(BaseFont.CreateFont(@"C:\Windows\Fonts\Calibrib.ttf", "Identity-H", BaseFont.EMBEDDED), 11);
                cb.ShowTextAligned(PdfContentByte.ALIGN_LEFT, "Tathawade, Pune-411033", 232, 740, 0);
                cb.EndText();

                PdfContentByte cbb = pdfWriter.DirectContent;
                cbb.Rectangle(17f, 710f, 560f, 25f);
                cbb.Stroke();
                // Header 
                cbb.BeginText();
                cbb.SetFontAndSize(BaseFont.CreateFont(@"C:\Windows\Fonts\Calibrib.ttf", "Identity-H", BaseFont.EMBEDDED), 10);
                cbb.ShowTextAligned(PdfContentByte.ALIGN_LEFT, " Mob: 9860502108    Email: endeavour.automations@gmail.com ", 153, 722, 0);
                cbb.EndText();

                PdfContentByte cbbb = pdfWriter.DirectContent;
                cbbb.Rectangle(17f, 685f, 560f, 25f);
                cbbb.Stroke();
                // Header 
                cbbb.BeginText();
                cbbb.SetFontAndSize(BaseFont.CreateFont(@"C:\Windows\Fonts\Calibrib.ttf", "Identity-H", BaseFont.EMBEDDED), 10);
                cbbb.ShowTextAligned(PdfContentByte.ALIGN_LEFT, "GSTIN :  27AFYPJ3488G1ZQ ", 30, 695, 0);
                cbbb.SetFontAndSize(BaseFont.CreateFont(@"C:\Windows\Fonts\Calibrib.ttf", "Identity-H", BaseFont.EMBEDDED), 10);
                cbbb.ShowTextAligned(PdfContentByte.ALIGN_LEFT, "W.E.F. :  01/07/2017", 185, 695, 0);
                cbbb.SetFontAndSize(BaseFont.CreateFont(@"C:\Windows\Fonts\Calibrib.ttf", "Identity-H", BaseFont.EMBEDDED), 10);
                cbbb.ShowTextAligned(PdfContentByte.ALIGN_LEFT, "PAN No. :  AFYPJ3488G", 310, 695, 0);
                cbbb.SetFontAndSize(BaseFont.CreateFont(@"C:\Windows\Fonts\Calibrib.ttf", "Identity-H", BaseFont.EMBEDDED), 10);
                cbbb.ShowTextAligned(PdfContentByte.ALIGN_LEFT, "State Code :  27 Maharashtra", 440, 695, 0);
                cbbb.EndText();

                PdfContentByte cd = pdfWriter.DirectContent;
                cd.Rectangle(17f, 660f, 560f, 25f);
                cd.Stroke();
                // Header 
                cd.BeginText();
                cd.SetFontAndSize(BaseFont.CreateFont(@"C:\Windows\Fonts\Calibrib.ttf", "Identity-H", BaseFont.EMBEDDED), 17);
                cd.ShowTextAligned(PdfContentByte.ALIGN_LEFT, "Delivery Challan", 260, 667, 0);
                cd.EndText();

                Paragraph paragraphTable1 = new Paragraph();
                paragraphTable1.SpacingBefore = 120f;
                paragraphTable1.SpacingAfter = 10f;

                PdfPTable table = new PdfPTable(4);

                float[] widths2 = new float[] { 100, 180, 100, 180 };
                table.SetWidths(widths2);
                table.TotalWidth = 560f;
                table.LockedWidth = true;




                if (Dt.Rows.Count > 0)
                {
                    var CreateDate = DateTime.Now.ToString("yyyy-MM-dd");
                    string CustomerName = Dt.Rows[0]["CustomerName"].ToString();
                    string PoNumber = Dt.Rows[0]["PONo"].ToString();
                    string Address = Dt.Rows[0]["Address"].ToString();
                    string PODate = Dt.Rows[0]["PODate"].ToString().TrimEnd("0:0".ToCharArray());
                    string MobileNo = Dt.Rows[0]["MobileNo"].ToString();
                    string GSTNo = Dt.Rows[0]["GstNo"].ToString();
                    string KindAtt = Dt.Rows[0]["KindAtt"].ToString();
                    string TotalInWord = Dt.Rows[0]["TotalInWord"].ToString();
                    string GrandTotal = Dt.Rows[0]["GrandTotal"].ToString();
                    string CGST = Dt.Rows[0]["Cgst"].ToString();
                    string SGST = Dt.Rows[0]["Sgst"].ToString();
                    string Total = Dt.Rows[0]["GrandTotal"].ToString();
                    string challaNo = Dt.Rows[0]["ChallanNo"].ToString();
                    string challanDate = Dt.Rows[0]["ChallanDate"].ToString().TrimEnd("0:0".ToCharArray());

                    DateTime ffff1 = Convert.ToDateTime(Dt.Rows[0]["PODate"].ToString());
                    string datee = ffff1.ToString("yyyy-MM-dd");
                    DateTime ffff2 = Convert.ToDateTime(Dt.Rows[0]["ChallanDate"].ToString());
                    string Dateeee = ffff1.ToString("yyyy-MM-dd");

                    table.AddCell(new Phrase("Customer Name : ", FontFactory.GetFont("Arial", 9, Font.BOLD)));
                    table.AddCell(new Phrase(CustomerName, FontFactory.GetFont("Arial", 9, Font.BOLD)));

                    table.AddCell(new Phrase("Challan No :", FontFactory.GetFont("Arial", 9, Font.BOLD)));
                    table.AddCell(new Phrase(challaNo, FontFactory.GetFont("Arial", 9, Font.BOLD)));

                    table.AddCell(new Phrase("Address:", FontFactory.GetFont("Arial", 9, Font.BOLD)));
                    table.AddCell(new Phrase(Address, FontFactory.GetFont("Arial", 9, Font.BOLD)));

                    table.AddCell(new Phrase("Date :", FontFactory.GetFont("Arial", 9, Font.BOLD)));
                    table.AddCell(new Phrase(challanDate, FontFactory.GetFont("Arial", 9, Font.BOLD)));

                    table.AddCell(new Phrase("GSt No :", FontFactory.GetFont("Arial", 9, Font.BOLD)));
                    table.AddCell(new Phrase(GSTNo, FontFactory.GetFont("Arial", 9, Font.BOLD)));

                    table.AddCell(new Phrase("PO No :", FontFactory.GetFont("Arial", 9, Font.BOLD)));
                    table.AddCell(new Phrase(PoNumber, FontFactory.GetFont("Arial", 9, Font.BOLD)));

                    table.AddCell(new Phrase("KinD Att :", FontFactory.GetFont("Arial", 9, Font.BOLD)));
                    table.AddCell(new Phrase(KindAtt, FontFactory.GetFont("Arial", 9, Font.BOLD)));

                    table.AddCell(new Phrase("Date :", FontFactory.GetFont("Arial", 9, Font.BOLD)));
                    table.AddCell(new Phrase(PODate, FontFactory.GetFont("Arial", 9, Font.BOLD)));


                    paragraphTable1.Add(table);
                    doc.Add(paragraphTable1);



                    Paragraph paragraphTable2 = new Paragraph();
                    paragraphTable2.SpacingAfter = 0f;
                    table = new PdfPTable(6);
                    float[] widths3 = new float[] { 4f, 19f, 10f, 8f, 8f, 8f };
                    table.SetWidths(widths3);

                    double Ttotal_price = 0;
                    //DataTable Dt = Read_Table("SELECT * FROM vw_Quotation_Invoice");

                    if (Dt.Rows.Count > 0)
                    {
                        table.TotalWidth = 560f;
                        table.LockedWidth = true;
                        table.AddCell(new Phrase("   SN.", FontFactory.GetFont("Arial", 10, Font.BOLD)));
                        table.AddCell(new Phrase("                     Description", FontFactory.GetFont("Arial", 10, Font.BOLD)));
                        table.AddCell(new Phrase("        Hsn / Sac", FontFactory.GetFont("Arial", 10, Font.BOLD)));
                        table.AddCell(new Phrase("        Tax %", FontFactory.GetFont("Arial", 10, Font.BOLD)));
                        table.AddCell(new Phrase("      Quantity", FontFactory.GetFont("Arial", 10, Font.BOLD)));
                        table.AddCell(new Phrase("        Unit", FontFactory.GetFont("Arial", 10, Font.BOLD)));

                        //table.TotalWidth = 560f;
                        //table.LockedWidth = true;
                        //table.AddCell(new Phrase("SN.", FontFactory.GetFont("Arial", 10, Font.BOLD)));
                        //table.AddCell(new Phrase("Description", FontFactory.GetFont("Arial", 10, Font.BOLD)));
                        //table.AddCell(new Phrase("Hsn / Sac", FontFactory.GetFont("Arial", 10, Font.BOLD)));
                        //table.AddCell(new Phrase("Tax %", FontFactory.GetFont("Arial", 10, Font.BOLD)));
                        //table.AddCell(new Phrase("Quantity", FontFactory.GetFont("Arial", 10, Font.BOLD)));
                        //table.AddCell(new Phrase("Unit", FontFactory.GetFont("Arial", 10, Font.BOLD)));
                        //table.AddCell(new Phrase("Rate", FontFactory.GetFont("Arial", 10, Font.BOLD)));
                        //table.AddCell(new Phrase("Disc %", FontFactory.GetFont("Arial", 10, Font.BOLD)));
                        //table.AddCell(new Phrase("Total", FontFactory.GetFont("Arial", 10, Font.BOLD)));

                        //int rowid = 1;
                        //foreach (DataRow dr in Dt.Rows)
                        //{
                        //    table.TotalWidth = 560f;
                        //    table.LockedWidth = true;

                        //    double Ftotal = Convert.ToDouble(dr["GrandTotal"].ToString());
                        //    string _ftotal = Ftotal.ToString("##.00");
                        //    table.AddCell(new Phrase(rowid.ToString(), FontFactory.GetFont("Arial", 9)));
                        //    table.AddCell(new Phrase(dr["Description"].ToString(), FontFactory.GetFont("Arial", 9)));
                        //    table.AddCell(new Phrase(dr["HSN_code"].ToString(), FontFactory.GetFont("Arial", 9)));
                        //    table.AddCell(new Phrase(dr["Tax"].ToString(), FontFactory.GetFont("Arial", 9)));
                        //    table.AddCell(new Phrase(dr["Qty"].ToString(), FontFactory.GetFont("Arial", 9)));
                        //    table.AddCell(new Phrase(dr["Units"].ToString(), FontFactory.GetFont("Arial", 9)));
                        //    //table.AddCell(new Phrase(dr["Rate"].ToString(), FontFactory.GetFont("Arial", 9)));
                        //    //table.AddCell(new Phrase(dr["Discount"].ToString(), FontFactory.GetFont("Arial", 9)));
                        //    //table.AddCell(new Phrase(_ftotal, FontFactory.GetFont("Arial", 9)));
                        //    rowid++;

                        //    Ttotal_price += Convert.ToDouble(dr["GrandTotal"].ToString());
                        //}

                        int rowid = 1;
                        foreach (DataRow dr in Dt.Rows)
                        {
                            table.TotalWidth = 560f;
                            table.LockedWidth = true;

                            double Ftotal = Convert.ToDouble(dr["GrandTotal"].ToString());
                            string _ftotal = Ftotal.ToString("##.00");
                            table.AddCell(new Phrase("     " + rowid.ToString(), FontFactory.GetFont("Arial", 9)));
                            table.AddCell(new Phrase("          " + dr["Description"].ToString(), FontFactory.GetFont("Arial", 9)));
                            table.AddCell(new Phrase("           " + dr["HSN_code"].ToString(), FontFactory.GetFont("Arial", 9)));
                            table.AddCell(new Phrase("           " + dr["Tax"].ToString(), FontFactory.GetFont("Arial", 9)));
                            table.AddCell(new Phrase("            " + dr["Qty"].ToString(), FontFactory.GetFont("Arial", 9)));
                            table.AddCell(new Phrase("         " + dr["Units"].ToString(), FontFactory.GetFont("Arial", 9)));
                            //table.AddCell(new Phrase(dr["Rate"].ToString(), FontFactory.GetFont("Arial", 9)));
                            //table.AddCell(new Phrase(dr["Discount"].ToString(), FontFactory.GetFont("Arial", 9)));
                            //table.AddCell(new Phrase(_ftotal, FontFactory.GetFont("Arial", 9)));
                            rowid++;

                            Ttotal_price += Convert.ToDouble(dr["GrandTotal"].ToString());
                        }
                    }
                    paragraphTable2.Add(table);
                    doc.Add(paragraphTable2);

                    //Space
                    Paragraph paragraphTable3 = new Paragraph();

                    string[] items = { "Goods once sold will not be taken back or exchange. \b",
                        "Interest at the rate of 18% will be charged if bill is'nt paid within 30 days.\b",
                        "Our risk and responsibility ceases the moment goods leaves out godown. \n",
                        };

                    Font font12 = FontFactory.GetFont("Arial", 12, Font.BOLD);
                    Font font10 = FontFactory.GetFont("Arial", 10, Font.BOLD);
                    Paragraph paragraph = new Paragraph("", font12);

                    for (int i = 0; i < items.Length; i++)
                    {
                        paragraph.Add(new Phrase("", font10));
                    }

                    table = new PdfPTable(6);
                    table.TotalWidth = 560f;
                    table.LockedWidth = true;
                    table.SetWidths(new float[] { 4f, 19f, 10f, 8f, 8f, 8f });
                    table.AddCell(paragraph);
                    table.AddCell(new Phrase("", FontFactory.GetFont("Arial", 10, Font.BOLD)));
                    table.AddCell(new Phrase("", FontFactory.GetFont("Arial", 10, Font.BOLD)));
                    table.AddCell(new Phrase("", FontFactory.GetFont("Arial", 10, Font.BOLD)));
                    table.AddCell(new Phrase("", FontFactory.GetFont("Arial", 10, Font.BOLD)));
                    //table.AddCell(new Phrase("", FontFactory.GetFont("Arial", 10, Font.BOLD)));
                    //table.AddCell(new Phrase("", FontFactory.GetFont("Arial", 10, Font.BOLD)));
                    //table.AddCell(new Phrase("", FontFactory.GetFont("Arial", 10, Font.BOLD)));
                    //table.AddCell(new Phrase("", FontFactory.GetFont("Arial", 10, Font.BOLD)));
                    //table.AddCell(new Phrase("\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", FontFactory.GetFont("Arial", 10, Font.BOLD)));

                    //doc.Add(table);
                    if (Dt.Rows.Count >= 10)
                    {
                        table.AddCell(new Phrase("  \n\n\n\n\n\n", FontFactory.GetFont("Arial", 10, Font.BOLD)));
                        //doc.Add(table);
                    }
                    else if (Dt.Rows.Count >= 7 && Dt.Rows.Count <= 9)
                    {
                        table.AddCell(new Phrase("  \n\n\n\n\n\n\n\n\n\n", FontFactory.GetFont("Arial", 10, Font.BOLD)));
                    }
                    else if (Dt.Rows.Count >= 4 && Dt.Rows.Count <= 6)
                    {
                        table.AddCell(new Phrase("  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", FontFactory.GetFont("Arial", 10, Font.BOLD)));
                    }
                    else if (Dt.Rows.Count < 4)
                    {
                        table.AddCell(new Phrase("  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", FontFactory.GetFont("Arial", 10, Font.BOLD)));
                    }
                    doc.Add(table);
                    //Add Total Row start
                    Paragraph paragraphTable5 = new Paragraph();

                    //paragraphTable5.SpacingAfter = 10f;   

                    string[] itemsss = { "Goods once sold will not be taken back or exchange. \b",
                        "Interest at the rate of 18% will be charged if bill is'nt paid within 30 days.\b",
                        "Our risk and responsibility ceases the moment goods leaves out godown. \n",
                        };

                    Font font13 = FontFactory.GetFont("Arial", 12, Font.BOLD);
                    Font font11 = FontFactory.GetFont("Arial", 10, Font.BOLD);
                    Paragraph paragraphh = new Paragraph("", font12);

                    //paragraphh.SpacingAfter = 10f;

                    for (int i = 0; i < items.Length; i++)
                    {
                        paragraph.Add(new Phrase("", font10));
                    }

                    table = new PdfPTable(3);
                    table.TotalWidth = 560f;
                    table.LockedWidth = true;

                    paragraph.Alignment = Element.ALIGN_RIGHT;

                    table.SetWidths(new float[] { 0f, 76f, 12f });
                    table.AddCell(paragraph);
                    //PdfPCell cell = new PdfPCell(new Phrase("Sub Total", FontFactory.GetFont("Arial", 10, Font.BOLD)));
                    //cell.HorizontalAlignment = Element.ALIGN_RIGHT;
                    //table.AddCell(cell);
                    //PdfPCell cell11 = new PdfPCell(new Phrase(Ttotal_price.ToString("##.00"), FontFactory.GetFont("Arial", 10, Font.BOLD)));
                    //cell11.HorizontalAlignment = Element.ALIGN_RIGHT;
                    //table.AddCell(cell11);


                    doc.Add(table);
                    //add total row end

                    //CGST 9% Row STart
                    Paragraph paragraphTable15 = new Paragraph();
                    paragraphTable5.SpacingAfter = 0f;
                    //paragraphTable15
                    //paragraphTable5.SpacingAfter = 10f;

                    string[] itemss = { "Goods once sold will not be taken back or exchange. \b",
                        "Interest at the rate of 18% will be charged if bill is'nt paid within 30 days.\b",
                        "Our risk and responsibility ceases the moment goods leaves out godown. \n",
                        };

                    Font font1 = FontFactory.GetFont("Arial", 12, Font.BOLD);
                    Font font2 = FontFactory.GetFont("Arial", 10, Font.BOLD);
                    Paragraph paragraphhh = new Paragraph("", font12);

                    //paragraphh.SpacingAfter = 10f;

                    for (int i = 0; i < items.Length; i++)
                    {
                        paragraph.Add(new Phrase("", font10));
                    }

                    table = new PdfPTable(3);
                    table.TotalWidth = 560f;
                    table.LockedWidth = true;

                    //var Cgst_9 = Convert.ToDecimal(Ttotal_price) * 9 / 100;

                    //table.SetWidths(new float[] { 0f, 76f, 12f });
                    //table.AddCell(paragraph);
                    //PdfPCell cell2 = new PdfPCell(new Phrase("C-Gst %", FontFactory.GetFont("Arial", 10, Font.BOLD)));
                    //cell2.HorizontalAlignment = Element.ALIGN_RIGHT;
                    //table.AddCell(cell2);
                    //PdfPCell cell3 = new PdfPCell(new Phrase(CGST, FontFactory.GetFont("Arial", 10, Font.BOLD)));
                    //cell3.HorizontalAlignment = Element.ALIGN_RIGHT;
                    //table.AddCell(cell3);

                    //doc.Add(table);
                    //CGST 9% Row End

                    //SGST 9% Row STart
                    Paragraph paragraphTable16 = new Paragraph();
                    paragraphTable5.SpacingAfter = 10f;

                    //paragraphTable5.SpacingAfter = 10f;

                    string[] item = { "Goods once sold will not be taken back or exchange. \b",
                        "Interest at the rate of 18% will be charged if bill is'nt paid within 30 days.\b",
                        "Our risk and responsibility ceases the moment goods leaves out godown. \n",
                        };

                    Font font14 = FontFactory.GetFont("Arial", 12, Font.BOLD);
                    Font font15 = FontFactory.GetFont("Arial", 10, Font.BOLD);
                    Paragraph paragraphhhh = new Paragraph("", font12);

                    //paragraphh.SpacingAfter = 10f;

                    for (int i = 0; i < items.Length; i++)
                    {
                        paragraph.Add(new Phrase("", font10));
                    }

                    table = new PdfPTable(3);
                    table.TotalWidth = 560f;
                    table.LockedWidth = true;

                    //var Sgst_9 = Convert.ToDecimal(Ttotal_price) * 9 / 100;


                    //table.SetWidths(new float[] { 0f, 76f, 12f });
                    //table.AddCell(paragraph);
                    //PdfPCell cell22 = new PdfPCell(new Phrase("S-Gst %", FontFactory.GetFont("Arial", 10, Font.BOLD)));
                    //cell22.HorizontalAlignment = Element.ALIGN_RIGHT;
                    //table.AddCell(cell22);
                    //PdfPCell cell33 = new PdfPCell(new Phrase(SGST, FontFactory.GetFont("Arial", 10, Font.BOLD)));
                    //cell33.HorizontalAlignment = Element.ALIGN_RIGHT;
                    //table.AddCell(cell33);


                    //doc.Add(table);
                    //SGST 9% Row End

                    //Grand total Row STart
                    Paragraph paragraphTable17 = new Paragraph();
                    paragraphTable5.SpacingAfter = 10f;

                    //paragraphTable5.SpacingAfter = 10f;

                    string[] itemm = { "Goods once sold will not be taken back or exchange. \b",
                        "Interest at the rate of 18% will be charged if bill is'nt paid within 30 days.\b",
                        "Our risk and responsibility ceases the moment goods leaves out godown. \n",
                        };

                    Font font16 = FontFactory.GetFont("Arial", 12, Font.BOLD);
                    Font font17 = FontFactory.GetFont("Arial", 10, Font.BOLD);
                    Paragraph paragraphhhhh = new Paragraph("", font12);

                    //paragraphh.SpacingAfter = 10f;

                    for (int i = 0; i < items.Length; i++)
                    {
                        paragraph.Add(new Phrase("", font10));
                    }

                    table = new PdfPTable(3);
                    table.TotalWidth = 560f;
                    table.LockedWidth = true;

                    //var Grndttl = Convert.ToDecimal(Ttotal_price) + Convert.ToDecimal(Cgst_9) + Convert.ToDecimal(Sgst_9);

                    //table.SetWidths(new float[] { 0f, 76f, 12f });
                    //table.AddCell(paragraph);
                    //PdfPCell cell44 = new PdfPCell(new Phrase("Grand Total", FontFactory.GetFont("Arial", 10, Font.BOLD)));
                    //cell44.HorizontalAlignment = Element.ALIGN_RIGHT;
                    //table.AddCell(cell44);
                    //PdfPCell cell55 = new PdfPCell(new Phrase(Total, FontFactory.GetFont("Arial", 10, Font.BOLD)));
                    //cell55.HorizontalAlignment = Element.ALIGN_RIGHT;
                    //table.AddCell(cell55);


                    //doc.Add(table);
                    //Grand total Row End

                    //Grand total in word Row STart
                    Paragraph paragraphTable18 = new Paragraph();
                    paragraphTable18.SpacingAfter = 50f;

                    //paragraphTable5.SpacingAfter = 10f;

                    string[] itemmm = { "Goods once sold will not be taken back or exchange. \b",
                        "Interest at the rate of 18% will be charged if bill is'nt paid within 30 days.\b",
                        "Our risk and responsibility ceases the moment goods leaves out godown. \n",
                        };

                    Font font18 = FontFactory.GetFont("Arial", 12, Font.BOLD);
                    Font font19 = FontFactory.GetFont("Arial", 10, Font.BOLD);
                    Paragraph paragraphhmhhh = new Paragraph("", font12);


                    for (int i = 0; i < items.Length; i++)
                    {
                        paragraph.Add(new Phrase("", font10));
                    }

                    //table = new PdfPTable(3);
                    //table.TotalWidth = 560f;
                    //table.LockedWidth = true;

                    //table.SetWidths(new float[] { 0f, 25f, 63f });
                    //table.AddCell(paragraph);
                    //PdfPCell cell66 = new PdfPCell(new Phrase("Amount In Words Rs. ", FontFactory.GetFont("Arial", 10, Font.BOLD)));
                    //cell66.HorizontalAlignment = Element.ALIGN_CENTER;
                    //table.AddCell(cell66);
                    //PdfPCell cell77 = new PdfPCell(new Phrase(TotalInWord, FontFactory.GetFont("Arial", 10, Font.BOLD)));
                    //cell77.HorizontalAlignment = Element.ALIGN_CENTER;
                    //table.AddCell(cell77);

                    //doc.Add(table);
                    //Grand total in word Row End

                    PdfContentByte cn = pdfWriter.DirectContent;
                    cn.Rectangle(17f, 215f, 560f, 130f);              
                    cn.Stroke();
                    // Header 
                    cn.BeginText();
                    cn.SetFontAndSize(BaseFont.CreateFont(@"C:\Windows\Fonts\Calibrib.ttf", "Identity-H", BaseFont.EMBEDDED), 14);
                    cn.ShowTextAligned(PdfContentByte.ALIGN_LEFT, "Delivery Address :", 30, 325, 0);
                    cn.SetFontAndSize(BaseFont.CreateFont(@"C:\Windows\Fonts\calibri.ttf", "Identity-H", BaseFont.EMBEDDED), 12);
                    cn.ShowTextAligned(PdfContentByte.ALIGN_LEFT, "NEW MATERIAL", 30, 306, 0);
                    cn.SetFontAndSize(BaseFont.CreateFont(@"C:\Windows\Fonts\calibri.ttf", "Identity-H", BaseFont.EMBEDDED), 12);
                    cn.ShowTextAligned(PdfContentByte.ALIGN_LEFT, "Subject To Pune Jurisdiction Only", 30, 293, 0);
                    cn.SetFontAndSize(BaseFont.CreateFont(@"C:\Windows\Fonts\calibri.ttf", "Identity-H", BaseFont.EMBEDDED), 12);
                    cn.ShowTextAligned(PdfContentByte.ALIGN_LEFT, "Received above mterial duly checked.", 30, 255, 0);
                    cn.SetFontAndSize(BaseFont.CreateFont(@"C:\Windows\Fonts\calibri.ttf", "Identity-H", BaseFont.EMBEDDED), 12);
                    cn.ShowTextAligned(PdfContentByte.ALIGN_LEFT, "Customer's Signature & Stamp", 30, 239, 0);
                    //cn.SetFontAndSize(BaseFont.CreateFont(@"C:\Windows\Fonts\calibri.ttf", "Identity-H", BaseFont.EMBEDDED), 12);
                    //cn.ShowTextAligned(PdfContentByte.ALIGN_LEFT, "IFSC/Neft Code :BARB0KALEWA", 30, 180, 0);

                    //cn.SetFontAndSize(BaseFont.CreateFont(@"C:\Windows\Fonts\calibrii.ttf", "Identity-H", BaseFont.EMBEDDED), 10);
                    //cn.ShowTextAligned(PdfContentByte.ALIGN_LEFT, "We Thank you for your enquiry", 440, 256, 0);
                    //cn.SetFontAndSize(BaseFont.CreateFont(@"C:\Windows\Fonts\Calibrib.ttf", "Identity-H", BaseFont.EMBEDDED), 12);
                    //cn.ShowTextAligned(PdfContentByte.ALIGN_LEFT, "For", 392, 230, 0);
                    cn.SetFontAndSize(BaseFont.CreateFont(@"C:\Windows\Fonts\Calibrib.ttf", "Identity-H", BaseFont.EMBEDDED), 13);
                    cn.ShowTextAligned(PdfContentByte.ALIGN_LEFT, "For ENDEAVOUR AUTOMATION", 400, 310, 0);
                    cn.SetFontAndSize(BaseFont.CreateFont(@"C:\Windows\Fonts\Calibrib.ttf", "Identity-H", BaseFont.EMBEDDED), 13);
                    cn.ShowTextAligned(PdfContentByte.ALIGN_LEFT, "Authorised Signatory", 443, 230, 0);
                    cn.EndText();

                    Paragraph paragraphTable4 = new Paragraph();

                    paragraphTable4.SpacingBefore = 10f;

                    table = new PdfPTable(2);
                    table.TotalWidth = 560f;

                    float[] widths = new float[] { 160f, 400f };
                    table.SetWidths(widths);
                    table.LockedWidth = true;

                    //doc.Close();


                    //Byte[] FileBuffer = File.ReadAllBytes(Server.MapPath("~/Files/") + "QuotationInvoice.pdf");

                    //if (FileBuffer != null)
                    //{
                    //    Response.ContentType = "application/pdf";
                    //    Response.AddHeader("content-length", FileBuffer.Length.ToString());
                    //    Response.BinaryWrite(FileBuffer);
                    //    Response.AddHeader("Content-Disposition", "attachment;filename=myfilename.pdf");
                    //}

                    pdfWriter.CloseStream = false;
                    doc.Close();
                    pdf.Position = 0;
                }
        //    }
        //}
        return pdf;
    }

    protected void Lnkbtn_addmail_Click(object sender, EventArgs e)
    {
        if (TXtMailtbl.Text == "")
        {
            ScriptManager.RegisterStartupScript(this, this.GetType(), "Alert", "alert('Please fill Mail ID  !!!');", true);

        }
        else
        {
            ShowMAILRecord();
        }
    }

    protected void ShowMAILRecord()
    {
        ViewState["RowNo"] = (int)ViewState["RowNo"] + 1;
        DataTable Dt = (DataTable)ViewState["MULTMail"];
        Dt.Rows.Add(ViewState["RowNo"], TXtMailtbl.Text);
        ViewState["MULTMail"] = Dt;

        TXtMailtbl.Text = string.Empty;

        Grd_MAIL.DataSource = (DataTable)ViewState["MULTMail"];
        Grd_MAIL.DataBind();
    }

    protected void lnkMAILDelete_Click(object sender, EventArgs e)
    {
        GridViewRow row = (sender as LinkButton).NamingContainer as GridViewRow;

        DataTable dt = ViewState["MULTMail"] as DataTable;
        dt.Rows.Remove(dt.Rows[row.RowIndex]);
        ViewState["MULTMail"] = dt;
        Grd_MAIL.DataSource = (DataTable)ViewState["MULTMail"];
        Grd_MAIL.DataBind();
        ScriptManager.RegisterStartupScript(this, this.GetType(), "Alert", "alert('Mail ID Delete Succesfully !!!');", true);
    }

    protected void txtjobNo_TextChanged(object sender, EventArgs e)
    {
        ///automatic information to customer name.
        DataTable dt = new DataTable();
        SqlDataAdapter sad = new SqlDataAdapter("select * from tblTestingProduct where JobNo='" + txtjobNo.Text + "'", con);
        sad.Fill(dt);
        if (dt.Rows.Count > 0)
        {
            txtcustomerName.Text = dt.Rows[0]["CustomerName"].ToString();
        }
        ///automatic information fetch to address and all .
        DataTable dt1 = new DataTable();
        SqlDataAdapter sad1 = new SqlDataAdapter("select * from tblCustomer where CustomerName='" + txtcustomerName.Text + "'", con);
        sad1.Fill(dt1);
        if (dt1.Rows.Count > 0)
        {
            txtAddress.Text = dt1.Rows[0]["AddresLine1"].ToString();
            //txtAddress.Text = dt.Rows[0]["AddresLine2"].ToString();
            //txtAddress.Text = dt.Rows[0]["AddresLine3"].ToString();
            //txtEmail.Text = dt.Rows[0]["Email"].ToString();
            txtGstNo.Text = dt1.Rows[0]["GSTNo"].ToString();
            txtMobileNo.Text = dt1.Rows[0]["MobNo"].ToString();
            txtstatecode.Text = dt1.Rows[0]["StateCode"].ToString();


        }
        //bind kint attent to customer name.
        DataTable dt2 = new DataTable();
        SqlDataAdapter sad2 = new SqlDataAdapter("select * from tblCustomerContactPerson where CustName='" + txtcustomerName.Text + "'", con);
        sad2.Fill(dt2);
        ddlkintperson.DataTextField = "ContactPerName";

        ddlkintperson.DataSource = dt2;
        ddlkintperson.DataBind();
        SqlDataAdapter Da = new SqlDataAdapter("SELECT CustomerName,GSTNo,StateCode,AddresLine1,Email,MobNo,ContactPerName1 FROM tblCustomer WHERE CustomerName='" + txtcustomerName.Text + "'", con);
        DataTable Dt = new DataTable();
        Da.Fill(Dt);
        if (Dt.Rows.Count > 0)
        {
            // txt_GST.Text = Dt.Rows[0]["GSTNo"].ToString();
            txtGstNo.Text = Dt.Rows[0]["GSTNo"].ToString();
            txtAddress.Text = Dt.Rows[0]["AddresLine1"].ToString();
            TXtMailtbl.Text = Dt.Rows[0]["Email"].ToString();
            txtMobileNo.Text = Dt.Rows[0]["MobNo"].ToString();
            //  txt_kind_att.Text = Dt.Rows[0]["ContactPerName1"].ToString();
        }

        GetProducttableonJobNo();

        //Componentdetails table  fetched
        //DataTable dt4 = new DataTable();
        //SqlDataAdapter sad4 = new SqlDataAdapter("select Hsn ,TaxPercentage As Tax,Quntity As Quantity ,Unit,Rate,DiscountPercentage As Discount,Total AS TotalAmount, Description As Description from tblInvoiceDtls where JobNo='" + txtjobNo.Text + "'", con);
        //sad4.Fill(dt4);
        //if (dt4.Rows.Count > 0)
        //{
        //    dgvProductDtl.DataSource = dt4;
        //    dgvProductDtl.DataBind();

        //}

        ////show mail list to customer.
        DataTable dt3 = new DataTable();
        SqlDataAdapter sad3 = new SqlDataAdapter("select * from tblCustomerContactPerson where CustName='" + txtcustomerName.Text + "'", con);
        sad3.Fill(dt3);
        Grd_MAIL.DataSource = dt3;
        Grd_MAIL.DataBind();
        Grd_MAIL.EmptyDataText = "Record Not Found";
    }

    protected void Grd_MAIL_RowDataBound(object sender, GridViewRowEventArgs e)
    {
        if (btnSubmit.Text == "Update")
        {


            if (e.Row.RowType == DataControlRowType.DataRow)
            {
                con.Open();
                int id = Convert.ToInt32(Grd_MAIL.DataKeys[e.Row.RowIndex].Values[0]);
                CheckBox chkmailupdate = (CheckBox)e.Row.FindControl("chkmail");
                Label mail = (Label)e.Row.FindControl("lblmultMail");
                SqlCommand cmd = new SqlCommand("select chkmail from tblCHallanMail where challanNo='" + txtchallanNo.Text + "' AND id='" + id + "'", con);

                SqlDataReader dr = cmd.ExecuteReader();
                if (dr.Read())
                {

                    chkupdate = dr["chkmail"].ToString();
                    con.Close();
                }
                chkmailupdate.Checked = chkupdate == "True" ? true : false;
            }
        }
    }

    protected void txtRate_TextChanged(object sender, EventArgs e)
    {
        GridViewRow row = (sender as TextBox).NamingContainer as GridViewRow;
        Calculations(row);
    }

    protected void txtcustomerName_TextChanged(object sender, EventArgs e)
    {
        ///automatic information to customer name.
        DataTable dt = new DataTable();
        //SqlDataAdapter sad = new SqlDataAdapter("select * from tblTestingProduct where JobNo='" + txtjobNo.Text + "'", con);
        //sad.Fill(dt);
        //if (dt.Rows.Count > 0)
        //{
        //    txtcustomerName.Text = dt.Rows[0]["CustomerName"].ToString();
        //}
        ///automatic information fetch to address and all .
        DataTable dt1 = new DataTable();
        SqlDataAdapter sad1 = new SqlDataAdapter("select * from tblCustomer where CustomerName='" + txtcustomerName.Text + "'", con);
        sad1.Fill(dt1);
        if (dt1.Rows.Count > 0)
        {
            txtAddress.Text = dt1.Rows[0]["AddresLine1"].ToString();
            //txtAddress.Text = dt.Rows[0]["AddresLine2"].ToString();
            //txtAddress.Text = dt.Rows[0]["AddresLine3"].ToString();
            //txtEmail.Text = dt.Rows[0]["Email"].ToString();
            txtGstNo.Text = dt1.Rows[0]["GSTNo"].ToString();
            txtMobileNo.Text = dt1.Rows[0]["MobNo"].ToString();
            txtstatecode.Text = dt1.Rows[0]["StateCode"].ToString();


        }
        //bind kint attent to customer name.
        DataTable dt2 = new DataTable();
        SqlDataAdapter sad2 = new SqlDataAdapter("select * from tblCustomerContactPerson where CustName='" + txtcustomerName.Text + "'", con);
        sad2.Fill(dt2);
        ddlkintperson.DataTextField = "ContactPerName";

        ddlkintperson.DataSource = dt2;
        ddlkintperson.DataBind();
        SqlDataAdapter Da = new SqlDataAdapter("SELECT CustomerName,GSTNo,StateCode,AddresLine1,Email,MobNo,ContactPerName1 FROM tblCustomer WHERE CustomerName='" + txtcustomerName.Text + "'", con);
        DataTable Dt = new DataTable();
        Da.Fill(Dt);
        if (Dt.Rows.Count > 0)
        {
            // txt_GST.Text = Dt.Rows[0]["GSTNo"].ToString();
            txtGstNo.Text = Dt.Rows[0]["GSTNo"].ToString();
            txtAddress.Text = Dt.Rows[0]["AddresLine1"].ToString();
            TXtMailtbl.Text = Dt.Rows[0]["Email"].ToString();
            txtMobileNo.Text = Dt.Rows[0]["MobNo"].ToString();
            //  txt_kind_att.Text = Dt.Rows[0]["ContactPerName1"].ToString();
        }

        //bind Job No Against customer Name.

        //DataTable Dt4 = new DataTable();
        //SqlDataAdapter Daa = new SqlDataAdapter("SELECT JobNo  FROM [tblInvoiceHdr] where CustName = '" + txtcustomerName.Text + "'", con);
        //Daa.Fill(Dt4);
        //if (Dt4.Rows.Count > 0)
        //{
        //    txtjobNo.DataSource = Dt;
        //    txtjobNo.DataTextField = "JobNo";
        //    txtjobNo.DataBind();
        //    txtjobNo.Items.Insert(0, new System.Web.UI.WebControls.ListItem("--Select--", "0"));

        //}
        ////show mail list to customer.
        //DataTable dt3 = new DataTable();
        //SqlDataAdapter sad3 = new SqlDataAdapter("select * from tblCustomerContactPerson where CustName='" + txtcustomerName.Text + "'", con);
        //sad3.Fill(dt3);
        //Grd_MAIL.DataSource = dt3;
        //Grd_MAIL.DataBind();
        //Grd_MAIL.EmptyDataText = "Record Not Found";
      //  Getinvoiceno();
        GetJobNO();

    }

    protected void txtjobNo_SelectedIndexChanged(object sender, EventArgs e)
    {
        ///automatic information to customer name.
        DataTable dt = new DataTable();
        SqlDataAdapter sad = new SqlDataAdapter("select * from tblTestingProduct where JobNo='" + txtjobNo.Text + "'", con);
        sad.Fill(dt);
        if (dt.Rows.Count > 0)
        {
            txtcustomerName.Text = dt.Rows[0]["CustomerName"].ToString();
        }
        ///automatic information fetch to address and all .
        DataTable dt1 = new DataTable();
        SqlDataAdapter sad1 = new SqlDataAdapter("select * from tblCustomer where CustomerName='" + txtcustomerName.Text + "'", con);
        sad1.Fill(dt1);
        if (dt1.Rows.Count > 0)
        {
            txtAddress.Text = dt1.Rows[0]["AddresLine1"].ToString();
            //txtAddress.Text = dt.Rows[0]["AddresLine2"].ToString();
            //txtAddress.Text = dt.Rows[0]["AddresLine3"].ToString();
            //txtEmail.Text = dt.Rows[0]["Email"].ToString();
            txtGstNo.Text = dt1.Rows[0]["GSTNo"].ToString();
            txtMobileNo.Text = dt1.Rows[0]["MobNo"].ToString();
            txtstatecode.Text = dt1.Rows[0]["StateCode"].ToString();


        }
        //bind kint attent to customer name.
        DataTable dt2 = new DataTable();
        SqlDataAdapter sad2 = new SqlDataAdapter("select * from tblCustomerContactPerson where CustName='" + txtcustomerName.Text + "'", con);
        sad2.Fill(dt2);
        ddlkintperson.DataTextField = "ContactPerName";

        ddlkintperson.DataSource = dt2;
        ddlkintperson.DataBind();
        SqlDataAdapter Da = new SqlDataAdapter("SELECT CustomerName,GSTNo,StateCode,AddresLine1,Email,MobNo,ContactPerName1 FROM tblCustomer WHERE CustomerName='" + txtcustomerName.Text + "'", con);
        DataTable Dt = new DataTable();
        Da.Fill(Dt);
        if (Dt.Rows.Count > 0)
        {
            // txt_GST.Text = Dt.Rows[0]["GSTNo"].ToString();
            txtGstNo.Text = Dt.Rows[0]["GSTNo"].ToString();
            txtAddress.Text = Dt.Rows[0]["AddresLine1"].ToString();
            TXtMailtbl.Text = Dt.Rows[0]["Email"].ToString();
            txtMobileNo.Text = Dt.Rows[0]["MobNo"].ToString();
            //  txt_kind_att.Text = Dt.Rows[0]["ContactPerName1"].ToString();
        }

        ////show mail list to customer.
        DataTable dt3 = new DataTable();
        SqlDataAdapter sad3 = new SqlDataAdapter("select * from tblCustomerContactPerson where CustName='" + txtcustomerName.Text + "'", con);
        sad3.Fill(dt3);
        Grd_MAIL.DataSource = dt3;
        Grd_MAIL.DataBind();
        Grd_MAIL.EmptyDataText = "Record Not Found";

    }


    public void GetProducttableonJobNo()
    {
        try
        {

            SqlDataAdapter Da = new SqlDataAdapter("SELECT * FROM tblInvoiceDtls WHERE JobNo='" + txtjobNo.Text + "'", con);
            DataTable DTCOMP = new DataTable();
            Da.Fill(DTCOMP);

            int count = 1;
            if (DTCOMP.Rows.Count > 0)
            {
                if (Dt_Component.Columns.Count < 1)
                {
                    Show_Grid();
                }

                for (int i = 0; i < DTCOMP.Rows.Count; i++)
                {
                    Dt_Component.Rows.Add(count, DTCOMP.Rows[i]["Description"].ToString(), DTCOMP.Rows[i]["HSN_code"].ToString(), DTCOMP.Rows[i]["Tax"].ToString(), DTCOMP.Rows[i]["Qty"].ToString(), DTCOMP.Rows[i]["Units"].ToString(), DTCOMP.Rows[i]["Total"].ToString(), DTCOMP.Rows[i]["Rate"].ToString(), DTCOMP.Rows[i]["Discount"].ToString(), DTCOMP.Rows[i]["Ftotal"].ToString(), DTCOMP.Rows[i]["PrintDescription"].ToString());
                    count = count + 1;
                }
            }
            dgvProductDtl1.EmptyDataText = "No Data Found";
            dgvProductDtl1.DataSource = Dt_Component;
            dgvProductDtl1.DataBind();


        }
        catch (Exception ex)
        {

            throw;
        }

    }


    protected void txt_jobno_TextChanged(object sender, EventArgs e)
    {
        SqlDataAdapter Da = new SqlDataAdapter("SELECT Id,JobNo,MateName FROM tblInwardEntry WHERE JobNo ='" + txt_jobno.Text + "'", con);
        DataTable Dt = new DataTable();
        Da.Fill(Dt);
        txtpoduct.Text = Dt.Rows[0]["MateName"].ToString();


    }


    public void GetJobNO()
    {
        DataTable dt = new DataTable();
        SqlDataAdapter sd = new SqlDataAdapter("select JobNo from  tblInwardEntry  where CustName='" + txtcustomerName.Text + "'", con);
        sd.Fill(dt);

        if (dt.Rows.Count > 0)
        {
            txt_jobno.DataTextField = "JobNo";
            txt_jobno.DataSource = dt;
            txt_jobno.DataBind();
            txt_jobno.Items.Insert(0, new System.Web.UI.WebControls.ListItem("--Select--", "0"));
        }
        else
        {

        }
    }

    //protected void txt_InvoiceNo_SelectedIndexChanged(object sender, EventArgs e)
    //{

    //    DataTable dt = new DataTable();
    //    SqlDataAdapter sd = new SqlDataAdapter("select PoNo,PoDate,InvoiceDate from tblInvoiceHdr where InvoiceNo='" + txt_InvoiceNo.Text + "'", con);
    //    sd.Fill(dt);
    //    if (dt.Rows.Count > 0)
    //    {

    //        DateTime ffff1 = Convert.ToDateTime(dt.Rows[0]["PoDate"].ToString());
    //        txtpodate.Text = ffff1.ToString("yyyy-MM-dd");
    //        DateTime ffff2 = Convert.ToDateTime(dt.Rows[0]["InvoiceDate"].ToString());
    //        txtinvoicedate.Text = ffff2.ToString("yyyy-MM-dd");
    //        txtpono.Text = dt.Rows[0]["PoNo"].ToString();
    //        //txtpodate.Text = dt.Rows[0]["PoDate"].ToString();
    //        //getProducttable();
    //        //Added By shubham
    //        //try
    //        //{

    //        //    //SqlDataAdapter Da = new SqlDataAdapter("SELECT * FROM tblInvoiceDtls WHERE InvoiceNo='" + txt_InvoiceNo.Text + "'", con);
    //        SqlDataAdapter Da = new SqlDataAdapter("select * from tblInvoiceDtls   As TD  Inner join  tblInvoiceHdr  As TH  on TD.InvoiceId= TH.Id where  TH.InvoiceNo ='" + txt_InvoiceNo.Text + "'", con);
    //        DataTable DTCOMP = new DataTable();
    //        Da.Fill(DTCOMP);

    //        int count = 1;
    //        //    if (DTCOMP.Rows.Count > 0)
    //        //    {
    //        //        ViewState["RowNo"] = (int)ViewState["RowNo"] + 1;
    //        //        Dt_Component.Columns.AddRange(new DataColumn[12] { new DataColumn("id"), new DataColumn("JobNo"), new DataColumn("MateName"), new DataColumn("Description"), new DataColumn("printdescription"), new DataColumn("HSN/SAC"), new DataColumn("Tax"), new DataColumn("Quantity"), new DataColumn("Unit"), new DataColumn("Rate"), new DataColumn("Discount"), new DataColumn("Total Amount") });
    //        //        ViewState["QuotationComp"] = Dt_Itemsdetails;
    //        //        for (int i = 0; i < DTCOMP.Rows.Count; i++)
    //        //        {
    //        //            Dt_Component.Rows.Add(
    //        //         ViewState["RowNo"].ToString(),
    //        //      DTCOMP.Rows[i]["JobNo"].ToString(),
    //        // DTCOMP.Rows[i]["MateName"].ToString(),
    //        //  DTCOMP.Rows[i]["Description"].ToString(),
    //        //     DTCOMP.Rows[i]["printdescription"].ToString(),
    //        //     DTCOMP.Rows[i]["HSN"].ToString(),
    //        //  DTCOMP.Rows[i]["TaxPercentage"].ToString(),
    //        // DTCOMP.Rows[i]["Quntity"].ToString(),
    //        //  DTCOMP.Rows[i]["Unit"].ToString(),
    //        //  DTCOMP.Rows[i]["Rate"].ToString(),
    //        //   DTCOMP.Rows[i]["DiscountPercentage"].ToString(),
    //        //   DTCOMP.Rows[i]["Total"].ToString());
    //        //        }

    //        //        dgvProductDtl1.DataSource = Dt_Itemsdetails;
    //        //        dgvProductDtl1.DataBind();
    //        //        dgvProductDtl1.EmptyDataText = "Not Records Found";
    //        //        con.Close();

    //        //    }

    //        //    //try
    //        //    //{
    //        //    //    ///bind grid in automatic in customer po table.
    //        //    //    con.Open();
    //        //    //    DataTable SDt = new DataTable();
    //        //    //    SqlDataAdapter SDA = new SqlDataAdapter("select * from tblInvoiceDtls   As TD  Inner join  tblInvoiceHdr  As TH  on TD.InvoiceId= TH.Id where  TH.InvoiceNo ='" + txt_InvoiceNo.Text + "'", con);
    //        //    //    SDA.Fill(SDt);

    //        //    //    if (SDt.Rows.Count > 0)
    //        //    //    {
    //        //    //        ViewState["RowNo"] = 0;
    //        //    //        Dt_Itemsdetails.Columns.AddRange(new DataColumn[12] { new DataColumn("Id"),new DataColumn("JobNo"),
    //        //    //       new DataColumn("MateName"),
    //        //    //    new DataColumn("Description"),
    //        //    //    new DataColumn("printdescription"),
    //        //    //            new DataColumn("HSN"),
    //        //    //    new DataColumn("Rate"),  new DataColumn("Unit"),
    //        //    //    new DataColumn("Quantity"),  new DataColumn("TaxPercenteage"),
    //        //    //    new DataColumn("DiscountPercentage"),  new DataColumn("Total"),
    //        //    //  });

    //        //    //        ViewState["Invoicedetails"] = Dt_Itemsdetails;
    //        //    //        for (int i = 0; i < SDt.Rows.Count; i++)
    //        //    //        {
    //        //    //            Dt_Itemsdetails.Rows.Add(count, SDt.Rows[i]["JobNo"].ToString(), SDt.Rows[i]["MateName"].ToString(), SDt.Rows[i]["Description"].ToString(), SDt.Rows[i]["printdescription"].ToString(), SDt.Rows[i]["Hsn"].ToString(), SDt.Rows[i]["Rate"].ToString(), SDt.Rows[i]["Unit"].ToString(), SDt.Rows[i]["Quntity"].ToString(), SDt.Rows[i]["TaxPercentage"].ToString(), SDt.Rows[i]["DiscountPercentage"].ToString(), SDt.Rows[i]["Total"].ToString());

    //        //    //            count = count + 1;
    //        //    //        }
    //        //    //    }

    //        //    //    grd_getDTLS.DataSource = Dt_Itemsdetails;
    //        //    //    grd_getDTLS.DataBind();
    //        //    //    grd_getDTLS.EmptyDataText = "Not Records Found";
    //        //    //    con.Close();
    //        //    //}
    //        //    //catch (Exception ex)
    //        //    //{
    //        //    //    throw ex;
    //        //    //}




    //        //}
    //        //catch (Exception ex)
    //        //{

    //        //    throw ex;
    //        //}

    //        try
    //        {
    //            if (DTCOMP.Rows.Count > 0)
    //            {
    //                ViewState["RowNo"] = (int)ViewState["RowNo"] + 1;
    //                Dt_Component.Columns.AddRange(new DataColumn[12] { new DataColumn("id"), new DataColumn("JobNo"), new DataColumn("MateName"), new DataColumn("Description"), new DataColumn("printdescription"), new DataColumn("HSN/SAC"), new DataColumn("Tax"), new DataColumn("Quantity"), new DataColumn("Unit"), new DataColumn("Rate"), new DataColumn("Discount"), new DataColumn("Total Amount") });
    //                ViewState["QuotationComp"] = Dt_Component;
    //                for (int i = 0; i < DTCOMP.Rows.Count; i++)
    //                {
    //                    Dt_Component.Rows.Add(
    //                        ViewState["RowNo"].ToString(),
    //                        DTCOMP.Rows[i]["JobNo"].ToString(),
    //                        DTCOMP.Rows[i]["MateName"].ToString(),
    //                        DTCOMP.Rows[i]["Description"].ToString(),
    //                        DTCOMP.Rows[i]["printdescription"].ToString(),
    //                        DTCOMP.Rows[i]["HSN"].ToString(),
    //                        DTCOMP.Rows[i]["TaxPercentage"].ToString(),
    //                        DTCOMP.Rows[i]["Quntity"].ToString(),
    //                        DTCOMP.Rows[i]["Unit"].ToString(),
    //                        DTCOMP.Rows[i]["Rate"].ToString(),
    //                        DTCOMP.Rows[i]["DiscountPercentage"].ToString(),
    //                        DTCOMP.Rows[i]["Total"].ToString());
    //                }

    //                dgvProductDtl1.DataSource = Dt_Component;
    //                dgvProductDtl1.DataBind();
    //                dgvProductDtl1.EmptyDataText = "Not Records Found";
    //                con.Close();
    //            }
    //        }
    //        catch (Exception ex)
    //        {
    //            // Handle and log the exception
    //            // You can add code here to log or display the error message
    //            // ex.Message will contain the specific error message
    //        }



    //    }
    //    else
    //    {

    //    }

    //}


    //public void Getinvoiceno()
    //{

    //    DataTable dt = new DataTable();
    //    SqlDataAdapter sd = new SqlDataAdapter("select InvoiceNo from  tblInvoiceHdr  where CustName='" + txtcustomerName.Text + "'", con);
    //    sd.Fill(dt);
    //    if (dt.Rows.Count > 0)
    //    {
    //        txt_InvoiceNo.DataTextField = "InvoiceNo";
    //        txt_InvoiceNo.DataSource = dt;
    //        txt_InvoiceNo.DataBind();
    //        txt_InvoiceNo.Items.Insert(0, new System.Web.UI.WebControls.ListItem("--Select--", "0"));
    //        //txtpono.Text = dt.Rows[0]["PoNo"].ToString();
    //        //txtpodate.Text = dt.Rows[0]["PoDate"].ToString();


    //    }
    //    else
    //    {

    //    }

    //}


    public void Checmail()
    {
       
        foreach (GridViewRow g1 in Grd_MAIL.Rows)
        {
            string MAIL = (g1.FindControl("lblmultMail") as Label).Text;
            bool chkmail = (g1.FindControl("chkmail") as CheckBox).Checked;

            if (chkmail == false)
            {
                ScriptManager.RegisterStartupScript(this, this.GetType(), "select Mail_ID ", "scrollToElement();", true);
            }
            else
            {
                
                string ChallanNo = ToString();
                Send_Mail();

            }

        }
    }


    public void getProducttable()
    {
        dgvProductDtl.Visible = false;
        try
        {
            SqlCommand command = new SqlCommand();
            SqlDataAdapter adapter = new SqlDataAdapter();
            DataTable dt3 = new DataTable();
            command.Connection = con;
            command.CommandType = CommandType.StoredProcedure;
            command.CommandText = "Sp_Deliverychallan";
            command.Parameters.AddWithValue("@Action", "GetProducttable");
          //  command.Parameters.AddWithValue("@InvoiceNo", txt_InvoiceNo.Text);
            adapter = new SqlDataAdapter();
            adapter.SelectCommand = command;
            adapter.Fill(dt3);
            int count = 1;

            if (dt3.Rows.Count > 0)
            {
                //if (Dt_Component.Columns.Count < 1)
                //{
                //    ViewState["QuotationComp"] = dt3;
                //    Show_Grid();

                //}

                //for (int i = 0; i < dt3.Rows.Count; i++)
                //{
                //    Dt_Component.Rows.Add(count, dt3.Rows[i]["Description"].ToString(), dt3.Rows[i]["HSN_code"].ToString(), dt3.Rows[i]["Tax"].ToString(), dt3.Rows[i]["Qty"].ToString(), dt3.Rows[i]["Units"].ToString(), dt3.Rows[i]["Total"].ToString(), dt3.Rows[i]["Rate"].ToString(), dt3.Rows[i]["Discount"].ToString(), dt3.Rows[i]["Ftotal"].ToString(), dt3.Rows[i]["PrintDescription"].ToString());
                //    count = count + 1;
                //}

                ViewState["QuotationComp"] = dt3;
                dgvProductDtl1.EmptyDataText = "No Data Found";
                dgvProductDtl1.DataSource = dt3;
                dgvProductDtl1.DataBind();
            }
        }
        catch (Exception ex)
        {
            throw ex;
        }
    }

    //changes for  Testing
    protected void dgvProductDtl1_RowDataBound(object sender, GridViewRowEventArgs e)
    {
        if (e.Row.RowType == DataControlRowType.DataRow)
        {
            //cast the current row to a datarowview
            DataRowView row = e.Row.DataItem as DataRowView;

            Total += Convert.ToDecimal(DataBinder.Eval(e.Row.DataItem, "Total Amount"));
            txt_Subtotal.Text = Total.ToString("##.00");
        }

        decimal totaltax = 0;
        foreach (GridViewRow g1 in dgvProductDtl.Rows)
        {
            // string lbltotaltax = (g1.FindControl("txtTax") as Label).Text;
            // totaltax += Convert.ToDecimal(lbltotaltax);
        }
        txt_cgst9.Text = (totaltax / 2).ToString();
        txt_sgst9.Text = (totaltax / 2).ToString();

        txtigst.Text = (totaltax / 18).ToString();

        //txt_cgst9.Text = (totaltax \ 2);

        if (txtstatecode.Text == "27 MAHARASHTRA")
        {
            decimal Cgst_Total_Amt;
            if (string.IsNullOrEmpty(txt_Subtotal.Text))
            {
                Cgst_Total_Amt = 0;

            }
            else
            {
                decimal val1 = Convert.ToDecimal(txt_Subtotal.Text);

                Cgst_Total_Amt = (val1 * 9 / 100);
            }
            txt_cgst9.Text = Cgst_Total_Amt.ToString("##.00");

            decimal Sgst_Toatl_Amt;
            if (string.IsNullOrEmpty(txt_Subtotal.Text))
            {
                Sgst_Toatl_Amt = 0;

            }
            else
            {
                decimal val1 = Convert.ToDecimal(txt_Subtotal.Text);

                Sgst_Toatl_Amt = (val1 * 9 / 100);
            }
            txt_sgst9.Text = Sgst_Toatl_Amt.ToString("##.00");
        }
        else
        {
            //new for igst
            decimal Igst_Toatl_Amt;
            if (string.IsNullOrEmpty(txt_Subtotal.Text))
            {
                Igst_Toatl_Amt = 0;

            }
            else
            {
                decimal val1 = Convert.ToDecimal(txt_Subtotal.Text);

                Igst_Toatl_Amt = (val1 * 18 / 100);
            }
            txtigst.Text = Igst_Toatl_Amt.ToString("##.00");
        }

       

      


        decimal grnd_TOTAL;
        if (string.IsNullOrEmpty(txt_Subtotal.Text))
        {
            grnd_TOTAL = 0;
        }
        else
        {
            decimal val1 = Convert.ToDecimal(txt_Subtotal.Text);
            decimal val2 = Convert.ToDecimal(txt_cgst9.Text);
            decimal val3 = Convert.ToDecimal(txt_sgst9.Text);
            decimal val4 = Convert.ToDecimal(txtigst.Text);

            grnd_TOTAL = (val1 + val2 + val3 + val4);
        }
        txt_grandTotal.Text = grnd_TOTAL.ToString("##.00");

        string isNegative = "";

        try
        {
            string number = txt_grandTotal.Text;

            number = Convert.ToDouble(number).ToString();

            if (number.Contains("-"))
            {
                isNegative = "Minus ";
                number = number.Substring(1, number.Length - 1);

            }
            else
            {
                lbl_total_amt_Value.Text = isNegative + ConvertToWords(number);

            }
        }
        catch (Exception)
        {

            //throw;
        }
    }

    protected void dgvProductDtl1_RowEditing(object sender, GridViewEditEventArgs e)
    {
        dgvProductDtl1.EditIndex = e.NewEditIndex;
        dgvProductDtl1.DataSource = (DataTable)ViewState["QuotationComp"];
        dgvProductDtl1.DataBind();
        ScriptManager.RegisterStartupScript(this, this.GetType(), "Success", "scrollToElement();", true);
    }

    protected void gv_update1_Click(object sender, EventArgs e)
    {
        GridViewRow row = (sender as LinkButton).NamingContainer as GridViewRow;

        string Tax = ((TextBox)row.FindControl("txtTax")).Text;
        string Quntity = ((TextBox)row.FindControl("txtQuantity")).Text;
        string Rate = ((TextBox)row.FindControl("txtRate")).Text;
        string Discount = ((TextBox)row.FindControl("txt_Discount")).Text;
        string TotalAmount = ((Label)row.FindControl("lblTotalPrice")).Text;

        DataTable Dt = ViewState["QuotationComp"] as DataTable;

        Dt.Rows[row.RowIndex]["Tax"] = Tax;
        Dt.Rows[row.RowIndex]["Quantity"] = Quntity;
        Dt.Rows[row.RowIndex]["Rate"] = Rate;
        Dt.Rows[row.RowIndex]["Discount"] = Discount;
        Dt.Rows[row.RowIndex]["Total Amount"] = TotalAmount;

        Dt.AcceptChanges();

        ViewState["QuotationComp"] = Dt;
        dgvProductDtl1.EditIndex = -1;

        dgvProductDtl1.DataSource = (DataTable)ViewState["QuotationComp"];
        dgvProductDtl1.DataBind();


        decimal grd_total;
        if (!string.IsNullOrEmpty(txt_total_amount_Tbl.Text))
        {
            grd_total = 0;
        }
        else
        {
            //decimal val1 = Convert.ToDecimal(txt_Subtotal.Text);
            ////decimal val2 = Convert.ToDecimal(txt_cgst9.Text);
            ////decimal val3 = Convert.ToDecimal(txt_sgst9.Text);

            ////decimal val5 = Convert.ToDecimal(txt_round_off.Text);

            //grd_total = (val1);

            ////var grd = grd_total - val5;
            ///




            decimal val1 = Convert.ToDecimal(txt_Subtotal.Text);
            decimal val2 = Convert.ToDecimal(txt_cgst9.Text);
            decimal val3 = Convert.ToDecimal(txt_sgst9.Text);

            txt_grandTotal.Text = Convert.ToString(val1 + val2 + val3);
        }



        decimal totaltax = 0;
        decimal Total11177 = 0, Qty = 0, rate111111 = 0, totalrateqty = 0;
        foreach (GridViewRow g1 in dgvProductDtl1.Rows)
        {
            string lbltotaltax = (g1.FindControl("lbl_Tax") as Label).Text;
            string lblrate = (g1.FindControl("lbl_Rate") as Label).Text;
            string lblqty = (g1.FindControl("lbl_quntity_grd") as Label).Text;
            totaltax = Convert.ToDecimal(lbltotaltax);

            rate111111 = Convert.ToDecimal(lblrate);
            Qty = Convert.ToDecimal(lblqty);
            Total11177 = ((Qty * rate111111) * totaltax) / 100;
            totalrateqty += Total11177;
        }
        if (txtstatecode.Text == "27 MAHARASHTRA")
        {
            txt_cgst9.Text = Convert.ToDecimal(totalrateqty / 2).ToString("##.00");
            txt_sgst9.Text = Convert.ToDecimal(totalrateqty / 2).ToString("##.00");
            txtigst.Text = Convert.ToDecimal(00).ToString("##.00");
        }
        else
        {
            txt_cgst9.Text = Convert.ToDecimal(00).ToString("##.00");
            txt_sgst9.Text = Convert.ToDecimal(00).ToString("##.00");
            txtigst.Text = Convert.ToDecimal(totalrateqty).ToString("##.00");
        }
        ScriptManager.RegisterStartupScript(this, this.GetType(), "Success", "scrollToElement();", true);
    }

    //changes by shubham
    private void Show_Grid1()
    {

        try
        {

            ViewState["RowNo"] = (int)ViewState["RowNo"] + 1;
            //DataTable Dt = new DataTable();
            DataTable Dt = (DataTable)ViewState["QuotationComp"];
            Dt.Rows.Add(ViewState["RowNo"], txt_jobno.Text.Trim(), txtpoduct.Text, txt_discription_Tbl.Text.Trim(), txtprintdesc.Text, txt_hsn_Tbl.Text, txt_tax_Tbl.Text,
                txt_quntity_Tbl.Text, txt_unit_Tbl.Text, txt_rate_Tbl.Text, txt_discount_Tbl.Text, txt_total_amount_Tbl.Text);
            ViewState["QuotationComp"] = Dt;
            //txt_jobno.Text = string.Empty;
            txtpoduct.Text = string.Empty;
            txt_discription_Tbl.Text = string.Empty;
            txtprintdesc.Text = string.Empty;
            txt_hsn_Tbl.Text = string.Empty;
            txt_tax_Tbl.Text = string.Empty;
            txt_quntity_Tbl.Text = string.Empty;
            txt_unit_Tbl.Text = string.Empty;
            //txt_Total_Tbl.Text = string.Empty;
            txt_rate_Tbl.Text = string.Empty;
            txt_discount_Tbl.Text = string.Empty;
            txt_total_amount_Tbl.Text = string.Empty;
            txtprintdesc.Text = string.Empty;

            dgvProductDtl1.DataSource = (DataTable)ViewState["QuotationComp"];
            dgvProductDtl1.DataBind();

        }
        catch (Exception ex)
        {
            //  Block of code to handle errors
        }
    }

    protected void grd_getDTLS_RowDataBound(object sender, GridViewRowEventArgs e)
    {
        if (e.Row.RowType == DataControlRowType.DataRow)
        {
            //cast the current row to a datarowview
            DataRowView row = e.Row.DataItem as DataRowView;

            Total += Convert.ToDecimal(DataBinder.Eval(e.Row.DataItem, "Total"));
            txt_Subtotal.Text = Total.ToString("##.00");
        }


        decimal totaltax = 0;
        foreach (GridViewRow g1 in dgvProductDtl.Rows)
        {
            // string lbltotaltax = (g1.FindControl("txtTax") as Label).Text;
            // totaltax += Convert.ToDecimal(lbltotaltax);
        }
        txt_cgst9.Text = (totaltax / 2).ToString();
        txt_sgst9.Text = (totaltax / 2).ToString();

        //txt_cgst9.Text = (totaltax \ 2);

        decimal Cgst_Total_Amt;
        if (string.IsNullOrEmpty(txt_Subtotal.Text))
        {
            Cgst_Total_Amt = 0;

        }
        else
        {
            decimal val1 = Convert.ToDecimal(txt_Subtotal.Text);

            Cgst_Total_Amt = (val1 * 9 / 100);
        }
        txt_cgst9.Text = Cgst_Total_Amt.ToString("##.00");

        decimal Sgst_Toatl_Amt;
        if (string.IsNullOrEmpty(txt_Subtotal.Text))
        {
            Sgst_Toatl_Amt = 0;

        }
        else
        {
            decimal val1 = Convert.ToDecimal(txt_Subtotal.Text);

            Sgst_Toatl_Amt = (val1 * 9 / 100);
        }
        txt_sgst9.Text = Sgst_Toatl_Amt.ToString("##.00");

        decimal grnd_TOTAL;
        if (string.IsNullOrEmpty(txt_Subtotal.Text))
        {
            grnd_TOTAL = 0;
        }
        else
        {
            decimal val1 = Convert.ToDecimal(txt_Subtotal.Text);
            decimal val2 = Convert.ToDecimal(txt_cgst9.Text);
            decimal val3 = Convert.ToDecimal(txt_sgst9.Text);

            grnd_TOTAL = (val1 + val2 + val3);
        }
        txt_grandTotal.Text = grnd_TOTAL.ToString("##.00");

        string isNegative = "";

        try
        {
            string number = txt_grandTotal.Text;

            number = Convert.ToDouble(number).ToString();

            if (number.Contains("-"))
            {
                isNegative = "Minus ";
                number = number.Substring(1, number.Length - 1);

            }
            else
            {
                lbl_total_amt_Value.Text = isNegative + ConvertToWords(number);

            }
        }
        catch (Exception)
        {

            //throw;
        }
    }
}





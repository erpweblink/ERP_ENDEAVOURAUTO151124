using iTextSharp.text;
using iTextSharp.text.pdf;
using iTextSharp.tool.xml;
using System;
using System.Collections.Generic;
using System.Configuration;
using System.Data;
using System.Data.SqlClient;
using System.IO;
using System.Linq;
using System.Net.Mail;
using System.Net.Mime;
using System.Security.Cryptography;
using System.Text;
using System.Web;
using System.Web.UI;
using System.Web.UI.WebControls;
using System.Xml.Linq;

public partial class Admin_PurchaseOrder : System.Web.UI.Page
{
    SqlConnection Conn = new SqlConnection(ConfigurationManager.ConnectionStrings["ConnectionString"].ConnectionString);

    DataTable Dt_Items = new DataTable();
    string ID = "";
    string MyString;
    string id = "";
    string chkupdate;
    decimal tax;
    DataTable Dt_Mail = new DataTable();
    protected void Page_Load(object sender, EventArgs e)
    {
        if (!IsPostBack)
        {
            POautogenerated();

            ViewState["RowNo"] = 0;
            Dt_Mail.Columns.AddRange(new DataColumn[3] { new DataColumn("mailid"), new DataColumn("designation"), new DataColumn("mailtext") });
            ViewState["MULTMail"] = Dt_Mail;

            ViewState["RowNo"] = 0;
            Dt_Items.Columns.AddRange(new DataColumn[9] { new DataColumn("id"), new DataColumn("Discription"), new DataColumn("HSN/SAC"), new DataColumn("Tax"), new DataColumn("Quntity"), new DataColumn("Unit"), new DataColumn("Rate"), new DataColumn("Discount"), new DataColumn("Total Amount") });

            ViewState["PurchaesProduct"] = Dt_Items;

            if (Request.QueryString["Id"] != null)
            {
                ID = Decrypt(Request.QueryString["Id"]).ToString();
                //ID = Request.QueryString["Id"].ToString();
                hdnID.Value = ID;
                Load_Record();
            }
            if (Request.QueryString["Pono"] != null)
            {
                id = Decrypt(Request.QueryString["Pono"]).ToString();
                ReportLoad();
                Readonlytext();
            }
        }
    }

    protected void POautogenerated()
    {
        SqlDataAdapter ad = new SqlDataAdapter("SELECT max([Id]) as maxid FROM [tblPurchaseOrderHdr]", Conn);
        DataTable dt = new DataTable();
        ad.Fill(dt);
        if (dt.Rows.Count > 0)
        {
            int maxid = dt.Rows[0]["maxid"].ToString() == "" ? 0 : Convert.ToInt32(dt.Rows[0]["maxid"].ToString());
            txt_po_no.Text = "PO-" + (maxid + 1).ToString();
        }
        else
        {
            txt_po_no.Text = string.Empty;
        }
    }

    protected void Readonlytext()
    {
        tbl.Visible = false;
        btn_Cancel.Text = "Close";
        txt_vendor_name.ReadOnly = true;
        //txt_vehicel_no.ReadOnly = true;
        txt_term_4.ReadOnly = true;
        txt_term_3.ReadOnly = true;
        txt_term_2.ReadOnly = true;
        txt_term_1.ReadOnly = true;
        txt_condition_1.ReadOnly = true;
        txt_condition_2.ReadOnly = true;
        txt_condition_3.ReadOnly = true;
        txt_condition_4.ReadOnly = true;
        txt_round_off.ReadOnly = true;
        txt_ref_no.ReadOnly = true;
        txt_mobile_no.ReadOnly = true;
        txt_delivery_address.ReadOnly = true;
        txt_email_id.ReadOnly = true;
        txt_kind_att.Enabled = false;
        //txt_kind_att.ReadOnly = true;
        txt_po_date.ReadOnly = true;
        txt_po_no.ReadOnly = true;
        txt_pay_term.ReadOnly = true;
        txt_gst_no.ReadOnly = true;
        txt_email_id.Visible = false;
        Lnkbtn_addmail.Visible = false;
        btn_save.Visible = false;
        Grd_MAIL.Columns[2].Visible = false;
        gvPurchaseRecord.Columns[9].Visible = false;
        headerreport.InnerText = "Vendor PO Report";
        mailcheck.Visible = false;
    }

    protected void ReportLoad()
    {
        DataTable Dt = new DataTable();
        SqlDataAdapter da = new SqlDataAdapter("select * from tblPurchaseOrderHdr where Pono='" + id + "'", Conn);
        da.Fill(Dt);

        if (Dt.Rows.Count > 0)
        {
            txt_po_no.Enabled = false;
            // btn_save.Text = "Update";
            txt_vendor_name.Text = Dt.Rows[0]["VendorName"].ToString();
            txt_po_no.Text = Dt.Rows[0]["Pono"].ToString();
            DateTime ffff1 = Convert.ToDateTime(Dt.Rows[0]["PoDate"].ToString());
            txt_po_date.Text = ffff1.ToString("yyyy-MM-dd");
            txt_ref_no.Text = Dt.Rows[0]["RefNo"].ToString();
            txt_mobile_no.Text = Dt.Rows[0]["Mobileno"].ToString();
            txt_delivery_address.Text = Dt.Rows[0]["DeliveryAddress"].ToString();
            txt_kind_att.Text = Dt.Rows[0]["KindAtt"].ToString();
            txt_email_id.Text = Dt.Rows[0]["EmailId"].ToString();
            txt_gst_no.Text = Dt.Rows[0]["GstNo"].ToString();
            // txt_vehicel_no.Text = Dt.Rows[0]["VehicelNo"].ToString();
            txt_pay_term.Text = Dt.Rows[0]["PayTerm"].ToString();

            txt_cgst_amt.Text = Dt.Rows[0]["Cgst"].ToString();
            txt_sgst_amt.Text = Dt.Rows[0]["Sgst"].ToString();
            txt_igst_amt.Text = Dt.Rows[0]["Igst"].ToString();
            //txt_total.Text = Dt.Rows[0]["AllTotalPrice"].ToString();
            lbl_Amount_In_Word.Text = Dt.Rows[0]["TotalInWord"].ToString();
            txt_round_off.Text = Dt.Rows[0]["RoundOff"].ToString();
            txt_grand_total.Text = Dt.Rows[0]["GrandTotal"].ToString();

            string str = Dt.Rows[0]["Term_Condition_1"].ToString();
            string str1 = Dt.Rows[0]["Term_Condition_2"].ToString();
            string str2 = Dt.Rows[0]["Term_Condition_3"].ToString();
            string str3 = Dt.Rows[0]["Term_Condition_4"].ToString();
            string[] arrstr = str.ToString().Split('-');
            string[] arrstr1 = str1.ToString().Split('-');
            string[] arrstr2 = str2.ToString().Split('-');
            string[] arrstr3 = str3.ToString().Split('-');

            if (arrstr.Length > 0)
            {
                txt_term_1.Text = arrstr[0].ToString();
                txt_condition_1.Text = arrstr[1].ToString();
            }

            if (arrstr1.Length > 0)
            {
                txt_term_2.Text = arrstr1[0].ToString();
                txt_condition_2.Text = arrstr1[1].ToString();
            }

            if (arrstr2.Length > 0)
            {
                txt_term_3.Text = arrstr2[0].ToString();
                txt_condition_3.Text = arrstr2[1].ToString();
            }
            if (arrstr3.Length > 0)
            {
                txt_term_4.Text = arrstr3[0].ToString();
                txt_condition_4.Text = arrstr3[1].ToString();
            }
        }
        DataTable Dtproduct1 = new DataTable();
        SqlDataAdapter daa = new SqlDataAdapter("SELECT * FROM vw_VendorPO WHERE Pono='" + id + "' ", Conn);
        daa.Fill(Dtproduct1);

        int count = 1;
        if (Dtproduct1.Rows.Count > 0)
        {
            if (Dt_Items.Columns.Count < 1)
            {
                Show_Grid();
            }

            for (int i = 0; i < Dtproduct1.Rows.Count; i++)
            {
                Dt_Items.Rows.Add(count, Dtproduct1.Rows[i]["Description"].ToString(), Dtproduct1.Rows[i]["Hsn_Sac"].ToString(), Dtproduct1.Rows[i]["TaxPercenteage"].ToString(), Dtproduct1.Rows[i]["Quantity"].ToString(), Dtproduct1.Rows[i]["Unit"].ToString(), Dtproduct1.Rows[i]["Rate"].ToString(), Dtproduct1.Rows[i]["DiscountPercentage"].ToString(), Dtproduct1.Rows[i]["Total"].ToString());
                count = count + 1;
            }
        }

        gvPurchaseRecord.DataSource = Dt_Items;
        gvPurchaseRecord.DataBind();


        SqlDataAdapter Sda = new SqlDataAdapter("SELECT * FROM tblVendorPoMail WHERE PoNo='" + txt_po_no.Text + "'", Conn);
        DataTable Sdt = new DataTable();
        Sda.Fill(Sdt);

        //int count = 1;
        //if (Sdt.Rows.Count > 0)
        //{
        //    if (Dt_Mail.Columns.Count < 1)
        //    {
        //        ShowMAILRecord();
        //    }

        //    for (int i = 0; i < Sdt.Rows.Count; i++)
        //    {
        //        Dt_Mail.Rows.Add(count, Sdt.Rows[i]["Email"].ToString());
        //        count = count + 1;
        //    }
        //}
        Grd_MAIL.DataSource = Sdt;
        Grd_MAIL.DataBind();
        DataTable dt1 = new DataTable();
        SqlDataAdapter sad1 = new SqlDataAdapter("select * from tblVendorContact where vendorName='" + txt_vendor_name.Text + "'", Conn);
        sad1.Fill(dt1);
        //txt_kind_att.DataValueField = "vend_id";
        txt_kind_att.DataTextField = "ContactPerName";
        txt_kind_att.DataSource = dt1;
        txt_kind_att.DataBind();
        txt_kind_att.Text = Dt.Rows[0]["KindAtt"].ToString();

        ///Email Bind
        SqlDataAdapter Sdaa = new SqlDataAdapter("SELECT * FROM tblVendorContact WHERE vendorName='" + txt_vendor_name.Text + "'", Conn);
        DataTable Sdtt = new DataTable();
        Sdaa.Fill(Sdtt);
        Grd_MAIL.DataSource = Sdtt;
        Grd_MAIL.DataBind();

    }

    public string Decrypt(string cipherText)
    {
        string EncryptionKey = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ";
        cipherText = cipherText.Replace(" ", "+");
        byte[] cipherBytes = Convert.FromBase64String(cipherText);
        using (Aes encryptor = Aes.Create())
        {
            Rfc2898DeriveBytes pdb = new Rfc2898DeriveBytes(EncryptionKey, new byte[] {
            0x49, 0x76, 0x61, 0x6e, 0x20, 0x4d, 0x65, 0x64, 0x76, 0x65, 0x64, 0x65, 0x76
        });
            encryptor.Key = pdb.GetBytes(32);
            encryptor.IV = pdb.GetBytes(16);
            using (MemoryStream ms = new MemoryStream())
            {
                using (CryptoStream cs = new CryptoStream(ms, encryptor.CreateDecryptor(), CryptoStreamMode.Write))
                {
                    cs.Write(cipherBytes, 0, cipherBytes.Length);
                    cs.Close();
                }
                cipherText = Encoding.Unicode.GetString(ms.ToArray());
            }
        }
        return cipherText;
    }

    [System.Web.Script.Services.ScriptMethod()]
    [System.Web.Services.WebMethod]
    public static List<string> GetvendorList(string prefixText, int count)
    {
        return AutoFillvendorlist(prefixText);
    }

    public static List<string> AutoFillvendorlist(string prefixText)
    {
        using (SqlConnection con = new SqlConnection())
        {
            con.ConnectionString = ConfigurationManager.ConnectionStrings["connectionString"].ConnectionString;

            using (SqlCommand com = new SqlCommand())
            {
                com.CommandText = "select DISTINCT VendorName,VendorId from tblVendor where " + "VendorName like @Search + '%'";

                com.Parameters.AddWithValue("@Search", prefixText);
                com.Connection = con;
                con.Open();
                List<string> VendorName = new List<string>();

                using (SqlDataReader sdr = com.ExecuteReader())
                {
                    while (sdr.Read())
                    {
                        VendorName.Add(sdr["VendorName"].ToString());

                    }
                }
                con.Close();
                return VendorName;
            }

        }
    }

    private void Load_Record()
    {
        DataTable Dt = new DataTable();
        SqlDataAdapter da = new SqlDataAdapter("select tblPurchaseOrderHdr.Id,VendorName,Pono,PoDate,RefNo,Mobileno,KindAtt,DeliveryAddress,EmailId,GstNo,VehicelNo,PayTerm,Cgst,Sgst,Igst,AllTotalPrice,TotalInWord, RoundOff, GrandTotal, Term_Condition_1, Term_Condition_2, Term_Condition_3, Term_Condition_4,statecode, Description, Hsn_Sac, TaxPercenteage, Quantity, Unit, Rate, DiscountPercentage, Total from tblPurchaseOrderHdr INNER JOIN tblPurchaseOrderDtls ON tblPurchaseOrderHdr.Id = tblPurchaseOrderDtls.PurchaseId WHERE tblPurchaseOrderHdr.Id='" + hdnID.Value + "'", Conn);
        da.Fill(Dt);

        if (Dt.Rows.Count > 0)
        {
            txt_po_no.Enabled = false;
            btn_save.Text = "Update";
            txt_vendor_name.Text = Dt.Rows[0]["VendorName"].ToString();
            txt_po_no.Text = Dt.Rows[0]["Pono"].ToString();
            DateTime ffff1 = Convert.ToDateTime(Dt.Rows[0]["PoDate"].ToString());
            txt_po_date.Text = ffff1.ToString("yyyy-MM-dd");
            txt_ref_no.Text = Dt.Rows[0]["RefNo"].ToString();
            txt_mobile_no.Text = Dt.Rows[0]["Mobileno"].ToString();
            txtstatecode.Text = Dt.Rows[0]["statecode"].ToString();
            txt_delivery_address.Text = Dt.Rows[0]["DeliveryAddress"].ToString();
            txt_email_id.Text = Dt.Rows[0]["EmailId"].ToString();
            txt_gst_no.Text = Dt.Rows[0]["GstNo"].ToString();
            txt_pay_term.Text = Dt.Rows[0]["PayTerm"].ToString();
            txt_cgst_amt.Text = Dt.Rows[0]["Cgst"].ToString();
            txt_sgst_amt.Text = Dt.Rows[0]["Sgst"].ToString();
            txt_igst_amt.Text = Dt.Rows[0]["Igst"].ToString();
            //txt_total.Text = Dt.Rows[0]["AllTotalPrice"].ToString();
            lbl_Amount_In_Word.Text = Dt.Rows[0]["TotalInWord"].ToString();
            txt_round_off.Text = Dt.Rows[0]["RoundOff"].ToString();
            txt_grand_total.Text = Dt.Rows[0]["GrandTotal"].ToString();

            string str = Dt.Rows[0]["Term_Condition_1"].ToString();
            string str1 = Dt.Rows[0]["Term_Condition_2"].ToString();
            string str2 = Dt.Rows[0]["Term_Condition_3"].ToString();
            string str3 = Dt.Rows[0]["Term_Condition_4"].ToString();
            string[] arrstr = str.ToString().Split('-');
            string[] arrstr1 = str1.ToString().Split('-');
            string[] arrstr2 = str2.ToString().Split('-');
            string[] arrstr3 = str3.ToString().Split('-');

            if (arrstr.Length > 0)
            {
                txt_term_1.Text = arrstr[0].ToString();
                txt_condition_1.Text = arrstr[1].ToString();
            }

            if (arrstr1.Length > 0)
            {
                txt_term_2.Text = arrstr1[0].ToString();
                txt_condition_2.Text = arrstr1[1].ToString();
            }

            if (arrstr2.Length > 0)
            {
                txt_term_3.Text = arrstr2[0].ToString();
                txt_condition_3.Text = arrstr2[1].ToString();
            }
            if (arrstr3.Length > 0)
            {
                txt_term_4.Text = arrstr3[0].ToString();
                txt_condition_4.Text = arrstr3[1].ToString();
            }
            DataTable Dtproduct = new DataTable();
            SqlDataAdapter daa = new SqlDataAdapter("SELECT Description,Hsn_Sac,TaxPercenteage,Quantity,Unit,Rate,DiscountPercentage,Total FROM tblPurchaseOrderDtls WHERE Id='" + hdnID.Value + "' ", Conn);
            da.Fill(Dtproduct);

            int count = 1;
            if (Dtproduct.Rows.Count > 0)
            {
                if (Dt_Items.Columns.Count < 1)
                {
                    Show_Grid();
                }

                for (int i = 0; i < Dtproduct.Rows.Count; i++)
                {
                    Dt_Items.Rows.Add(count, Dtproduct.Rows[i]["Description"].ToString(), Dtproduct.Rows[i]["Hsn_Sac"].ToString(), Dtproduct.Rows[i]["TaxPercenteage"].ToString(), Dtproduct.Rows[i]["Quantity"].ToString(), Dtproduct.Rows[i]["Unit"].ToString(), Dtproduct.Rows[i]["Rate"].ToString(), Dtproduct.Rows[i]["DiscountPercentage"].ToString(), Dtproduct.Rows[i]["Total"].ToString());
                    count = count + 1;
                }
            }

            gvPurchaseRecord.DataSource = Dt_Items;
            gvPurchaseRecord.DataBind();

            SqlDataAdapter Sda = new SqlDataAdapter("SELECT * FROM tblVendorPoMail WHERE PoNo='" + txt_po_no.Text + "'", Conn);
            DataTable Sdt = new DataTable();
            Sda.Fill(Sdt);
            Grd_MAIL.DataSource = Sdt;
            Grd_MAIL.DataBind();


            DataTable dt1 = new DataTable();
            SqlDataAdapter sad1 = new SqlDataAdapter("select * from tblVendorContact where vendorName='" + txt_vendor_name.Text + "'", Conn);
            sad1.Fill(dt1);
            //txt_kind_att.DataValueField = "vend_id";
            txt_kind_att.DataTextField = "ContactPerName";
            txt_kind_att.DataSource = dt1;
            txt_kind_att.DataBind();
            //txt_kind_att.Text = Dt.Rows[0]["KindAtt"].ToString();

            ///Email Bind
            SqlDataAdapter Sdaa = new SqlDataAdapter("SELECT * FROM tblVendorContact WHERE vendorName='" + txt_vendor_name.Text + "'", Conn);
            DataTable Sdtt = new DataTable();
            Sdaa.Fill(Sdtt);
            Grd_MAIL.DataSource = Sdtt;
            Grd_MAIL.DataBind();

        }
    }

    protected void LoadDtls()
    {

    }

    private void Save_Record()
    {
        string CretedBy = Session["adminname"].ToString();
        //Conn.Open();
        int id;

        if (btn_save.Text == "Update")
        {
            SqlCommand Cmd = new SqlCommand("UPDATE tblPurchaseOrderHdr SET VendorName=@VendorName,Pono=@Pono,PoDate=@PoDate,RefNo=@RefNo,Mobileno=@Mobileno,KindAtt=@KindAtt,DeliveryAddress=@DeliveryAddress,EmailId=@EmailId,GstNo=@GstNo,Cgst=@Cgst,Sgst=@Sgst,Igst=@Igst,AllTotalPrice=@AllTotalPrice,RoundOff=@RoundOff,GrandTotal=@GrandTotal,TotalInWord=@TotalInWord,Is_Deleted=@Is_Deleted,PayTerm=@PayTerm,Term_Condition_1=@Term_Condition_1,Term_Condition_2=@Term_Condition_2,Term_Condition_3=@Term_Condition_3,Term_Condition_4=@Term_Condition_4,UpdatedBy=@UpdatedBy,UpdatedOn=@UpdatedOn WHERE Id='" + hdnID.Value + "'", Conn);
            Cmd.Parameters.AddWithValue("@VendorName", txt_vendor_name.Text);
            Cmd.Parameters.AddWithValue("@Pono", txt_po_no.Text);
            Cmd.Parameters.AddWithValue("@PoDate", txt_po_date.Text);
            Cmd.Parameters.AddWithValue("@RefNo", txt_ref_no.Text);
            Cmd.Parameters.AddWithValue("@Mobileno", txt_mobile_no.Text);
            Cmd.Parameters.AddWithValue("@KindAtt", txt_kind_att.SelectedItem.Text);
            Cmd.Parameters.AddWithValue("@DeliveryAddress", txt_delivery_address.Text);
            Cmd.Parameters.AddWithValue("@EmailId", txt_email_id.Text);
            Cmd.Parameters.AddWithValue("@Is_Deleted", '0');
            Cmd.Parameters.AddWithValue("@GstNo", txt_gst_no.Text);
            //Cmd.Parameters.AddWithValue("@VehicelNo", txt_vehicel_no.Text);
            Cmd.Parameters.AddWithValue("@PayTerm", txt_pay_term.Text);
            Cmd.Parameters.AddWithValue("@Cgst", txt_cgst_amt.Text);
            Cmd.Parameters.AddWithValue("@Sgst", txt_sgst_amt.Text);
            Cmd.Parameters.AddWithValue("@Igst", txt_igst_amt.Text);
            Cmd.Parameters.AddWithValue("@StateCode", txtstatecode.Text);
            Cmd.Parameters.AddWithValue("@AllTotalPrice", txt_total.Text);
            Cmd.Parameters.AddWithValue("@RoundOff", txt_round_off.Text);
            Cmd.Parameters.AddWithValue("@UpdatedBy", CretedBy);
            Cmd.Parameters.AddWithValue("@UpdatedOn", DateTime.Now);
            Cmd.Parameters.AddWithValue("@GrandTotal", txt_grand_total.Text);
            Cmd.Parameters.AddWithValue("@TotalInWord", lbl_Amount_In_Word.Text);
            Cmd.Parameters.AddWithValue("@Term_Condition_1", txt_term_1.Text + "-" + txt_condition_1.Text);
            Cmd.Parameters.AddWithValue("@Term_Condition_2", txt_term_2.Text + "-" + txt_condition_2.Text);
            Cmd.Parameters.AddWithValue("@Term_Condition_3", txt_term_3.Text + "-" + txt_condition_3.Text);
            Cmd.Parameters.AddWithValue("@Term_Condition_4", txt_term_4.Text + "-" + txt_condition_4.Text);

            Conn.Open();
            Cmd.ExecuteNonQuery();
            Conn.Close();

            SqlCommand cmddelete = new SqlCommand("DELETE FROM tblPurchaseOrderDtls WHERE PurchaseId=@PurchaseId", Conn);
            cmddelete.Parameters.AddWithValue("@PurchaseId", hdnID.Value);
            Conn.Open();
            cmddelete.ExecuteNonQuery();
            Conn.Close();

            foreach (GridViewRow g2 in gvPurchaseRecord.Rows)
            {
                string Discription = (g2.FindControl("txt_discription_grd") as Label).Text;
                string HSN = (g2.FindControl("txt_hsn_grd") as Label).Text;
                string Tax = (g2.FindControl("lbl_tax_grd") as Label).Text;
                string Quntity = (g2.FindControl("lbl_quntity_grd") as Label).Text;
                string Unit = (g2.FindControl("txt_unit_grd") as Label).Text;
                string Rate = (g2.FindControl("lbl_rate_grd") as Label).Text;
                string Discount = (g2.FindControl("lbl_discount_grd") as Label).Text;
                string Total_Amount = (g2.FindControl("lbl_total_amount_grd") as Label).Text;

                SqlCommand Cmd1 = new SqlCommand("INSERT INTO tblPurchaseOrderDtls (PurchaseId,Description,Hsn_Sac,TaxPercenteage,Quantity,Unit,Rate,DiscountPercentage,Total) " +
                    "VALUES('" + hdnID.Value + "','" + Discription + "','" + HSN + "','" + Tax + "','" + Quntity + "','" + Unit + "','" + Rate + "','" + Discount + "','" + Total_Amount + "')", Conn);
                Conn.Open();
                Cmd1.ExecuteNonQuery();
                Conn.Close();
            }

            //SqlDataAdapter Sda = new SqlDataAdapter("SELECT * FROM tblVendorPoMail WHERE PoNo='" + txt_po_no.Text + "'", Conn);
            //DataTable DTMAIL = new DataTable();
            //Sda.Fill(DTMAIL);
            ////if (DTMAIL.Rows.Count == Grd_MAIL.Rows.Count)
            ////{
            //foreach (GridViewRow g1 in Grd_MAIL.Rows)
            //{
            //    string MAIL = (g1.FindControl("lblmultMail") as Label).Text;
            //    string Designation = (g1.FindControl("lblDesignation") as Label).Text;
            //    bool chkmail = (g1.FindControl("chkmail") as CheckBox).Checked;

            //    SqlCommand cmdtable = new SqlCommand("UPDATE tblVendorPoMail SET Email=@Email, PoNo=@PoNo, PurchaseId=@PurchaseId,chkEmail=@chkEmail,Designation=@Designation WHERE  PoNo=@PoNo AND Email=@Email", Conn);
            //    cmdtable.Parameters.AddWithValue("@PoNo", txt_po_no.Text);
            //    cmdtable.Parameters.AddWithValue("@Email", MAIL);
            //    cmdtable.Parameters.AddWithValue("@PurchaseId", hdnID.Value);
            //    cmdtable.Parameters.AddWithValue("@chkEmail", chkmail);
            //    cmdtable.Parameters.AddWithValue("@Designation", Designation);
            //    Conn.Open();
            //    cmdtable.ExecuteNonQuery();
            //    Conn.Close();
            //}
            ClientScript.RegisterStartupScript(this.GetType(), "alert", "HideLabel('Data Updated Sucessfully');", true);
        }
        else
        {
            if (gvPurchaseRecord.Rows.Count > 0)
            {

                try
                {
                    SqlCommand Cmd = new SqlCommand("SP_PurchaseOrder", Conn);
                    Cmd.CommandType = CommandType.StoredProcedure;

                    Cmd.Parameters.AddWithValue("@VendorName", txt_vendor_name.Text);
                    Cmd.Parameters.AddWithValue("@Pono", txt_po_no.Text);
                    Cmd.Parameters.AddWithValue("@PoDate", txt_po_date.Text);
                    Cmd.Parameters.AddWithValue("@RefNo", txt_ref_no.Text);
                    Cmd.Parameters.AddWithValue("@Mobileno", txt_mobile_no.Text);
                    Cmd.Parameters.AddWithValue("@KindAtt", txt_kind_att.SelectedItem.Text);
                    Cmd.Parameters.AddWithValue("@DeliveryAddress", txt_delivery_address.Text);
                    Cmd.Parameters.AddWithValue("@EmailId", txt_email_id.Text);
                    Cmd.Parameters.AddWithValue("@GstNo", txt_gst_no.Text);
                    //Cmd.Parameters.AddWithValue("@VehicelNo", txt_vehicel_no.Text);
                    Cmd.Parameters.AddWithValue("@PayTerm", txt_pay_term.Text);
                    Cmd.Parameters.AddWithValue("@Cgst", txt_cgst_amt.Text);
                    Cmd.Parameters.AddWithValue("@Sgst", txt_sgst_amt.Text);
                    Cmd.Parameters.AddWithValue("@Igst", txt_igst_amt.Text);
                    Cmd.Parameters.AddWithValue("@StateCode", txtstatecode.Text);
                    Cmd.Parameters.AddWithValue("@AllTotalPrice", txt_total.Text);
                    Cmd.Parameters.AddWithValue("@TotalInWord", lbl_Amount_In_Word.Text);
                    Cmd.Parameters.AddWithValue("@RoundOff", txt_round_off.Text);
                    Cmd.Parameters.AddWithValue("@GrandTotal", txt_grand_total.Text);
                    Cmd.Parameters.AddWithValue("@Term_Condition_1", txt_term_1.Text + "-" + txt_condition_1.Text);
                    Cmd.Parameters.AddWithValue("@Term_Condition_2", txt_term_2.Text + "-" + txt_condition_2.Text);
                    Cmd.Parameters.AddWithValue("@Term_Condition_3", txt_term_3.Text + "-" + txt_condition_3.Text);
                    Cmd.Parameters.AddWithValue("@Term_Condition_4", txt_term_4.Text + "-" + txt_condition_4.Text);
                    Cmd.Parameters.AddWithValue("@Is_Deleted", '0');
                    Cmd.Parameters.AddWithValue("@CreatedBy", CretedBy);
                    Cmd.Parameters.AddWithValue("@CreatedOn", DateTime.Now);
                    Cmd.Parameters.Add("@purchase_id", SqlDbType.Int).Direction = ParameterDirection.Output;
                    Conn.Open();
                    Cmd.ExecuteNonQuery();
                    Conn.Close();
                    id = Convert.ToInt32(Cmd.Parameters["@purchase_id"].Value);

                    foreach (GridViewRow g1 in gvPurchaseRecord.Rows)
                    {
                        string Discription = (g1.FindControl("txt_discription_grd") as Label).Text;
                        string HSN = (g1.FindControl("txt_hsn_grd") as Label).Text;
                        string Tax = (g1.FindControl("lbl_tax_grd") as Label).Text;
                        string Quntity = (g1.FindControl("lbl_quntity_grd") as Label).Text;
                        string Unit = (g1.FindControl("txt_unit_grd") as Label).Text;
                        string Rate = (g1.FindControl("lbl_rate_grd") as Label).Text;
                        string Discount = (g1.FindControl("lbl_discount_grd") as Label).Text;
                        string Total_Amount = (g1.FindControl("lbl_total_amount_grd") as Label).Text;

                        SqlCommand Cmd1 = new SqlCommand("INSERT INTO tblPurchaseOrderDtls (PurchaseId,Description,Hsn_Sac,TaxPercenteage,Quantity,Unit,Rate,DiscountPercentage,Total) " +
                            "VALUES('" + id + "','" + Discription + "','" + HSN + "','" + Tax + "','" + Quntity + "','" + Unit + "','" + Rate + "','" + Discount + "','" + Total_Amount + "')", Conn);
                        Conn.Open();
                        Cmd1.ExecuteNonQuery();
                        Conn.Close();
                    }

                    //foreach (GridViewRow g1 in Grd_MAIL.Rows)
                    //{
                    //    string MAIL = (g1.FindControl("lblmultMail") as Label).Text;
                    //    bool chkmail = (g1.FindControl("chkmail") as CheckBox).Checked;
                    //    string Designation = (g1.FindControl("lblDesignation") as Label).Text;

                    //    SqlCommand cmdtable = new SqlCommand("insert into tblVendorPoMail(PurchaseId,PoNo,Email,chkEmail,Designation) values(@PurchaseId,@PoNo,@Email,@chkEmail,@Designation)", Conn);
                    //    cmdtable.Parameters.AddWithValue("@PurchaseId", id);
                    //    cmdtable.Parameters.AddWithValue("@PoNo", txt_po_no.Text);
                    //    cmdtable.Parameters.AddWithValue("@Email", MAIL);
                    //    cmdtable.Parameters.AddWithValue("@chkEmail", chkmail);
                    //    cmdtable.Parameters.AddWithValue("@Designation", Designation);
                    //    Conn.Open();
                    //    cmdtable.ExecuteNonQuery();
                    //    Conn.Close();
                    //}

                    ClientScript.RegisterStartupScript(this.GetType(), "alert", "HideLabel('Data Save Sucessfully');", true);
                }
                catch (Exception)
                {
                    throw;
                }
            }
            else
            {
                ScriptManager.RegisterStartupScript(this, this.GetType(), "Alert", "alert('Please fill Atleast One Product Details !!!');", true);
            }
        }
    }

    private void Show_Grid()
    {
        ViewState["RowNo"] = (int)ViewState["RowNo"] + 1;
        DataTable Dt = (DataTable)ViewState["PurchaesProduct"];
        Dt.Rows.Add(ViewState["RowNo"], txt_discription.Text.Trim(), txt_hsn.Text, txt_tax.Text, txt_quntity.Text, txt_unit.Text, txt_rate.Text, txt_discount.Text, txt_total_amount.Text);
        ViewState["PurchaesProduct"] = Dt;

        txt_discription.Text = string.Empty;
        txt_hsn.Text = string.Empty;
        txt_tax.Text = string.Empty;
        txt_quntity.Text = string.Empty;
        txt_unit.Text = string.Empty;
        txt_rate.Text = string.Empty;
        txt_discount.Text = string.Empty;
        txt_total_amount.Text = string.Empty;

        gvPurchaseRecord.DataSource = (DataTable)ViewState["PurchaesProduct"];
        gvPurchaseRecord.DataBind();
    }

    protected void btn_save_Click(object sender, EventArgs e)
    {
        if (btn_save.Text == "Save")
        {

            if (ChkSendQuotation.Checked == true)
            {
                Save_Record();
                Send_Mail();
                //foreach (GridViewRow g1 in Grd_MAIL.Rows)
                //{
                //    string MAIL = (g1.FindControl("lblmultMail") as Label).Text;
                //    bool chkmail = (g1.FindControl("chkmail") as CheckBox).Checked;

                //    if (chkmail == false)
                //    {
                //        ScriptManager.RegisterStartupScript(this, GetType(), "showalert", "alert('Select Atleast One Mail_ID');", true);
                //        //ClientScript.RegisterStartupScript(this.GetType(), "alert", "HideLabe('Select Atleast One Mail_ID');", true);
                //    }
                //    else
                //    {

                //        string ChallanNo = ToString();
                //        Send_Mail();
                //    }
                //}
                //Checmail();
                //SaveRecord();
                //string ChallanNo = ToString();
                //Send_Mail();
            }
            else
            {
                Save_Record();
            }
        }
        if (btn_save.Text == "Update")
        {
            if (ChkSendQuotation.Checked == true)
            {
                Save_Record();
                foreach (GridViewRow g1 in Grd_MAIL.Rows)
                {
                    string MAIL = (g1.FindControl("lblmultMail") as Label).Text;
                    bool chkmail = (g1.FindControl("chkmail") as CheckBox).Checked;

                    if (chkmail == false)
                    {
                        //ScriptManager.RegisterStartupScript(this, GetType(), "showalert", "alert('Select Atleast One Mail_ID');", true);
                        //ClientScript.RegisterStartupScript(this.GetType(), "alert", "HideLabe('Select Atleast One Mail_ID');", true);
                    }
                    else
                    {

                        string ChallanNo = ToString();
                        Send_Mail();
                    }
                }
                //Checmail();
                //SaveRecord();
                //string ChallanNo = ToString();
                //Send_Mail();
            }
            else
            {
                Save_Record();
            }
        }
        //if (ChkSendQuotation.Checked == true)
        //{
        //    Save_Record();
        //    string Quotation_no = ToString();
        //    Send_Mail();
        //}
        //else
        //{
        //    Save_Record();
        //}
        ////Save_Record();
    }

    public MemoryStream PDF(string Quo_NO, string message)
    {
        MemoryStream pdf = new MemoryStream();

        SqlDataAdapter Da = new SqlDataAdapter("SELECT * FROM vw_newvendorpomailsend WHERE PoNo='" + txt_po_no.Text + "' ", Conn);

        DataTable Dt = new DataTable();
        Da.Fill(Dt);

        StringWriter sw = new StringWriter();
        StringReader sr = new StringReader(sw.ToString());

        Document doc = new Document(PageSize.A4, 10f, 10f, 55f, 0f);
        PdfWriter pdfWriter = PdfWriter.GetInstance(doc, pdf);

        PdfWriter writer = PdfWriter.GetInstance(doc, new FileStream(Server.MapPath("~/Files/") + "Vendor PO Invoice.pdf", FileMode.Create));
        //PdfWriter writer = PdfWriter.GetInstance(doc, Response.OutputStream);
        XMLWorkerHelper.GetInstance().ParseXHtml(writer, doc, sr);

        doc.Open();


        string imageURL = Server.MapPath("~") + "/image/AA.png";

        iTextSharp.text.Image png = iTextSharp.text.Image.GetInstance(imageURL);

        //Resize image depend upon your need

        png.ScaleToFit(70, 100);

        //For Image Position
        png.SetAbsolutePosition(40, 745);
        //var document = new Document();

        //Give space before image
        //png.ScaleToFit(document.PageSize.Width - (document.RightMargin * 100), 50);
        png.SpacingBefore = 50f;

        //Give some space after the image

        png.SpacingAfter = 1f;

        png.Alignment = Element.ALIGN_LEFT;

        //paragraphimage.Add(png);
        //doc.Add(paragraphimage);
        doc.Add(png);

        PdfContentByte cb = pdfWriter.DirectContent;
        cb.Rectangle(17f, 735f, 560f, 60f);
        cb.Stroke();
        // Header 
        cb.BeginText();
        cb.SetFontAndSize(BaseFont.CreateFont(@"C:\Windows\Fonts\Calibrib.ttf", "Identity-H", BaseFont.EMBEDDED), 20);
        cb.ShowTextAligned(PdfContentByte.ALIGN_LEFT, "ENDEAVOUR AUTOMATION", 185, 773, 0);
        cb.SetFontAndSize(BaseFont.CreateFont(@"C:\Windows\Fonts\Calibrib.ttf", "Identity-H", BaseFont.EMBEDDED), 11);
        cb.ShowTextAligned(PdfContentByte.ALIGN_LEFT, "Survey No. 27, Nimbalkar Nagar, Near Raghunandan Karyalay,", 155, 755, 0);
        cb.SetFontAndSize(BaseFont.CreateFont(@"C:\Windows\Fonts\Calibrib.ttf", "Identity-H", BaseFont.EMBEDDED), 11);
        cb.ShowTextAligned(PdfContentByte.ALIGN_LEFT, "Tathawade, Pune-411033", 232, 740, 0);
        cb.EndText();

        PdfContentByte cbb = pdfWriter.DirectContent;
        cbb.Rectangle(17f, 710f, 560f, 25f);
        cbb.Stroke();
        // Header 
        cbb.BeginText();
        cbb.SetFontAndSize(BaseFont.CreateFont(@"C:\Windows\Fonts\Calibrib.ttf", "Identity-H", BaseFont.EMBEDDED), 10);
        cbb.ShowTextAligned(PdfContentByte.ALIGN_LEFT, " Mob: 9860502108    Email: endeavour.automations@gmail.com ", 153, 722, 0);
        cbb.EndText();

        PdfContentByte cbbb = pdfWriter.DirectContent;
        cbbb.Rectangle(17f, 685f, 560f, 25f);
        cbbb.Stroke();
        // Header 
        cbbb.BeginText();
        cbbb.SetFontAndSize(BaseFont.CreateFont(@"C:\Windows\Fonts\Calibrib.ttf", "Identity-H", BaseFont.EMBEDDED), 10);
        cbbb.ShowTextAligned(PdfContentByte.ALIGN_LEFT, "GSTIN :  27AFYPJ3488G1ZQ ", 30, 695, 0);
        cbbb.SetFontAndSize(BaseFont.CreateFont(@"C:\Windows\Fonts\Calibrib.ttf", "Identity-H", BaseFont.EMBEDDED), 10);
        cbbb.ShowTextAligned(PdfContentByte.ALIGN_LEFT, "W.E.F. :  01/07/2017", 185, 695, 0);
        cbbb.SetFontAndSize(BaseFont.CreateFont(@"C:\Windows\Fonts\Calibrib.ttf", "Identity-H", BaseFont.EMBEDDED), 10);
        cbbb.ShowTextAligned(PdfContentByte.ALIGN_LEFT, "PAN No. :  AFYPJ3488G", 310, 695, 0);
        cbbb.SetFontAndSize(BaseFont.CreateFont(@"C:\Windows\Fonts\Calibrib.ttf", "Identity-H", BaseFont.EMBEDDED), 10);
        cbbb.ShowTextAligned(PdfContentByte.ALIGN_LEFT, "State Code :  27 Maharashtra", 440, 695, 0);
        cbbb.EndText();

        PdfContentByte cd = pdfWriter.DirectContent;
        cd.Rectangle(17f, 660f, 560f, 25f);
        cd.Stroke();
        // Header 
        cd.BeginText();
        cd.SetFontAndSize(BaseFont.CreateFont(@"C:\Windows\Fonts\Calibrib.ttf", "Identity-H", BaseFont.EMBEDDED), 17);
        cd.ShowTextAligned(PdfContentByte.ALIGN_LEFT, "Vendor PO", 260, 667, 0);
        cd.EndText();

        Paragraph paragraphTable1 = new Paragraph();
        paragraphTable1.SpacingBefore = 120f;
        paragraphTable1.SpacingAfter = 10f;

        PdfPTable table = new PdfPTable(4);

        float[] widths2 = new float[] { 100, 180, 100, 180 };
        table.SetWidths(widths2);
        table.TotalWidth = 560f;
        table.LockedWidth = true;

        if (Dt.Rows.Count > 0)
        {
            var CreateDate = DateTime.Now.ToString("dd-MM-yyyy");
            string statecode = Dt.Rows[0]["statecode"].ToString();
            string VendorName = Dt.Rows[0]["VendorName"].ToString();
            string PoNumber = Dt.Rows[0]["Pono"].ToString();
            string Address = Dt.Rows[0]["DeliveryAddress"].ToString();
            string PODate = Dt.Rows[0]["PoDate"].ToString().TrimEnd("0:0".ToCharArray());
            string MobileNo = Dt.Rows[0]["Mobileno"].ToString();
            string GSTNo = Dt.Rows[0]["GstNo"].ToString();
            string KindAtt = Dt.Rows[0]["KindAtt"].ToString();
            string TotalInWord = Dt.Rows[0]["TotalInWord"].ToString();
            string GrandTotal = Dt.Rows[0]["GrandTotal"].ToString();
            string CGST = Dt.Rows[0]["Cgst"].ToString();
            string SGST = Dt.Rows[0]["Sgst"].ToString();
            string IGST = Dt.Rows[0]["Igst"].ToString();
            string RoundOff = Dt.Rows[0]["RoundOff"].ToString();
            string Total = Dt.Rows[0]["AllTotalPrice"].ToString();
            string RefNo = Dt.Rows[0]["RefNo"].ToString();
            string PayTerms = Dt.Rows[0]["PayTerm"].ToString();
            string Tax = Dt.Rows[0]["TaxPercenteage"].ToString();
            string str = Dt.Rows[0]["Term_Condition_1"].ToString();
            string str1 = Dt.Rows[0]["Term_Condition_2"].ToString();
            string str2 = Dt.Rows[0]["Term_Condition_3"].ToString();
            string str3 = Dt.Rows[0]["Term_Condition_4"].ToString();
            string[] arrstr = str.ToString().Split('-');
            string[] arrstr1 = str1.ToString().Split('-');
            string[] arrstr2 = str2.ToString().Split('-');
            string[] arrstr3 = str3.ToString().Split('-');

            Paragraph paragraphTable11 = new Paragraph();
            paragraphTable1.SpacingBefore = 120f;
            paragraphTable1.SpacingAfter = 10f;

            PdfPTable table1 = new PdfPTable(4);

            float[] widths12 = new float[] { 100, 180, 100, 180 };
            table.SetWidths(widths2);
            table.TotalWidth = 560f;
            table.LockedWidth = true;

            DateTime ffff1 = Convert.ToDateTime(Dt.Rows[0]["PODate"].ToString());
            string datee = ffff1.ToString("dd-MM-yyyy");

            table.AddCell(new Phrase("Vendor Name : ", FontFactory.GetFont("Arial", 9, Font.BOLD)));
            table.AddCell(new Phrase(VendorName, FontFactory.GetFont("Arial", 9, Font.BOLD)));

            table.AddCell(new Phrase("PO No. :", FontFactory.GetFont("Arial", 9, Font.BOLD)));
            table.AddCell(new Phrase(PoNumber, FontFactory.GetFont("Arial", 9, Font.BOLD)));

            table.AddCell(new Phrase("Address", FontFactory.GetFont("Arial", 9, Font.BOLD)));
            table.AddCell(new Phrase(Address, FontFactory.GetFont("Arial", 9, Font.BOLD)));

            table.AddCell(new Phrase("PO Date :", FontFactory.GetFont("Arial", 9, Font.BOLD)));
            table.AddCell(new Phrase(datee, FontFactory.GetFont("Arial", 9, Font.BOLD)));

            table.AddCell(new Phrase("Mobile No. :", FontFactory.GetFont("Arial", 9, Font.BOLD)));
            table.AddCell(new Phrase(MobileNo, FontFactory.GetFont("Arial", 9, Font.BOLD)));

            table.AddCell(new Phrase("GST No. :", FontFactory.GetFont("Arial", 9, Font.BOLD)));
            table.AddCell(new Phrase(GSTNo, FontFactory.GetFont("Arial", 9, Font.BOLD)));

            table.AddCell(new Phrase("Ref. No.:", FontFactory.GetFont("Arial", 9, Font.BOLD)));
            table.AddCell(new Phrase(RefNo, FontFactory.GetFont("Arial", 9, Font.BOLD)));

            table.AddCell(new Phrase("Ref. Date:", FontFactory.GetFont("Arial", 9, Font.BOLD)));
            table.AddCell(new Phrase(CreateDate, FontFactory.GetFont("Arial", 9, Font.BOLD)));

            table.AddCell(new Phrase("Pay Terms:", FontFactory.GetFont("Arial", 9, Font.BOLD)));
            table.AddCell(new Phrase(PayTerms, FontFactory.GetFont("Arial", 9, Font.BOLD)));

            table.AddCell(new Phrase("Kind Att:", FontFactory.GetFont("Arial", 9, Font.BOLD)));
            table.AddCell(new Phrase(KindAtt, FontFactory.GetFont("Arial", 9, Font.BOLD)));
            paragraphTable1.Add(table);
            doc.Add(paragraphTable1);

            Paragraph paragraphTable2 = new Paragraph();
            paragraphTable2.SpacingAfter = 0f;
            table = new PdfPTable(9);
            float[] widths3 = new float[] { 4f, 19f, 10f, 8f, 8f, 8f, 11f, 8f, 12f };
            table.SetWidths(widths3);

            double Ttotal_price = 0;
            if (Dt.Rows.Count > 0)
            {
                table.TotalWidth = 560f;
                table.LockedWidth = true;
                table.AddCell(new Phrase("SN.", FontFactory.GetFont("Arial", 10, Font.BOLD)));
                table.AddCell(new Phrase("Description", FontFactory.GetFont("Arial", 10, Font.BOLD)));
                table.AddCell(new Phrase("Hsn / Sac", FontFactory.GetFont("Arial", 10, Font.BOLD)));
                table.AddCell(new Phrase("Tax %", FontFactory.GetFont("Arial", 10, Font.BOLD)));
                table.AddCell(new Phrase("Quantity", FontFactory.GetFont("Arial", 10, Font.BOLD)));
                table.AddCell(new Phrase("Unit", FontFactory.GetFont("Arial", 10, Font.BOLD)));
                table.AddCell(new Phrase("Rate", FontFactory.GetFont("Arial", 10, Font.BOLD)));
                table.AddCell(new Phrase("Disc %", FontFactory.GetFont("Arial", 10, Font.BOLD)));
                table.AddCell(new Phrase("Total", FontFactory.GetFont("Arial", 10, Font.BOLD)));

                int rowid = 1;
                foreach (DataRow dr in Dt.Rows)
                {
                    table.TotalWidth = 560f;
                    table.LockedWidth = true;

                    double Ftotal = Convert.ToDouble(dr["Total"].ToString());
                    string _ftotal = Ftotal.ToString("##.00");
                    table.AddCell(new Phrase(rowid.ToString(), FontFactory.GetFont("Arial", 9)));
                    table.AddCell(new Phrase(dr["Description"].ToString(), FontFactory.GetFont("Arial", 9)));
                    table.AddCell(new Phrase(dr["Hsn_Sac"].ToString(), FontFactory.GetFont("Arial", 9)));
                    table.AddCell(new Phrase(dr["TaxPercenteage"].ToString(), FontFactory.GetFont("Arial", 9)));
                    table.AddCell(new Phrase(dr["Quantity"].ToString(), FontFactory.GetFont("Arial", 9)));
                    table.AddCell(new Phrase(dr["Unit"].ToString(), FontFactory.GetFont("Arial", 9)));
                    table.AddCell(new Phrase(dr["Rate"].ToString(), FontFactory.GetFont("Arial", 9)));
                    table.AddCell(new Phrase(dr["DiscountPercentage"].ToString(), FontFactory.GetFont("Arial", 9)));
                    table.AddCell(new Phrase(_ftotal, FontFactory.GetFont("Arial", 9)));
                    rowid++;

                    Ttotal_price += Convert.ToDouble(dr["Total"].ToString());
                }

            }
            paragraphTable2.Add(table);
            doc.Add(paragraphTable2);

            //Space
            Paragraph paragraphTable3 = new Paragraph();

            string[] items = { "Goods once sold will not be taken back or exchange. \b",
                        "Interest at the rate of 18% will be charged if bill is'nt paid within 30 days.\b",
                        "Our risk and responsibility ceases the moment goods leaves out godown. \n",
                        };

            Font font12 = FontFactory.GetFont("Arial", 12, Font.BOLD);
            Font font10 = FontFactory.GetFont("Arial", 10, Font.BOLD);
            Paragraph paragraph = new Paragraph("", font12);

            for (int i = 0; i < items.Length; i++)
            {
                paragraph.Add(new Phrase("", font10));
            }

            table = new PdfPTable(9);
            table.TotalWidth = 560f;
            table.LockedWidth = true;
            table.SetWidths(new float[] { 4f, 19f, 10f, 8f, 8f, 8f, 11f, 8f, 12f });
            table.AddCell(paragraph);
            table.AddCell(new Phrase("", FontFactory.GetFont("Arial", 10, Font.BOLD)));
            table.AddCell(new Phrase("", FontFactory.GetFont("Arial", 10, Font.BOLD)));
            table.AddCell(new Phrase("", FontFactory.GetFont("Arial", 10, Font.BOLD)));
            table.AddCell(new Phrase("", FontFactory.GetFont("Arial", 10, Font.BOLD)));
            table.AddCell(new Phrase("", FontFactory.GetFont("Arial", 10, Font.BOLD)));
            table.AddCell(new Phrase("", FontFactory.GetFont("Arial", 10, Font.BOLD)));
            table.AddCell(new Phrase("", FontFactory.GetFont("Arial", 10, Font.BOLD)));
            table.AddCell(new Phrase("  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", FontFactory.GetFont("Arial", 10, Font.BOLD)));
            doc.Add(table);

            //Add Total Row start
            Paragraph paragraphTable5 = new Paragraph();

            //paragraphTable5.SpacingAfter = 10f;   

            string[] itemsss = { "Goods once sold will not be taken back or exchange. \b",
                         "Interest at the rate of 18% will be charged if bill is'nt paid within 30 days.\b",
                         "Our risk and responsibility ceases the moment goods leaves out godown. \n",
                         };

            Font font13 = FontFactory.GetFont("Arial", 12, Font.BOLD);
            Font font11 = FontFactory.GetFont("Arial", 10, Font.BOLD);
            Paragraph paragraphh = new Paragraph("", font12);

            for (int i = 0; i < items.Length; i++)
            {
                paragraph.Add(new Phrase("", font10));
            }

            table = new PdfPTable(3);
            table.TotalWidth = 560f;
            table.LockedWidth = true;

            table.SetWidths(new float[] { 0f, 76f, 12f });
            table.AddCell(paragraph);
            PdfPCell cell2t = new PdfPCell(new Phrase("Subtotal", FontFactory.GetFont("Arial", 10, Font.BOLD)));
            cell2t.HorizontalAlignment = Element.ALIGN_RIGHT;
            table.AddCell(cell2t);
            PdfPCell cell3t = new PdfPCell(new Phrase(Ttotal_price.ToString("#.00"), FontFactory.GetFont("Arial", 10, Font.BOLD)));
            cell3t.HorizontalAlignment = Element.ALIGN_RIGHT;
            table.AddCell(cell3t);
            doc.Add(table);
            //add total row end


            if (statecode == "27 MAHARASHTRA")
            {
                //CGST 9% Row STart
                Paragraph paragraphTable15 = new Paragraph();
                paragraphTable5.SpacingAfter = 0f;


                string[] itemss = { "Goods once sold will not be taken back or exchange. \b",
                        "Interest at the rate of 18% will be charged if bill is'nt paid within 30 days.\b",
                        "Our risk and responsibility ceases the moment goods leaves out godown. \n",
                        };

                Font font1 = FontFactory.GetFont("Arial", 12, Font.BOLD);
                Font font2 = FontFactory.GetFont("Arial", 10, Font.BOLD);
                Paragraph paragraphhh = new Paragraph("", font12);

                for (int i = 0; i < items.Length; i++)
                {
                    paragraph.Add(new Phrase("", font10));
                }

                table = new PdfPTable(3);
                table.TotalWidth = 560f;
                table.LockedWidth = true;

                var CGSTPer = Convert.ToDecimal(Tax) / 2;
                table.SetWidths(new float[] { 0f, 76f, 12f });
                table.AddCell(paragraph);
                PdfPCell cell2 = new PdfPCell(new Phrase("CGST-" + CGSTPer + " %", FontFactory.GetFont("Arial", 10, Font.BOLD)));
                cell2.HorizontalAlignment = Element.ALIGN_RIGHT;
                table.AddCell(cell2);
                PdfPCell cell3 = new PdfPCell(new Phrase(CGST, FontFactory.GetFont("Arial", 10, Font.BOLD)));
                cell3.HorizontalAlignment = Element.ALIGN_RIGHT;
                table.AddCell(cell3);

                doc.Add(table);
                //CGST 9% Row End

                //SGST 9% Row STart
                Paragraph paragraphTable16 = new Paragraph();
                paragraphTable5.SpacingAfter = 10f;


                string[] item = { "Goods once sold will not be taken back or exchange. \b",
                        "Interest at the rate of 18% will be charged if bill is'nt paid within 30 days.\b",
                        "Our risk and responsibility ceases the moment goods leaves out godown. \n",
                        };

                Font font14 = FontFactory.GetFont("Arial", 12, Font.BOLD);
                Font font15 = FontFactory.GetFont("Arial", 10, Font.BOLD);
                Paragraph paragraphhhh = new Paragraph("", font12);

                for (int i = 0; i < items.Length; i++)
                {
                    paragraph.Add(new Phrase("", font10));
                }

                table = new PdfPTable(3);
                table.TotalWidth = 560f;
                table.LockedWidth = true;
                var SGSTPer = Convert.ToDecimal(Tax) / 2;
                table.SetWidths(new float[] { 0f, 76f, 12f });
                table.AddCell(paragraph);
                PdfPCell cell22 = new PdfPCell(new Phrase("SGST-" + SGSTPer + "%", FontFactory.GetFont("Arial", 10, Font.BOLD)));
                cell22.HorizontalAlignment = Element.ALIGN_RIGHT;
                table.AddCell(cell22);
                PdfPCell cell33 = new PdfPCell(new Phrase(SGST, FontFactory.GetFont("Arial", 10, Font.BOLD)));
                cell33.HorizontalAlignment = Element.ALIGN_RIGHT;
                table.AddCell(cell33);
                doc.Add(table);
                //SGST 9% Row End
            }

            else
            {

                //IGST 9% Row STart
                Paragraph paragraphTable161 = new Paragraph();
                paragraphTable5.SpacingAfter = 10f;


                string[] item1 = { "Goods once sold will not be taken back or exchange. \b",
                        "Interest at the rate of 18% will be charged if bill is'nt paid within 30 days.\b",
                        "Our risk and responsibility ceases the moment goods leaves out godown. \n",
                        };

                Font font141 = FontFactory.GetFont("Arial", 12, Font.BOLD);
                Font font151 = FontFactory.GetFont("Arial", 10, Font.BOLD);
                Paragraph paragraphhhh1 = new Paragraph("", font12);

                for (int i = 0; i < items.Length; i++)
                {
                    paragraph.Add(new Phrase("", font10));
                }

                table = new PdfPTable(3);
                table.TotalWidth = 560f;
                table.LockedWidth = true;
                var IGSTPer = Convert.ToDecimal(Tax);
                table.SetWidths(new float[] { 0f, 76f, 12f });
                table.AddCell(paragraph);
                PdfPCell cell221 = new PdfPCell(new Phrase("IGST-" + IGSTPer + "%", FontFactory.GetFont("Arial", 10, Font.BOLD)));
                cell221.HorizontalAlignment = Element.ALIGN_RIGHT;
                table.AddCell(cell221);
                PdfPCell cell313 = new PdfPCell(new Phrase(IGST, FontFactory.GetFont("Arial", 10, Font.BOLD)));
                cell313.HorizontalAlignment = Element.ALIGN_RIGHT;
                table.AddCell(cell313);
                doc.Add(table);
                //IGST 9% Row End
            }

            //Round Off
            //Paragraph paragraphTable1611 = new Paragraph();
            //paragraphTable5.SpacingAfter = 10f;
            //string[] item11 = { "Goods once sold will not be taken back or exchange. \b",
            //            "Interest at the rate of 18% will be charged if bill is'nt paid within 30 days.\b",
            //            "Our risk and responsibility ceases the moment goods leaves out godown. \n",
            //            };

            //Font font1411 = FontFactory.GetFont("Arial", 12, Font.BOLD);
            //Font font1511 = FontFactory.GetFont("Arial", 10, Font.BOLD);
            //Paragraph paragraphhhh11 = new Paragraph("", font12);
            //for (int i = 0; i < items.Length; i++)
            //{
            //    paragraph.Add(new Phrase("", font10));
            //}

            //table = new PdfPTable(3);
            //table.TotalWidth = 560f;
            //table.LockedWidth = true;
            //table.SetWidths(new float[] { 0f, 76f, 12f });
            //table.AddCell(paragraph);
            //PdfPCell cell2211 = new PdfPCell(new Phrase("Round Off", FontFactory.GetFont("Arial", 10, Font.BOLD)));
            //cell2211.HorizontalAlignment = Element.ALIGN_RIGHT;
            //table.AddCell(cell2211);
            //PdfPCell cell3131 = new PdfPCell(new Phrase(RoundOff, FontFactory.GetFont("Arial", 10, Font.BOLD)));
            //cell3131.HorizontalAlignment = Element.ALIGN_RIGHT;
            //table.AddCell(cell3131);
            //doc.Add(table);
            //Round Off End

            //Grand total Row STart
            Paragraph paragraphTable17 = new Paragraph();
            paragraphTable5.SpacingAfter = 10f;

            string[] itemm = { "Goods once sold will not be taken back or exchange. \b",
                        "Interest at the rate of 18% will be charged if bill is'nt paid within 30 days.\b",
                        "Our risk and responsibility ceases the moment goods leaves out godown. \n",
                        };

            Font font16 = FontFactory.GetFont("Arial", 12, Font.BOLD);
            Font font17 = FontFactory.GetFont("Arial", 10, Font.BOLD);
            Paragraph paragraphhhhh = new Paragraph("", font12);
            for (int i = 0; i < items.Length; i++)
            {
                paragraph.Add(new Phrase("", font10));
            }

            table = new PdfPTable(3);
            table.TotalWidth = 560f;
            table.LockedWidth = true;
            table.SetWidths(new float[] { 0f, 76f, 12f });
            table.AddCell(paragraph);
            PdfPCell cell44 = new PdfPCell(new Phrase("Grand Total", FontFactory.GetFont("Arial", 10, Font.BOLD)));
            cell44.HorizontalAlignment = Element.ALIGN_RIGHT;
            table.AddCell(cell44);
            PdfPCell cell55 = new PdfPCell(new Phrase(GrandTotal, FontFactory.GetFont("Arial", 10, Font.BOLD)));
            cell55.HorizontalAlignment = Element.ALIGN_RIGHT;
            table.AddCell(cell55);
            doc.Add(table);
            //grand Total Row end

            //Grand total in word Row STart
            Paragraph paragraphTable18 = new Paragraph();
            paragraphTable18.SpacingAfter = 50f;

            string[] itemmm = { "Goods once sold will not be taken back or exchange. \b",
                        "Interest at the rate of 18% will be charged if bill is'nt paid within 30 days.\b",
                        "Our risk and responsibility ceases the moment goods leaves out godown. \n",
                        };

            Font font18 = FontFactory.GetFont("Arial", 12, Font.BOLD);
            Font font19 = FontFactory.GetFont("Arial", 10, Font.BOLD);
            Paragraph paragraphhmhhh = new Paragraph("", font12);

            for (int i = 0; i < items.Length; i++)
            {
                paragraph.Add(new Phrase("", font10));
            }

            table = new PdfPTable(3);
            table.TotalWidth = 560f;
            table.LockedWidth = true;
            table.SetWidths(new float[] { 0f, 25f, 63f });
            table.AddCell(paragraph);
            PdfPCell cell66 = new PdfPCell(new Phrase("Amount In Words Rs. ", FontFactory.GetFont("Arial", 10, Font.BOLD)));
            cell66.HorizontalAlignment = Element.ALIGN_CENTER;
            table.AddCell(cell66);
            PdfPCell cell77 = new PdfPCell(new Phrase(TotalInWord, FontFactory.GetFont("Arial", 10, Font.BOLD)));
            cell77.HorizontalAlignment = Element.ALIGN_CENTER;
            table.AddCell(cell77);
            doc.Add(table);
            ////grand total in word end

            ///////////term And Condition

            string[] items90term = { "Dear Sir/Madam,\b", "We acknowledge with thanks the receipt of your above enquiry and have great pleasure in submitting our lowest quotation,\b", "subject to the conditions printed below.\n" };

            Font font12112term = FontFactory.GetFont("Arial", 12, Font.BOLD);
            Font font10111term = FontFactory.GetFont("Arial", 10);
            Paragraph paragraph110term = new Paragraph("\bTerms & Conditions:", font12112term);

            for (int i = 0; i < items90term.Length; i++)
            {
                paragraph110term.Add(new Phrase(" ", font10111term));
            }

            table = new PdfPTable(1);
            table.TotalWidth = 560f;
            table.LockedWidth = true;
            table.SetWidths(new float[] { 150f });

            table.AddCell(paragraph110term);

            doc.Add(table);

            string[] items90termdata = { "Dear Sir/Madam,\b", "We acknowledge with thanks the receipt of your above enquiry and have great pleasure in submitting our lowest quotation,\b", "subject to the conditions printed below.\n" };

            Font font12112termdata = FontFactory.GetFont("Arial", 12, Font.BOLD);
            Font font10111termdata = FontFactory.GetFont("Arial", 10);
            Paragraph paragraph110termdata = new Paragraph("", font12112termdata);

            for (int i = 0; i < items90termdata.Length; i++)
            {
                paragraph110termdata.Add(new Phrase(" ", font10111termdata));
            }

            table = new PdfPTable(2);
            table.TotalWidth = 560f;
            table.LockedWidth = true;
            table.SetWidths(new float[] { 150f, 350f });

            table.AddCell(new Phrase(arrstr[0].ToString(), FontFactory.GetFont("Arial", 9, Font.BOLD)));
            table.AddCell(new Phrase(arrstr[1].ToString(), FontFactory.GetFont("Arial", 9)));
            table.AddCell(new Phrase(arrstr1[0].ToString(), FontFactory.GetFont("Arial", 9, Font.BOLD)));
            table.AddCell(new Phrase(arrstr1[1].ToString(), FontFactory.GetFont("Arial", 9)));
            table.AddCell(new Phrase(arrstr2[0].ToString(), FontFactory.GetFont("Arial", 9, Font.BOLD)));
            table.AddCell(new Phrase(arrstr2[1].ToString(), FontFactory.GetFont("Arial", 9)));
            table.AddCell(new Phrase(arrstr3[0].ToString(), FontFactory.GetFont("Arial", 9, Font.BOLD)));
            table.AddCell(new Phrase(arrstr3[1].ToString(), FontFactory.GetFont("Arial", 9)));

            doc.Add(table);
            string[] items91 = { "Dear Sir/Madam,\b", "We acknowledge with thanks the receipt of your above enquiry and have great pleasure in submitting our lowest quotation,\b", "subject to the conditions printed below.\n" };

            Font font12111 = FontFactory.GetFont("Arial", 12, Font.BOLD);
            Font font101111 = FontFactory.GetFont("Arial", 10);
            Paragraph paragraph111 = new Paragraph("", font12111);

            for (int i = 0; i < items91.Length; i++)
            {
                paragraph111.Add(new Phrase(" ", font101111));
            }

            table = new PdfPTable(2);
            table.TotalWidth = 560f;
            table.LockedWidth = true;
            table.SetWidths(new float[] { 310f, 250f });

            table.AddCell(new Phrase("\bSpecial Instruction:\n\n1) Please Mention our P.O.No on your D.C. & Invoice.\n\n2) Send Delivery challan & Orignal Invoice (with Transporter's copy) \n\b along with the material.", FontFactory.GetFont("Arial", 10)));
            table.AddCell(new Phrase("\bRejection:\n\bIf material received is found faulty or not matching With \n required specifications,we will intimate you within 4 \n weeks From receiving the material.Such material will \n be rejected and Will be sent back at the cost and risk \n of supplier.Corresponding Deductions will apply to \n Supplier's A/C.", FontFactory.GetFont("Arial", 10)));

            doc.Add(table);
            string[] items90 = { "Dear Sir/Madam,\b", "We acknowledge with thanks the receipt of your above enquiry and have great pleasure in submitting our lowest quotation,\b", "subject to the conditions printed below.\n" };

            Font font12112 = FontFactory.GetFont("Arial", 12, Font.BOLD);
            Font font10111 = FontFactory.GetFont("Arial", 10);
            Paragraph paragraph110 = new Paragraph("\bBank Account Details", font12112);

            for (int i = 0; i < items90.Length; i++)
            {
                paragraph110.Add(new Phrase(" ", font10111));
            }

            table = new PdfPTable(1);
            table.TotalWidth = 560f;
            table.LockedWidth = true;
            table.SetWidths(new float[] { 310f });

            table.AddCell(paragraph110);
            doc.Add(table);
            string[] items9 = { "Dear Sir/Madam,\b", "We acknowledge with thanks the receipt of your above enquiry and have great pleasure in submitting our lowest quotation,\b", "subject to the conditions printed below.\n" };

            Font font1211 = FontFactory.GetFont("Arial", 12, Font.BOLD);
            Font font1011 = FontFactory.GetFont("Arial", 10);
            Paragraph paragraph11 = new Paragraph("", font1211);

            for (int i = 0; i < items9.Length; i++)
            {
                paragraph11.Add(new Phrase(" ", font1011));
            }

            table = new PdfPTable(2);
            table.TotalWidth = 560f;
            table.LockedWidth = true;
            table.SetWidths(new float[] { 310f, 250f });
            table.AddCell(new Phrase("\bBank Name : BANK OF BARODA\n\n\bAccount Name : ENDEAVOUR AUTOMATION\n\n\bBranch : KALEWADI\n\n\bA/c No. : 46180200000214\n\n\bIFSC/Neft Code :BARB0KALEWA\n", FontFactory.GetFont("Arial", 10)));
            table.AddCell(new Phrase("\b      For,\n\n\b\b\b\b\b\b\b\b\b            ENDEAVOUR AUTOMATION\n\n\n\n\n                                       Authorised Signatory", FontFactory.GetFont("Arial", 11, Font.BOLD)));

            doc.Add(table);
            PdfPCell cell = null;
            Paragraph paragraphTable4 = new Paragraph();
            paragraphTable4.SpacingBefore = 10f;
            table = new PdfPTable(1);
            table.TotalWidth = 560f;
            float[] widths = new float[] { 560f };
            table.SetWidths(widths);
            table.LockedWidth = true;
            cell = new PdfPCell(new Phrase("                                                                                           *Subject to Pune Jurisdiction Only*", FontFactory.GetFont("Arial", 9, Font.BOLD)));
            cell.Border = Rectangle.NO_BORDER;
            table.AddCell(cell);
            doc.Add(table);
            doc.Close();
        }
        return pdf;
    }

    protected void Send_Mail()
    {
        string strMessage = "<strong>Dear Sir," + "<br/><br/>" +

                        "Greetings from " + "<strong>Endeavour  Automation...!" + "<br/><br/>" +

                         "Please find the attached offer for your reference." + " <br/><br/>" +

                          "Please find the attached offer for your reference. " + "P.O. No. - " + txt_po_no.Text.Trim() + ".pdf" + "<br/><br/>" +

                         "We hope that we will receive a Purchase Order Soon." + " <br/><br/>" +

                         "Please do not hesitate to contact us for any query or clarification." + " <br/><br/>" +

                        "Thanks & Regards." + "<br/>" +
                        "<strong>ENDEAVOUR AUTOMATION<strong>";

        string pdfname = "Vendor PO - " + txt_po_no.Text.Trim() + "/" + txt_po_date.Text.Trim() + ".pdf";

        MailMessage message = new MailMessage();

        foreach (GridViewRow g1 in Grd_MAIL.Rows)
        {
            string MAIL = (g1.FindControl("lblmultMail") as Label).Text;

            bool chkmail = (g1.FindControl("chkmail") as CheckBox).Checked;
            if (chkmail == true)
            {
                message.To.Add(MAIL);// Email-ID of Receiver  
            }

        }
        //message.To.Add(txt_Mail.Text);// Email-ID of Receiver  
        message.Subject = "Vendor PO";// Subject of Email  
        message.Body = strMessage;

        message.From = new MailAddress("enquiry@weblinkservices.net", "info@endeavours.in");

        message.IsBodyHtml = true;

        MemoryStream file = new MemoryStream(PDF("This is pdf file text", Server.MapPath("~/Files/")).ToArray());

        file.Seek(0, SeekOrigin.Begin);
        Attachment data = new Attachment(file, pdfname, "application/pdf");
        ContentDisposition disposition = data.ContentDisposition;
        disposition.CreationDate = System.DateTime.Now;
        disposition.ModificationDate = System.DateTime.Now;
        disposition.DispositionType = DispositionTypeNames.Attachment;
        message.Attachments.Add(data);//Attach the file  

        //message.Body = txtmessagebody.Text;
        SmtpClient SmtpMail = new SmtpClient();
        SmtpMail.Host = "smtpout.secureserver.net"; // Name or IP-Address of Host used for SMTP transactions  
        SmtpMail.Port = 587; // Port for sending the mail  
        SmtpMail.Credentials = new System.Net.NetworkCredential("enquiry@weblinkservices.net", "wlspl@123"); // Username/password of network, if apply  
        SmtpMail.DeliveryMethod = SmtpDeliveryMethod.Network;
        SmtpMail.EnableSsl = false;

        SmtpMail.ServicePoint.MaxIdleTime = 0;
        SmtpMail.ServicePoint.SetTcpKeepAlive(true, 2000, 2000);
        message.BodyEncoding = Encoding.Default;
        message.Priority = MailPriority.High;
        SmtpMail.Send(message);
        ScriptManager.RegisterStartupScript(this, this.GetType(), "Alert", "alert('Mail Send Successfully !!');", true);
        Response.Write("Email has been sent");

    }

    protected void btn_add_more_Click(object sender, EventArgs e)
    {
        if (txt_discription.Text == "" || txt_hsn.Text == "" || txt_rate.Text == "" || txt_quntity.Text == "")
        {
            ScriptManager.RegisterStartupScript(this, this.GetType(), "Alert", "alert('Please fill quantity  !!!');", true);
            //txt_quntity.Focus();
        }
        else
        {
            Show_Grid();
        }

    }

    public string ConvertNumbertoWords(int number)
    {
        if (number == 0)
            return "ZERO";
        if (number < 0)
            return "minus " + ConvertNumbertoWords(Math.Abs(number));
        string words = "";
        if ((number / 1000000) > 0)
        {
            words += ConvertNumbertoWords(number / 1000000) + " Million ";
            number %= 1000000;
        }

        if ((number / 1000) > 0)
        {
            words += ConvertNumbertoWords(number / 1000) + " Thousand ";
            number %= 1000;
        }
        if ((number / 100) > 0)
        {
            words += ConvertNumbertoWords(number / 100) + " Hundred ";
            number %= 100;
        }
        if (number > 0)
        {
            if (words != "")
                words += "And ";
            var unitsMap = new[] { "Zero", "One", "Two", "Three", "Four", "Five", "Six", "Seven", "Eight", "Nine", "Ten", "Eleven", "Twelve", "Thirteen", "Fourteen", "Fifteen", "Sixteen", "Seventeen", "Eighteen", "Nineteen" };
            var tensMap = new[] { "Zero", "Ten", "Twenty", "Thirty", "Forty", "Fifty", "Sixty", "Seventy", "Eighty", "Ninety" };

            if (number < 20)
                words += unitsMap[number];
            else
            {
                words += tensMap[number / 10];
                if ((number % 10) > 0)
                    words += " " + unitsMap[number % 10];
            }
        }
        return words;
    }

    private void Table_Calculation()
    {
        decimal Qty;
        if (string.IsNullOrEmpty(txt_quntity.Text))
        {
            Qty = 0;
        }
        else
        {
            var totalamt = Convert.ToDecimal(txt_quntity.Text.Trim()) * Convert.ToDecimal(txt_rate.Text.Trim());
            txt_total_amount.Text = totalamt.ToString();
            hdntotal.Value = totalamt.ToString();
            txt_total_amount.Text = hdntotal.Value;
            tax = Convert.ToDecimal(hdntotal.Value);
        }

        decimal DiscountAmt;
        if (string.IsNullOrEmpty(txt_discount.Text))
        {
            DiscountAmt = 0;
        }
        else
        {
            DiscountAmt = (Convert.ToDecimal(txt_total_amount.Text) * Convert.ToDecimal(txt_discount.Text)) / 100;
        }
        var GrossAmt = Convert.ToDecimal(txt_total_amount.Text) - (DiscountAmt);
        txt_total_amount.Text = GrossAmt.ToString("##.00");
    }

    private void Grid_Calculation(GridViewRow row)
    {
        TextBox Tax = (TextBox)row.FindControl("txt_tax_grd");
        TextBox Quntity = (TextBox)row.FindControl("txt_quntity_grd");
        TextBox Rate = (TextBox)row.FindControl("txt_rate_grd");
        TextBox Discount = (TextBox)row.FindControl("txt_discount_grd");
        TextBox TotalAmount = (TextBox)row.FindControl("txt_total_amount_grd");

        decimal Qty;
        if (string.IsNullOrEmpty(Quntity.Text))
        {
            Qty = 0;
        }
        else
        {
            var totalamt = Convert.ToDecimal(Quntity.Text.Trim()) * Convert.ToDecimal(Rate.Text.Trim());
            TotalAmount.Text = totalamt.ToString();
        }
        decimal DiscountAmt;
        if (string.IsNullOrEmpty(Discount.Text))
        {
            DiscountAmt = 0;
        }
        else
        {
            DiscountAmt = Convert.ToDecimal(TotalAmount.Text) * Convert.ToDecimal(Discount.Text) / 100;
        }
        var GrossAmt = Convert.ToDecimal(TotalAmount.Text) - (DiscountAmt);
        TotalAmount.Text = GrossAmt.ToString("##.00");
        ScriptManager.RegisterStartupScript(this, this.GetType(), "Success", "scrollToElement();", true);
    }

    protected void txt_discount_TextChanged(object sender, EventArgs e)
    {
        Table_Calculation();
    }

    protected void gvPurchaseRecord_RowEditing(object sender, GridViewEditEventArgs e)
    {
        gvPurchaseRecord.EditIndex = e.NewEditIndex;
        gvPurchaseRecord.DataSource = (DataTable)ViewState["PurchaesProduct"];
        gvPurchaseRecord.DataBind();
        ScriptManager.RegisterStartupScript(this, this.GetType(), "Success", "scrollToElement();", true);
    }

    private decimal Total;
    decimal totaltax = 0;
    decimal Total11177 = 0, Qty = 0, rate111111 = 0, totalrateqty = 0;
    protected void gvPurchaseRecord_RowDataBound(object sender, GridViewRowEventArgs e)
    {
        if (e.Row.RowType == DataControlRowType.DataRow)
        {
            //cast the current row to a datarowview
            DataRowView row = e.Row.DataItem as DataRowView;
            Total += Convert.ToDecimal(DataBinder.Eval(e.Row.DataItem, "Total Amount"));
            txt_total.Text = Total.ToString("##.00");
        }

        if (e.Row.RowType == DataControlRowType.DataRow)
        {
            LinkButton lnkedit = e.Row.FindControl("btn_edit") as LinkButton;
            if (lnkedit == null)
            {
                string lbltotaltax = (e.Row.FindControl("txt_tax_grd") as TextBox).Text;
                string lblrate = (e.Row.FindControl("txt_rate_grd") as TextBox).Text;
                string lblqty = (e.Row.FindControl("txt_quntity_grd") as TextBox).Text;
                totaltax = Convert.ToDecimal(lbltotaltax);

            }
            else
            {
                string lbltotaltax = (e.Row.FindControl("lbl_tax_grd") as Label).Text;
                string lblrate = (e.Row.FindControl("lbl_rate_grd") as Label).Text;
                string lblqty = (e.Row.FindControl("lbl_quntity_grd") as Label).Text;
                totaltax = Convert.ToDecimal(lbltotaltax);

            }
            if (txtstatecode.Text == "27 MAHARASHTRA")
            {
                txt_cgst_amt.Text = ((Convert.ToDecimal(txt_total.Text) * totaltax / 100 / 2)).ToString("#.00");
                txt_sgst_amt.Text = ((Convert.ToDecimal(txt_total.Text) * totaltax / 100 / 2)).ToString("#.00");
                txt_igst_amt.Text = Convert.ToDecimal(00).ToString("##.00");


                //txt_cgst_amt.Text = ((Convert.ToDecimal(txt_total.Text) * totaltax / 100)).ToString("#.00");
                //txt_sgst_amt.Text = ((Convert.ToDecimal(txt_total.Text) * totaltax / 100)).ToString("#.00");
                //txt_igst_amt.Text = Convert.ToDecimal(00).ToString("##.00");
            }
            else
            {
                txt_cgst_amt.Text = Convert.ToDecimal(00).ToString("##.00");
                txt_sgst_amt.Text = Convert.ToDecimal(00).ToString("##.00");
                txt_igst_amt.Text = (Convert.ToDecimal(txt_total.Text) * totaltax / 100).ToString("#.00");
            }

            decimal grd_total;
            if (!string.IsNullOrEmpty(txt_total_amount.Text))
            {
                grd_total = 0;
            }
            else
            {
                decimal val1 = Convert.ToDecimal(txt_total.Text);
                decimal val2 = Convert.ToDecimal(txt_sgst_amt.Text);
                decimal val3 = Convert.ToDecimal(txt_cgst_amt.Text);
                decimal val4 = Convert.ToDecimal(txt_igst_amt.Text);

                grd_total = (val1 + val2 + val3 + val4);

            }
            txt_grand_total.Text = grd_total.ToString();
            hfTotal.Value = txt_grand_total.Text;

            string isNegative = "";
            try
            {
                string number = hfTotal.Value;
                number = Convert.ToDouble(number).ToString();

                lbl_Amount_In_Word.Text = isNegative + ConvertToWords(number);
            }
            catch (Exception)
            {

                throw;
            }
            //Round Off
            var Totalamtfff = Convert.ToDouble(txt_grand_total.Text);
            var totalgrand = Math.Round(Totalamtfff);
            System.Globalization.CultureInfo info = System.Globalization.CultureInfo.GetCultureInfo("en-IN");
            string FinaleTotalamt = Totalamtfff.ToString("N2", info);
            double GetVal = 0;  // to know rounded value
            GetVal -= Convert.ToDouble(Totalamtfff) - Convert.ToDouble(totalgrand);
            Double roundoff = Math.Round(GetVal, 2);
            txt_round_off.Text = roundoff.ToString();
            txt_grand_total.Text = totalgrand.ToString();
        }
    }

    protected void txt_round_off_TextChanged(object sender, EventArgs e)
    {
        decimal Round_Off;
        if (txt_round_off.Text == "0")
        {
            Round_Off = 0;

            decimal subTotal = Convert.ToDecimal(txt_total.Text);
            decimal GrossGrandTotal = subTotal;
            txt_grand_total.Text = GrossGrandTotal.ToString("##.00");
            hfTotal.Value = txt_grand_total.Text;

            string isNegative = "";
            try
            {
                string number = hfTotal.Value;
                number = Convert.ToDouble(number).ToString();

                lbl_Amount_In_Word.Text = isNegative + ConvertToWords(number);
            }
            catch (Exception)
            {
                throw;
            }
        }
        else
        {
            decimal val1 = Convert.ToDecimal(txt_round_off.Text);
            decimal val2 = Convert.ToDecimal(txt_grand_total.Text);
            Round_Off = (val2 - val1);
            txt_grand_total.Text = Round_Off.ToString("##.00");
            hfTotal.Value = txt_grand_total.Text;

            string isNegative = "";
            try
            {
                string number = hfTotal.Value;
                number = Convert.ToDouble(number).ToString();

                lbl_Amount_In_Word.Text = isNegative + ConvertToWords(number);
            }
            catch (Exception)
            {

                throw;
            }
        }
    }

    protected void txt_quntity_TextChanged(object sender, EventArgs e)
    {
        if (txt_quntity.Text == "" || txt_rate.Text == "")
        {
            ScriptManager.RegisterStartupScript(this, this.GetType(), "Alert", "alert('Please fill Rate  !!!');", true);
        }
        else
        {
            Table_Calculation();
        }
    }

    protected void txt_rate_TextChanged(object sender, EventArgs e)
    {
        if (txt_quntity.Text == "")
        {
            txt_tax.Text = "0";
            txt_discount.Text = "0";
            txt_tax.Text = "18";
        }
        else
        {
            Table_Calculation();
        }

    }

    protected void txt_tax_TextChanged(object sender, EventArgs e)
    {
        if (txt_quntity.Text == "")
        {

            ScriptManager.RegisterStartupScript(this, this.GetType(), "Alert", "alert('Please fill Quntity !!!');", true);

        }
        else
        {
            Table_Calculation();
        }

    }

    protected void gv_update_Click(object sender, EventArgs e)
    {
        GridViewRow row = (sender as LinkButton).NamingContainer as GridViewRow;

        string Tax = ((TextBox)row.FindControl("txt_tax_grd")).Text;
        string Quntity = ((TextBox)row.FindControl("txt_quntity_grd")).Text;
        string Rate = ((TextBox)row.FindControl("txt_rate_grd")).Text;
        string Discount = ((TextBox)row.FindControl("txt_discount_grd")).Text;
        string TotalAmount = ((TextBox)row.FindControl("txt_total_amount_grd")).Text;

        DataTable Dt = ViewState["PurchaesProduct"] as DataTable;

        Dt.Rows[row.RowIndex]["Tax"] = Tax;
        Dt.Rows[row.RowIndex]["Quntity"] = Quntity;
        Dt.Rows[row.RowIndex]["Rate"] = Rate;
        Dt.Rows[row.RowIndex]["Discount"] = Discount;
        Dt.Rows[row.RowIndex]["Total Amount"] = TotalAmount;

        Dt.AcceptChanges();

        ViewState["PurchaesProduct"] = Dt;
        gvPurchaseRecord.EditIndex = -1;

        gvPurchaseRecord.DataSource = (DataTable)ViewState["PurchaesProduct"];
        gvPurchaseRecord.DataBind();

        ScriptManager.RegisterStartupScript(this, this.GetType(), "Success", "scrollToElement();", true);
    }

    protected void gvPurchaseRecord_RowUpdating(object sender, GridViewUpdateEventArgs e)
    {

    }

    protected void txt_quntity_grd_TextChanged(object sender, EventArgs e)
    {
        GridViewRow row = (sender as TextBox).NamingContainer as GridViewRow;
        Grid_Calculation(row);
    }

    protected void txt_tax_grd_TextChanged(object sender, EventArgs e)
    {
        GridViewRow row = (sender as TextBox).NamingContainer as GridViewRow;
        Grid_Calculation(row);
    }

    protected void txt_rate_grd_TextChanged(object sender, EventArgs e)
    {
        GridViewRow row = (sender as TextBox).NamingContainer as GridViewRow;
        Grid_Calculation(row);
    }

    protected void txt_discount_grd_TextChanged(object sender, EventArgs e)
    {
        GridViewRow row = (sender as TextBox).NamingContainer as GridViewRow;
        Grid_Calculation(row);
    }

    private static String ones(String Number)
    {
        int _Number = Convert.ToInt32(Number);
        String name = "";
        switch (_Number)
        {

            case 1:
                name = "One";
                break;
            case 2:
                name = "Two";
                break;
            case 3:
                name = "Three";
                break;
            case 4:
                name = "Four";
                break;
            case 5:
                name = "Five";
                break;
            case 6:
                name = "Six";
                break;
            case 7:
                name = "Seven";
                break;
            case 8:
                name = "Eight";
                break;
            case 9:
                name = "Nine";
                break;
        }
        return name;
    }
    private static String tens(String Number)
    {
        int _Number = Convert.ToInt32(Number);
        String name = null;
        switch (_Number)
        {
            case 10:
                name = "Ten";
                break;
            case 11:
                name = "Eleven";
                break;
            case 12:
                name = "Twelve";
                break;
            case 13:
                name = "Thirteen";
                break;
            case 14:
                name = "Fourteen";
                break;
            case 15:
                name = "Fifteen";
                break;
            case 16:
                name = "Sixteen";
                break;
            case 17:
                name = "Seventeen";
                break;
            case 18:
                name = "Eighteen";
                break;
            case 19:
                name = "Nineteen";
                break;
            case 20:
                name = "Twenty";
                break;
            case 30:
                name = "Thirty";
                break;
            case 40:
                name = "Fourty";
                break;
            case 50:
                name = "Fifty";
                break;
            case 60:
                name = "Sixty";
                break;
            case 70:
                name = "Seventy";
                break;
            case 80:
                name = "Eighty";
                break;
            case 90:
                name = "Ninety";
                break;
            default:
                if (_Number > 0)
                {
                    name = tens(Number.Substring(0, 1) + "0") + " " + ones(Number.Substring(1));
                }
                break;
        }
        return name;
    }
    private static String ConvertWholeNumber(String Number)
    {
        string word = "";
        try
        {
            bool beginsZero = false;//tests for 0XX  
            bool isDone = false;//test if already translated  
            double dblAmt = (Convert.ToDouble(Number));
            //if ((dblAmt > 0) && number.StartsWith("0"))  
            if (dblAmt > 0)
            {//test for zero or digit zero in a nuemric  
                beginsZero = Number.StartsWith("0");

                int numDigits = Number.Length;
                int pos = 0;//store digit grouping  
                String place = "";//digit grouping name:hundres,thousand,etc...  
                switch (numDigits)
                {
                    case 1://ones' range  

                        word = ones(Number);
                        isDone = true;
                        break;
                    case 2://tens' range  
                        word = tens(Number);
                        isDone = true;
                        break;
                    case 3://hundreds' range  
                        pos = (numDigits % 3) + 1;
                        place = " Hundred ";
                        break;
                    case 4://thousands' range  
                    case 5:
                    case 6:
                        pos = (numDigits % 4) + 1;
                        place = " Thousand ";
                        break;
                    case 7://millions' range  
                    case 8:
                        pos = (numDigits % 6) + 1;
                        place = " Lac ";
                        break;
                    case 9:
                        pos = (numDigits % 8) + 1;
                        place = " Million ";
                        break;
                    case 10://Billions's range  
                    case 11:
                    case 12:

                        pos = (numDigits % 10) + 1;
                        place = " Billion ";
                        break;
                    //add extra case options for anything above Billion...  
                    default:
                        isDone = true;
                        break;
                }
                if (!isDone)
                {//if transalation is not done, continue...(Recursion comes in now!!)  
                    if (Number.Substring(0, pos) != "0" && Number.Substring(pos) != "0")
                    {
                        try
                        {
                            word = ConvertWholeNumber(Number.Substring(0, pos)) + place + ConvertWholeNumber(Number.Substring(pos));
                        }
                        catch { }
                    }
                    else
                    {
                        word = ConvertWholeNumber(Number.Substring(0, pos)) + ConvertWholeNumber(Number.Substring(pos));
                    }

                    //check for trailing zeros  
                    //if (beginsZero) word = " and " + word.Trim();  
                }
                //ignore digit grouping names  
                if (word.Trim().Equals(place.Trim())) word = "";
            }
        }
        catch { }
        return word.Trim();
    }
    private static String ConvertToWords(String numb)
    {
        String val = "", wholeNo = numb, points = "", andStr = "", pointStr = "";
        String endStr = "Only";
        try
        {
            int decimalPlace = numb.IndexOf(".");
            if (decimalPlace > 0)
            {
                wholeNo = numb.Substring(0, decimalPlace);
                points = numb.Substring(decimalPlace + 1);
                if (Convert.ToInt32(points) > 0)
                {
                    andStr = "and";// just to separate whole numbers from points/cents  
                    endStr = "Paisa " + endStr;//Cents  
                    pointStr = ConvertDecimals(points);
                }
            }
            val = String.Format("{0} {1}{2} {3}", ConvertWholeNumber(wholeNo).Trim(), andStr, pointStr, endStr);
        }
        catch { }
        return val;
    }
    private static String ConvertDecimals(String number)
    {
        String cd = "", digit = "", engOne = "";
        for (int i = 0; i < number.Length; i++)
        {
            digit = number[i].ToString();
            if (digit.Equals("0"))
            {
                engOne = "Zero";
            }
            else
            {
                engOne = ones(digit);
            }
            cd += " " + engOne;
        }
        return cd;
    }

    protected void gv_cancel_Click(object sender, EventArgs e)
    {
        GridViewRow row = (sender as LinkButton).NamingContainer as GridViewRow;

        string Tax = ((TextBox)row.FindControl("txt_tax_grd")).Text;
        string Quntity = ((TextBox)row.FindControl("txt_quntity_grd")).Text;
        string Rate = ((TextBox)row.FindControl("txt_rate_grd")).Text;
        string Discount = ((TextBox)row.FindControl("txt_discount_grd")).Text;
        string TotalAmount = ((TextBox)row.FindControl("txt_total_amount_grd")).Text;

        DataTable Dt = ViewState["PurchaesProduct"] as DataTable;
        gvPurchaseRecord.EditIndex = -1;
        ViewState["PurchaesProduct"] = Dt;
        gvPurchaseRecord.EditIndex = -1;

        gvPurchaseRecord.DataSource = (DataTable)ViewState["PurchaesProduct"];
        gvPurchaseRecord.DataBind();
        ScriptManager.RegisterStartupScript(this, this.GetType(), "Success", "scrollToElement();", true);
    }

    protected void gvPurchaseRecord_RowCancelingEdit(object sender, GridViewCancelEditEventArgs e)
    {

    }

    private void Clear_Record()
    {
        txt_vendor_name.Text = "";
        txt_po_date.Text = "";
        txt_po_no.Text = "";
        txt_kind_att.Text = "";
        txt_ref_no.Text = "";
        txt_delivery_address.Text = "";
        txt_email_id.Text = "";
        txt_mobile_no.Text = "";
        txt_gst_no.Text = "";
        txt_pay_term.Text = "";
        txt_discription.Text = "";
        txt_hsn.Text = "";
        txt_rate.Text = "";
        txt_quntity.Text = "";
        txt_tax.Text = "";
        txt_discount.Text = "";
        txt_unit.Text = "";
        txt_total_amount.Text = "";
        txt_term_1.Text = "";
        txt_term_2.Text = "";
        txt_term_3.Text = "";
        txt_term_4.Text = "";
        txt_condition_1.Text = "";
        txt_condition_2.Text = "";
        txt_condition_3.Text = "";
        txt_condition_4.Text = "";
        txt_total.Text = "";
        txt_sgst_amt.Text = "";
        txt_cgst_amt.Text = "";
        txt_igst_amt.Text = "";
        txt_round_off.Text = "";
        txt_grand_total.Text = "";
    }

    protected void btn_Cancel_Click(object sender, EventArgs e)
    {
        if (Request.QueryString["Pono"] != null)
        {
            Response.Redirect("PurchaseOrderReport.aspx");
        }
        else
        {
            Response.Redirect("PurchaseOrderList.aspx");
        }
    }

    protected void txt_vendor_name_TextChanged(object sender, EventArgs e)
    {
        Record();
    }

    private void Record()
    {
        DataTable Dt = new DataTable();
        SqlDataAdapter da = new SqlDataAdapter("SELECT * FROM tblVendor WHERE VendorName='" + txt_vendor_name.Text + "'", Conn);
        da.Fill(Dt);
        if (Dt.Rows.Count > 0)
        {
            txt_delivery_address.Text = Dt.Rows[0]["AddreLine1"].ToString();
            txt_gst_no.Text = Dt.Rows[0]["GSTNo"].ToString();
            txt_email_id.Text = Dt.Rows[0]["Email"].ToString();
            txt_mobile_no.Text = Dt.Rows[0]["MobNo"].ToString();
            txtstatecode.Text = Dt.Rows[0]["StateCode"].ToString();
        }

        DataTable dt1 = new DataTable();
        SqlDataAdapter sad1 = new SqlDataAdapter("select * from tblVendorContact where vendorName='" + txt_vendor_name.Text + "'", Conn);
        sad1.Fill(dt1);

        txt_kind_att.DataTextField = "ContactPerName";
        txt_kind_att.DataSource = dt1;
        txt_kind_att.DataBind();

        ///Email Bind
        SqlDataAdapter Sda = new SqlDataAdapter("SELECT * FROM tblVendorContact WHERE vendorName='" + txt_vendor_name.Text + "'", Conn);
        DataTable Sdt = new DataTable();
        Sda.Fill(Sdt);
        Grd_MAIL.DataSource = Sdt;
        Grd_MAIL.DataBind();
    }

    protected void Lnkbtn_addmail_Click(object sender, EventArgs e)
    {

        if (txt_email_id.Text == "")
        {
            ScriptManager.RegisterStartupScript(this, this.GetType(), "Alert", "alert('Please fill Mail ID  !!!');", true);
        }
        else
        {
            ShowMAILRecord();
        }
    }

    protected void ShowMAILRecord()
    {
        ViewState["RowNo"] = (int)ViewState["RowNo"] + 1;
        DataTable Dt = (DataTable)ViewState["MULTMail"];
        Dt.Rows.Add(ViewState["RowNo"], txt_email_id.Text);
        ViewState["MULTMail"] = Dt;

        txt_email_id.Text = string.Empty;

        Grd_MAIL.DataSource = (DataTable)ViewState["MULTMail"];
        Grd_MAIL.DataBind();
    }

    protected void lnkMAILDelete_Click(object sender, EventArgs e)
    {
        GridViewRow row = (sender as LinkButton).NamingContainer as GridViewRow;

        DataTable dt = ViewState["MULTMail"] as DataTable;
        dt.Rows.Remove(dt.Rows[row.RowIndex]);
        ViewState["MULTMail"] = dt;
        Grd_MAIL.DataSource = (DataTable)ViewState["MULTMail"];
        Grd_MAIL.DataBind();
        ScriptManager.RegisterStartupScript(this, this.GetType(), "Alert", "alert('Mail ID Delete Succesfully !!!');", true);
    }

    [System.Web.Script.Services.ScriptMethod()]
    [System.Web.Services.WebMethod]
    public static List<string> GetdescriptionList(string prefixText, int count)
    {
        return AutoFilldescrlist(prefixText);
    }

    public static List<string> AutoFilldescrlist(string prefixText)
    {
        using (SqlConnection con = new SqlConnection())
        {
            con.ConnectionString = ConfigurationManager.ConnectionStrings["connectionString"].ConnectionString;

            using (SqlCommand com = new SqlCommand())
            {
                com.CommandText = "select DISTINCT ProdName from tblProduct where " + "ProdName like @Search + '%' AND isdeleted='0' ";

                com.Parameters.AddWithValue("@Search", prefixText);
                com.Connection = con;
                con.Open();
                List<string> ProdName = new List<string>();
                using (SqlDataReader sdr = com.ExecuteReader())
                {
                    while (sdr.Read())
                    {
                        ProdName.Add(sdr["ProdName"].ToString());
                    }
                }
                con.Close();
                return ProdName;
            }
        }
    }

    protected void Grd_MAIL_RowDataBound(object sender, GridViewRowEventArgs e)
    {
        if (btn_save.Text == "Update")
        {
            Conn.Close();
            Conn.Open();
            if (e.Row.RowType == DataControlRowType.DataRow)
            {

                int id = Convert.ToInt32(Grd_MAIL.DataKeys[e.Row.RowIndex].Values[0]);
                CheckBox chkmailupdate = (CheckBox)e.Row.FindControl("chkmail");
                Label mail = (Label)e.Row.FindControl("lblmultMail");
                SqlCommand cmd = new SqlCommand("select chkEmail from tblVendorPoMail where PoNo='" + txt_po_no.Text + "' AND id='" + id + "'", Conn);

                SqlDataReader dr = cmd.ExecuteReader();
                if (dr.Read())
                {
                    chkupdate = dr["chkEmail"].ToString();
                    Conn.Close();
                }
                chkmailupdate.Checked = chkupdate == "True" ? true : false;
            }
        }
    }
}